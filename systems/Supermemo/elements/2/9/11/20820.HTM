<HEAD></HEAD>
<BODY>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 16.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>CHAPTER 6 </SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 72pt; mso-bidi-font-size: 24.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Advanced Char Driver Operations</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In Chapter 3, we built a complete device driver that the user can write to and read from. But a real device usually offers more functionality than synchronous </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. Now that we</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>re equipped with debugging tools should something go awry</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka"> <SPAN lang=EN-US>and a firm understanding of concurrency issues to help keep things from going awry</SPAN></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>we can safely go ahead and create a more advanced driver. </SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This chapter examines a few concepts that you need to understand to write fully featured char device drivers. We start with implementing the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call, which is a common interface used for device control. Then we proceed to various ways of synchronizing with user space; by the end of this chapter you have a good idea of how to put processes to sleep (and wake them up), implement nonblocking I/O, and inform user space when your devices are available for reading or writing. We finish with a look at how to implement a few different device access policies within drivers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ideas discussed here are demonstrated by way of a couple of modified versions of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver. Once again, everything is implemented using in-memory virtual devices, so you can try out the code yourself without needing to have any particular hardware. By now, you may be wanting to get your hands dirty with real hardware, but that will have to wait until Chapter 9.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ioctl</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Most drivers need</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in addition to the ability to read and write the device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the ability to perform various types of hardware control via the device driver. Most devices can perform operations beyond simple data transfers; user space must often be able to request, for example, that the device lock its door, eject its media, report error information, change a baud rate, or self destruct. These operations are usually supported via the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, which implements the system call by the same name. In user space, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call has the following prototype:</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int ioctl(int fd, unsigned long cmd, ...);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The prototype stands out in the list of Unix system calls because of the dots, which usually mark the function as having a variable number of arguments. In a real system, however, a system call can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t actually have a variable number of arguments. System calls must have a well-defined prototype, because user programs can access them only through hardware </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>gates.</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Therefore, the dots in the prototype represent not a variable number of arguments but a single optional argument, traditionally identified as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>char *argp</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The dots are simply there to prevent type checking during compilation. The actual nature of the third argument depends on the specific control command being issued (the second argument). Some commands take no arguments, some take an integer value, and some take a pointer to other data. Using a pointer is the way to pass arbitrary data to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call; the device is then able to exchange any amount of data with user space.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The unstructured nature of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call has caused it to fall out of favor among kernel developers. Each </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command is, essentially, a separate, usually undocumented system call, and there is no way to audit these calls in any sort of comprehensive manner. It is also difficult to make the unstructured </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>arguments work identically on all systems; for example, consider 64-bit systems with a userspace process running in 32-bit mode. As a result, there is strong pressure to implement miscellaneous control operations by just about any other means. Possible alternatives include embedding commands into the data stream (we will discuss this approach later in this chapter) or using virtual filesystems, either sysfs or driverspecific filesystems. (We will look at sysfs in Chapter 14.) However, the fact remains that </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is often the easiest and most straightforward choice for true device operations.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver method has a prototype that differs somewhat from the user-space version:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*ioctl) (struct inode *inode, struct file *filp,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int cmd, unsigned long arg);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>inode </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pointers are the values corresponding to the file descriptor </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fd </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>passed on by the application and are the same parameters passed to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cmd </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument is passed from the user unchanged, and the optional </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>arg </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument is passed in the form of an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned long</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, regardless of whether it was given by the user as an integer or a pointer. If the invoking program doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t pass a third argument, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>arg </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>value received by the driver operation is undefined. Because type checking is disabled on the extra argument, the compiler can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t warn you if an invalid argument is passed to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and any associated bug would be difficult to spot.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>As you might imagine, most </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementations consist of a big </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>switch </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>statement that selects the correct behavior according to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cmd </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument. Different commands have different numeric values, which are usually given symbolic names to simplify coding. The symbolic name is assigned by a preprocessor definition. Custom drivers usually declare such symbols in their header files; </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull.h </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>declares them for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. User programs must, of course, include that header file as well to have access to those symbols.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Choosing the ioctl Commands</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Before writing the code for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you need to choose the numbers that correspond to commands. The first instinct of many programmers is to choose a set of small numbers starting with 0 or 1 and going up from there. There are, however, good reasons for not doing things that way. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command numbers should be unique across the system in order to prevent errors caused by issuing the right command to the wrong device. Such a mismatch is not unlikely to happen, and a program might find itself trying to change the baud rate of a non-serial-port input stream, such as a FIFO or an audio device. If each </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>number is unique, the application gets an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>EINVAL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>error rather than succeeding in doing something unintended.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>To help programmers create unique </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command codes, these codes have been split up into several bitfields. The first versions of Linux used 16-bit numbers: the top eight were the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>magic</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> numbers associated with the device, and the bottom eight were a sequential number, unique within the device. This happened because Linus was </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>clueless</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> (his own word); a better division of bitfields was conceived only later. Unfortunately, quite a few drivers still use the old convention. They have to: changing the command codes would break no end of binary programs, and that is not something the kernel developers are willing to do.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>To choose </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>numbers for your driver according to the Linux kernel convention, you should first check </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>include/asm/ioctl.h </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Documentation/ioctl-number.txt</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The header defines the bitfields you will be using: type (magic number), ordinal number, direction of transfer, and size of argument. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl-number.txt </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>file lists the magic numbers used throughout the kernel,</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> * Maintenance of this file has been somewhat scarce as of late, however.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>so you</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll be able to choose your own magic number and avoid overlaps. The text file also lists the reasons why the convention should be used.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The approved way to define </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command numbers uses four bitfields, which have the following meanings. New symbols introduced in this list are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/ioctl.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>type</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The magic number. Just choose one number (after consulting </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl-number.txt</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) and use it throughout the driver. This field is eight bits wide (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_TYPEBITS</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>number</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ordinal (sequential) number. It</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s eight bits (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NRBITS</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) wide.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>direction</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The direction of data transfer, if the particular command involves a data transfer. The possible values are </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NONE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(no data transfer), </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_READ</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_WRITE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_READ|_IOC_WRITE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(data is transferred both ways). Data transfer is seen from the application</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s point of view; </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_READ </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>means reading </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>from </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the device, so the driver must write to user space. Note that the field is a bit mask, so </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_ READ </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_WRITE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>can be extracted using a logical AND operation.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The size of user data involved. The width of this field is architecture dependent, but is usually 13 or 14 bits. You can find its value for your specific architecture in the macro </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_SIZEBITS</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. It</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s not mandatory that you use the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>field</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the kernel does not check it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>but it is a good idea. Proper use of this field can help detect user-space programming errors and enable you to implement backward compatibility if you ever need to change the size of the relevant data item. If you need larger data structures, however, you can just ignore the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>field. We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll see how this field is used soon.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The header file </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;asm/ioctl.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which is included by </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/ioctl.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, defines macros that help set up the command numbers as follows: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IO(type,nr) </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for a command that has no argument), </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOR(type,nr,datatype) </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for reading data from the driver), </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOW(type,nr,datatype) </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for writing data), and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOWR(type,nr,datatype) </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for bidirectional transfers). The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>type </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>number </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>fields are passed as arguments, and the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>field is derived by applying </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sizeof </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>datatype </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The header also defines macros that may be used in your driver to decode the numbers: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_DIR(nr)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_TYPE(nr)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NR(nr)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_SIZE(nr)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. We won</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t go into any more detail about these macros because the header file is clear, and sample code is shown later in this section.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Here is how some </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. In particular, these commands set and get the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s configurable parameters.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* Use 'k' as magic number */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOC_MAGIC 'k'</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* Please use a different 8-bit number in your code */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCRESET _IO(SCULL_IOC_MAGIC, 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/*</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* S means "Set" through a ptr,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* T means "Tell" directly with the argument value</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* G means "Get": reply by setting through a pointer</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* Q means "Query": response is on the return value</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* X means "eXchange": switch G and S atomically</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* H means "sHift": switch T and Q atomically</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>*/</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCSQUANTUM _IOW(SCULL_IOC_MAGIC, 1, int)</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCSQSET _IOW(SCULL_IOC_MAGIC, 2, int)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCTQUANTUM _IO(SCULL_IOC_MAGIC, 3)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCTQSET _IO(SCULL_IOC_MAGIC, 4)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCGQUANTUM _IOR(SCULL_IOC_MAGIC, 5, int)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCGQSET _IOR(SCULL_IOC_MAGIC, 6, int)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCQQUANTUM _IO(SCULL_IOC_MAGIC, 7)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCQQSET _IO(SCULL_IOC_MAGIC, 8)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCXQUANTUM _IOWR(SCULL_IOC_MAGIC, 9, int)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCXQSET _IOWR(SCULL_IOC_MAGIC,10, int)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCHQUANTUM _IO(SCULL_IOC_MAGIC, 11)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOCHQSET _IO(SCULL_IOC_MAGIC, 12)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#define SCULL_IOC_MAXNR 14</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The actual source file defines a few extra commands that have not been shown here. We chose to implement both ways of passing integer arguments: by pointer and by explicit value (although, by an established convention, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should exchange values by pointer). Similarly, both ways are used to return an integer number: by pointer or by setting the return value. This works as long as the return value is a positive integer; as you know by now, on return from any system call, a positive value is preserved (as we saw for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), while a negative value is considered an error and is used to set </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>errno </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in user space.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> * Actually, all </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>libc </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementations currently in use (including uClibc) consider as error codes only values in the range </SPAN><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8211;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>4095 to </SPAN><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8211;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>1. Unfortunately, being able to return large negative numbers but not small ones is not very useful. </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>exchange</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> and </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>shift</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> operations are not particularly useful for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. We implemented </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>exchange</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> to show how the driver can combine separate operations into a single atomic one, and </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>shift</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> to pair </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>tell</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> and </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>query.</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> There are times when atomic test-and-set operations like these are needed, in particular, when applications need to set or release locks.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The explicit ordinal number of the command has no specific meaning. It is used only to tell the commands apart. Actually, you could even use the same ordinal number for a read command and a write command, since the actual </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>number is different in the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>direction</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> bits, but there is no reason why you would want to do so. We chose not to use the ordinal number of the command anywhere but in the declaration, so we didn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t assign a symbolic value to it. That</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s why explicit numbers appear in the definition given previously. The example shows one way to use the command numbers, but you are free to do it differently.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>With the exception of a small number of predefined commands (to be discussed shortly), the value of the </SPAN><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>ioctl </SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>cmd </SPAN></FONT><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument is not currently used by the kernel, and it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s quite unlikely it will be in the future. Therefore, you could, if you were feeling lazy, avoid the complex declarations shown earlier and explicitly declare a set of scalar numbers. On the other hand, if you did, you wouldn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t benefit from using the bitfields, and you would encounter difficulties if you ever submitted your code for inclusion in the mainline kernel. The header </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/kd.h&gt; </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is an example of this oldfashioned approach, using 16-bit scalar values to define the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands. That source file relied on scalar numbers because it used the conventions obeyed at that time, not out of laziness. Changing it now would cause gratuitous incompatibility.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The Return Value</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The implementation of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is usually a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>switch </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>statement based on the command number. But what should the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>default </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>selection be when the command number doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t match a valid operation? The question is controversial. Several kernel functions return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EINVAL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Invalid argument</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), which makes sense because the command argument is indeed not a valid one. The POSIX standard, however, states that if an inappropriate </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command has been issued, then </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ENOTTY </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should be returned. This error code is interpreted by the C library as </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>inappropriate ioctl for device,</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka"> <SPAN lang=EN-US>which is usually exactly what the programmer needs to hear. It</SPAN></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s still pretty common, though, to return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EINVAL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in response to an invalid </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The Predefined Commands</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Although the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call is most often used to act on devices, a few commands are recognized by the kernel. Note that these commands, when applied to your device, are decoded </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>before </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>your own file operations are called. Thus, if you choose the same number for one of your </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands, you won</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t ever see any request for that command, and the application gets something unexpected because of the conflict between the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>numbers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The predefined commands are divided into three groups:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Those that can be issued on any file (regular, device, FIFO, or socket)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Those that are issued only on regular files</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Those specific to the filesystem type</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Commands in the last group are executed by the implementation of the hosting filesystem (this is how the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>chattr </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command works). Device driver writers are interested only in the first group of commands, whose magic number is </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>T.</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Looking at the workings of the other groups is left to the reader as an exercise; </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ext2_ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a most interesting function (and easier to understand than one might expect), because it implements the append-only flag and the immutable flag.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The following </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands are predefined for any file, including device-special files:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIOCLEX</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Set the close-on-exec flag (File IOctl CLose on EXec). Setting this flag causes the file descriptor to be closed when the calling process executes a new program.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIONCLEX</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Clear the close-on-exec flag (File IOctl Not CLos on EXec). The comn does.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIOASYNC</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Set or reset asynchronous notification for the file (as discussed in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Asynchronous Notification,</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> later in this chapter). Note that kernel versions up to Linux 2.2.4 incorrectly used this command to modify the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_SYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag. Since both actions can be accomplished through </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, nobody actually uses the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIOASYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command, which is reported here only for completeness.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIOQSIZE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This command returns the size of a file or directory; when applied to a device file, however, it yields an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ENOTTY </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>error return.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FIONBIO</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>File IOctl Non-Blocking I/O</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> (described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Blocking and Nonblocking Operations</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>). This call modifies the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_flags</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The third argument to the system call is used to indicate whether the flag is to be set or cleared. (We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll look at the role of the flag later in this chapter.) Note that the usual way to change this flag is with the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call, using the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>F_SETFL </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The last item in the list introduced a new system call, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which looks like </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. In fact, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call is very similar to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in that it gets a command argument and an extra (optional) argument. It is kept separate from </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>mainly for historical reasons: when Unix developers faced the problem of controlling I/O operations, they decided that files and devices were different. At the time, the only devices with </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementations were ttys, which explains why </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ENOTTY </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is the standard reply for an incorrect </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command. Things have changed, but </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>remains a separate system call.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Using the ioctl Argument</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Another point we need to cover before looking at the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>code for the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver is how to use the extra argument. If it is an integer, it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s easy: it can be used directly. If it is a pointer, however, some care must be taken.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When a pointer is used to refer to user space, we must ensure that the user address is valid. An attempt to access an unverified user-supplied pointer can lead to incorrect behavior, a kernel oops, system corruption, or security problems. It is the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s responsibility to make proper checks on every user-space address it uses and to return an error if it is invalid.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In Chapter 3, we looked at the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_from_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_to_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>functions, which can be used to safely move data to and from user space. Those functions can be used in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>methods as well, but </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>calls often involve small data items that can be more efficiently manipulated through other means. To start, address verification (without transferring data) is implemented by the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which is declared in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;asm/uaccess.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int access_ok(int type, const void *addr, unsigned long size);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The first argument should be either </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_READ </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_WRITE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, depending on whether the action to be performed is reading the user-space memory area or writing it. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>addr </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument holds a user-space address, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a byte count. If </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, for instance, needs to read an integer value from user space, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>size </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sizeof(int)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. If you need to both read and write at the given address, use </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_WRITE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, since it is a superset of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_READ</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Unlike most kernel functions, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns a boolean value: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>1 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>for success (access is OK) and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>for failure (access is not OK). If it returns false, the driver should usually return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EFAULT </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to the caller.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>There are a couple of interesting things to note about </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. First, it does not do the complete job of verifying memory access; it only checks to see that the memory reference is in a region of memory that the process might reasonably have access to. In particular, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ensures that the address does not point to kernel-space memory. Second, most driver code need not actually call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The memory-access routines described later take care of that for you. Nonetheless, we demonstrate its use so that you can see how it is done.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>source exploits the bitfields in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>number to check the arguments before the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>switch</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int err = 0, tmp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int retval = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/*</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* extract the type and number bitfields, and don't decode</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* wrong cmds: return ENOTTY (inappropriate ioctl) before access_ok( )</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>*/</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (_IOC_TYPE(cmd) != SCULL_IOC_MAGIC) return -ENOTTY;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (_IOC_NR(cmd) &gt; SCULL_IOC_MAXNR) return -ENOTTY;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/*</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* the direction is a bitmask, and VERIFY_WRITE catches R/W</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* transfers. `Type' is user-oriented, while</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* access_ok is kernel-oriented, so the concept of "read" and</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* "write" is reversed</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>*/</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (_IOC_DIR(cmd) &amp; _IOC_READ)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>else if (_IOC_DIR(cmd) &amp; _IOC_WRITE)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err = !access_ok(VERIFY_READ, (void __user *)arg, _IOC_SIZE(cmd));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (err) return -EFAULT;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>After calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the driver can safely perform the actual transfer. In addition to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_from_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_to_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>functions, the programmer can exploit a set of functions that are optimized for the most used data sizes (one, two, four, and eight bytes). These functions are described in the following list and are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;asm/uaccess.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_user(datum, ptr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user(datum, ptr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>These macros write the datum to user space; they are relatively fast and should be called instead of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_to_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>whenever single values are being transferred. The macros have been written to allow the passing of any type of pointer to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_user</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, as long as it is a user-space address. The size of the data transfer depends on the type of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ptr </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument and is determined at compile time using the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sizeof </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typeof </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>compiler builtins. As a result, if </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ptr </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a char pointer, one byte is transferred, and so on for two, four, and possibly eight bytes.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>checks to ensure that the process is able to write to the given memory address. It returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>on success, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EFAULT </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>on error. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>performs less checking (it does not call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), but can still fail if the memory pointed to is not writable by the user. Thus, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should only be used if the memory region has already been verified with </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>As a general rule, you call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to save a few cycles when you are implementing a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, or when you copy several items and, thus, call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>just once before the first data transfer, as shown above for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>get_user(local, ptr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__get_user(local, ptr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>These macros are used to retrieve a single datum from user space. They behave like </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, but transfer data in the opposite direction. The value retrieved is stored in the local variable </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>local</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>; the return value indicates whether the operation succeeded. Again, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__get_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should only be used if the address has already been verified with </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If an attempt is made to use one of the listed functions to transfer a value that does not fit one of the specific sizes, the result is usually a strange message from the compiler, such as </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>conversion to non-scalar type requested.</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> In such cases, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_to_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_from_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>must be used.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Capabilities and Restricted Operations</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Access to a device is controlled by the permissions on the device file(s), and the driver is not normally involved in permissions checking. There are situations, however, where any user is granted read/write permission on the device, but some control operations should still be denied. For example, not all users of a tape drive should be able to set its default block size, and a user who has been granted read/write access to a disk device should probably still be denied the ability to format it. In cases like these, the driver must perform additional checks to be sure that the user is capable of performing the requested operation.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Unix systems have traditionally restricted privileged operations to the superuser account. This meant that privilege was an all-or-nothing thing</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the superuser can do absolutely anything, but all other users are highly restricted. The Linux kernel provides a more flexible system called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>capabilities</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. A capability-based system leaves the all-or-nothing mode behind and breaks down privileged operations into separate subgroups. In this way, a particular user (or program) can be empowered to perform a specific privileged operation without giving away the ability to perform other, unrelated operations. The kernel uses capabilities exclusively for permissions management and exports two system calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>capget </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>capset</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, to allow them to be managed from user space.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The full set of capabilities can be found in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&lt;linux/capability.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. These are the only capabilities known to the system; it is not possible for driver authors or system administrators to define new ones without modifying the kernel source. A subset of those capabilities that might be of interest to device driver writers includes the following:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_DAC_OVERRIDE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ability to override access restrictions (data access control, or DAC) on files and directories.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_NET_ADMIN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ability to perform network administration tasks, including those that affect network interfaces.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_SYS_MODULE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ability to load or remove kernel modules.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_SYS_RAWIO</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ability to perform </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>raw</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> I/O operations. Examples include accessing device ports or communicating directly with USB devices.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_SYS_ADMIN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>A catch-all capability that provides access to many system administration operations.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>CAP_SYS_TTY_CONFIG</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The ability to perform tty configuration tasks.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Before performing a privileged operation, a device driver should check that the calling process has the appropriate capability; failure to do so could result user processes performing unauthorized operations with bad results on system stability or security. Capability checks are performed with the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>capable </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>function (defined in</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/sched.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>):</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int capable(int capability);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sample driver, any user is allowed to query the quantum and quantum set sizes. Only privileged users, however, may change those values, since inappropriate values could badly affect system performance. When needed, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>checks a user</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s privilege level as follows:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! capable (CAP_SYS_ADMIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EPERM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In the absence of a more specific capability for this task, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>CAP_SYS_ADMIN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>was chosen for this test.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The Implementation of the ioctl Commands</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>only transfers the configurable parameters of the device and turns out to be as easy as the following:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>switch(cmd) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCRESET:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_quantum = SCULL_QUANTUM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_qset = SCULL_QSET;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCSQUANTUM: /* Set: arg points to the value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! capable (CAP_SYS_ADMIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EPERM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = __get_user(scull_quantum, (int __user *)arg);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCTQUANTUM: /* Tell: arg is the value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! capable (CAP_SYS_ADMIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EPERM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_quantum = arg;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCGQUANTUM: /* Get: arg is pointer to result */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = __put_user(scull_quantum, (int __user *)arg);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCQQUANTUM: /* Query: return it (it's positive) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return scull_quantum;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCXQUANTUM: /* eXchange: use arg as pointer */</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! capable (CAP_SYS_ADMIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EPERM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>tmp = scull_quantum;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = __get_user(scull_quantum, (int __user *)arg);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (retval = = 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = __put_user(tmp, (int __user *)arg);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>case SCULL_IOCHQUANTUM: /* sHift: like Tell + Query */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! capable (CAP_SYS_ADMIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EPERM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>tmp = scull_quantum;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_quantum = arg;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return tmp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>default: /* redundant, as cmd was checked against MAXNR */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ENOTTY;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return retval;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>also includes six entries that act on </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_qset</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. These entries are identical to the ones for </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_quantum </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and are not worth showing in print.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The six ways to pass and receive arguments look like the following from the caller</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s point of view (i.e., from user space):</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int quantum;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl(fd,SCULL_IOCSQUANTUM, &amp;quantum); /* Set by pointer */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl(fd,SCULL_IOCTQUANTUM, quantum); /* Set by value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl(fd,SCULL_IOCGQUANTUM, &amp;quantum); /* Get by pointer */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>quantum = ioctl(fd,SCULL_IOCQQUANTUM); /* Get by return value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl(fd,SCULL_IOCXQUANTUM, &amp;quantum); /* Exchange by pointer */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>quantum = ioctl(fd,SCULL_IOCHQUANTUM, quantum); /* Exchange by value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Of course, a normal driver would not implement such a mix of calling modes. We have done so here only to demonstrate the different ways in which things could be done. Normally, however, data exchanges would be consistently performed, either through pointers or by value, and mixing of the two techniques would be avoided.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Device Control Without ioctl</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Sometimes controlling the device is better accomplished by writing control sequences to the device itself. For example, this technique is used in the console driver, where so-called escape sequences are used to move the cursor, change the default color, or perform other configuration tasks. The benefit of implementing device control this way is that the user can control the device just by writing data, without needing to use (or sometimes write) programs built just for configuring the device. When devices can be controlled in this manner, the program issuing commands often need not even be running on the same system as the device it is controlling.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>For example, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>setterm </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>program acts on the console (or another terminal) configuration by printing escape sequences. The controlling program can live on a different computer from the controlled device, because a simple redirection of the data stream does the configuration job. This is what happens every time you run a remote tty session: escape sequences are printed remotely but affect the local tty; the technique is not restricted to ttys, though.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The drawback of controlling by printing is that it adds policy constraints to the device; for example, it is viable only if you are sure that the control sequence can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t appear in the data being written to the device during normal operation. This is only partly true for ttys. Although a text display is meant to display only ASCII characters, sometimes control characters can slip through in the data being written and can, therefore, affect the console setup. This can happen, for example, when you </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cat </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>a binary file to the screen; the resulting mess can contain anything, and you often end up with the wrong font on your console.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Controlling by write </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>is </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>definitely the way to go for those devices that don</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t transfer data but just respond to commands, such as robotic devices.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>For instance, a driver written for fun by one of your authors moves a camera on two axes. In this driver, the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> is simply a pair of old stepper motors, which can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t really be read from or written to. The concept of </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sending a data stream</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> to a stepper motor makes little or no sense. In this case, the driver interprets what is being written as ASCII commands and converts the requests to sequences of impulses that manipulate the stepper motors. The idea is similar, somewhat, to the AT commands you send to the modem in order to set up communication, the main difference being that the serial port used to communicate with the modem must transfer real data as well. The advantage of direct device control is that you can use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cat </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to move the camera without writing and compiling special code to issue the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>calls.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When writing command-oriented drivers, there</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s no reason to implement the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method. An additional command in the interpreter is easier to implement and use. </SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Sometimes, though, you might choose to act the other way around: instead of turning the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method into an interpreter and avoiding </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you might choose to avoid </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>altogether and use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands exclusively, while accompanying the driver with a specific command-line tool to send those commands to the driver. This approach moves the complexity from kernel space to user space, where it may be easier to deal with, and helps keep the driver small while denying use of simple </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cat </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>echo </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Blocking I/O</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Back in Chapter 3, we looked at how to implement the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver methods. At that point, however, we skipped over one important issue: how does a driver respond if it cannot immediately satisfy the request? A call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>may come when no data is available, but more is expected in the future. Or a process could attempt to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, but your device is not ready to accept the data, because your output buffer is full. The calling process usually does not care about such issues; the programmer simply expects to call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and have the call return after the necessary work has been done. So, in such cases, your driver should (by default) </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>block </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the process, putting it to sleep until the request can proceed.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This section shows how to put a process to sleep and wake it up again later on. As usual, however, we have to explain a few concepts first.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Introduction to Sleeping</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>What does it mean for a process to </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sleep</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>? When a process is put to sleep, it is marked as being in a special state and removed from the scheduler</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s run queue. Until something comes along to change that state, the process will not be scheduled on any CPU and, therefore, will not run. A sleeping process has been shunted off to the side of the system, waiting for some future event to happen.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Causing a process to sleep is an easy thing for a Linux device driver to do. There are, however, a couple of rules that you must keep in mind to be able to code sleeps in a safe manner.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The first of these rules is: never sleep when you are running in an atomic context. We got an introduction to atomic operation in Chapter 5; an atomic context is simply a state where multiple steps must be performed without any sort of concurrent access. What that means, with regard to sleeping, is that your driver cannot sleep while holding a spinlock, seqlock, or RCU lock. You also cannot sleep if you have disabled interrupts. It </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>is </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>legal to sleep while holding a semaphore, but you should look very carefully at any code that does so. If code sleeps while holding a semaphore, any other thread waiting for that semaphore also sleeps. So any sleeps that happen while holding semaphores should be short, and you should convince yourself that, by holding the semaphore, you are not blocking the process that will eventually wake you up.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Another thing to remember with sleeping is that, when you wake up, you never know how long your process may have been out of the CPU or what may have changed in the mean time. You also do not usually know if another process may have been sleeping for the same event; that process may wake before you and grab whatever resource you were waiting for. The end result is that you can make no assumptions about the state of the system after you wake up, and you must check to ensure that the condition you were waiting for is, indeed, true.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>One other relevant point, of course, is that your process cannot sleep unless it is assured that somebody else, somewhere, will wake it up. The code doing the awakening must also be able to find your process to be able to do its job. Making sure that a wakeup happens is a matter of thinking through your code and knowing, for each sleep, exactly what series of events will bring that sleep to an end. Making it possible for your sleeping process to be found is, instead, accomplished through a data structure called a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait queue</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. A wait queue is just what it sounds like: a list of processes, all waiting for a specific event.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In Linux, a wait queue is managed by means of a </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>wait queue head,</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> a structure of type </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_head_t</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which is defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/wait.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. A wait queue head can be defined and initialized statically with:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DECLARE_WAIT_QUEUE_HEAD(name);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or dynamicly as follows:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_head_t my_queue;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>init_waitqueue_head(&amp;my_queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We will return to the structure of wait queues shortly, but we know enough now to take a first look at sleeping and waking up.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Simple Sleeping</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When a process sleeps, it does so in expectation that some condition will become true in the future. As we noted before, any process that sleeps must check to be sure that the condition it was waiting for is really true when it wakes up again. The simplest way of sleeping in the Linux kernel is a macro called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(with a few variants); it combines handling the details of sleeping with a check on the condition a process is waiting for. The forms of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>are:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event(queue, condition)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible(queue, condition)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_timeout(queue, condition, timeout)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible_timeout(queue, condition, timeout)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In all of the above forms, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>queue </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is the wait queue head to use. Notice that it is passed </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>by value.</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>condition </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is an arbitrary boolean expression that is evaluated by the macro before and after sleeping; until </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>condition </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>evaluates to a true value, the process continues to sleep. Note that </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>condition </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>may be evaluated an arbitrary number of times, so it should not have any side effects.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If you use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, your process is put into an uninterruptible sleep which, as we have mentioned before, is usually not what you want. The preferred alternative is </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which can be interrupted by signals. This version returns an integer value that you should check; a nonzero value means your sleep was interrupted by some sort of signal, and your driver should probably return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ERESTARTSYS</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The final versions (</SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_timeout </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible_timeout</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) wait for a limited time; after that time period (expressed in jiffies, which we will discuss in Chapter 7) expires, the macros return with a value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>regardless of how </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>condition </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>evaluates.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The other half of the picture, of course, is waking up. Some other thread of execution (a different process, or an interrupt handler, perhaps) has to perform the wakeup for you, since your process is, of course, asleep. The basic function that wakes up sleeping processes is called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. It comes in several forms (but we look at only two of them now):</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_interruptible(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>wakes up all processes waiting on the given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>queue </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(though the situation is a little more complicated than that, as we will see later). The other form (</SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_ interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) restricts itself to processes performing an interruptible sleep. In general, the two are indistinguishable (if you are using interruptible sleeps); in practice, the convention is to use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>if you are using </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>if you use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We now know enough to look at a simple example of sleeping and waking up. In the sample source, you can find a module called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleepy</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. It implements a device with simple behavior: any process that attempts to read from the device is put to sleep. Whenever a process writes to the device, all sleeping processes are awakened. This behavior is implemented with the following </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>methods:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static DECLARE_WAIT_QUEUE_HEAD(wq);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int flag = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ssize_t sleepy_read (struct file *filp, char __user *buf, size_t count, loff_t *pos)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>printk(KERN_DEBUG "process %i (%s) going to sleep\n",</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>current-&gt;pid, current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible(wq, flag != 0);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>printk(KERN_DEBUG "awoken %i (%s)\n", current-&gt;pid, current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0; /* EOF */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ssize_t sleepy_write (struct file *filp, const char __user *buf, size_t count,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>loff_t *pos)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>printk(KERN_DEBUG "process %i (%s) awakening the readers...\n",</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>current-&gt;pid, current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag = 1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible(&amp;wq);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return count; /* succeed, to avoid retrial */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Note the use of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>variable in this example. Since </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>checks for a condition that must become true, we use </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to create that condition.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>It is interesting to consider what happens if </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>two </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>processes are waiting when </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleepy_write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is called. Since </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleepy_read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>resets </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>once it wakes up, you might think that the second process to wake up would immediately go back to sleep. On a single-processor system, that is almost always what happens. But it is important to understand why you cannot count on that behavior. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>will </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>cause both sleeping processes to wake up. It is entirely possible that they will both note that </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>flag </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is nonzero before either has the opportunity to reset it. For this trivial module, this race condition is unimportant. In a real driver, this kind of race can create rare crashes that are difficult to diagnose. If correct operation required that exactly one process see the nonzero value, it would have to be tested in an atomic manner. We will see how a real driver handles such situations shortly. But first we have to cover one other topic.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Blocking and Nonblocking Operations</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>One last point we need to touch on before we look at the implementation of full-featured </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>methods is deciding when to put a process to sleep. There are times when implementing proper Unix semantics requires that an operation not block, even if it cannot be completely carried out.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>There are also times when the calling process informs you that it does not </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>want </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to block, whether or not its I/O can make any progress at all. Explicitly nonblocking I/O is indicated by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_flags</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The flag is defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/ fcntl.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which is automatically included by </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/fs.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The flag gets its name from </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>open-nonblock,</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> because it can be specified at open time (and originally could be specified only there). If you browse the source code, you find some references to an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NDELAY </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag; this is an alternate name for </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, accepted for compatibility with System V code. The flag is cleared by default, because the normal behavior of a process waiting for data is just to sleep. In the case of a blocking operation, which is the default, the following behavior should be implemented in order to adhere to the standard semantics:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If a process calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>but no data is (yet) available, the process must block. The process is awakened as soon as some data arrives, and that data is returned to the caller, even if there is less than the amount requested in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument to the method.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If a process calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and there is no space in the buffer, the process must block, and it must be on a different wait queue from the one used for reading. When some data has been written to the hardware device, and space becomes free in the output buffer, the process is awakened and the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call succeeds, although the data may be only partially written if there isn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t room in the buffer for the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>bytes that were requested.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Both these statements assume that there are both input and output buffers; in practice, almost every device driver has them. The input buffer is required to avoid losing data that arrives when nobody is reading. In contrast, data can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t be lost on </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, because if the system call doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t accept data bytes, they remain in the user-space buffer. Even so, the output buffer is almost always useful for squeezing more performance out of the hardware.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The performance gain of implementing an output buffer in the driver results from the reduced number of context switches and user-level/kernel-level transitions. Without an output buffer (assuming a slow device), only one or a few characters are accepted by each system call, and while one process sleeps in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, another process runs (that</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s one context switch). When the first process is awakened, it resumes (another context switch), </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns (kernel/user transition), and the process reiterates the system call to write more data (user/kernel transition); the call blocks and the loop continues. The addition of an output buffer allows the driver to accept larger chunks of data with each </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call, with a corresponding increase in performance. If that buffer is big enough, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call succeeds on the first attempt</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the buffered data will be pushed out to the device later</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>without control needing to go back to user space for a second or third </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call. The choice of a suitable size for the output buffer is clearly device-specific.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We don</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t use an input buffer in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, because data is already available when </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is issued. Similarly, no output buffer is used, because data is simply copied to the memory area associated with the device. Essentially, the device </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>is </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>a buffer, so the implementation of additional buffers would be superfluous. We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll see the use of buffers in Chapter 10.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The behavior of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is different if </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is specified. In this case, the calls simply return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EAGAIN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>try it again</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) if a process calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>when no data is available or if it calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>when there</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s no space in the buffer.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>As you might expect, nonblocking operations return immediately, allowing the application to poll for data. Applications must be careful when using the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>stdio </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>functions while dealing with nonblocking files, because they can easily mistake a nonblocking return for </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>EOF</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. They always have to check </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>errno</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Naturally, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is meaningful in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method also. This happens when the call can actually block for a long time; for example, when opening (for read access) a FIFO that has no writers (yet), or accessing a disk file with a pending lock. Usually, opening a device either succeeds or fails, without the need to wait for external events. Sometimes, however, opening the device requires a long initialization, and you may choose to support </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in your </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method by returning immediately with </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EAGAIN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>if the flag is set, after starting the device initialization process. The driver may also implement a blocking </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to support access policies in a way similar to file locks. We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll see one such implementation in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Blocking open as an Alternative to EBUSY</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> later in this chapter.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Some drivers may also implement special semantics for </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>; for example, an open of a tape device usually blocks until a tape has been inserted. If the tape drive is opened with </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the open succeeds immediately regardless of whether the media is present or not.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Only the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>file operations are affected by the nonblocking flag.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>A Blocking I/O Example</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Finally, we get to an example of a real driver method that implements blocking I/O. This example is taken from the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver; it is a special form of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>that implements a pipe-like device.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Within a driver, a process blocked in a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call is awakened when data arrives; usually the hardware issues an interrupt to signal such an event, and the driver awakens waiting processes as part of handling the interrupt. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver works differently, so that it can be run without requiring any particular hardware or an interrupt handler. We chose to use another process to generate the data and wake the reading process; similarly, reading processes are used to wake writer processes that are waiting for buffer space to become available.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The device driver uses a device structure that contains two wait queues and a buffer. The size of the buffer is configurable in the usual ways (at compile time, load time, or runtime).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct scull_pipe {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>wait_queue_head_t inq, outq; /* read and write queues */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>char *buffer, *end; /* begin of buf, end of buf */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int buffersize; /* used in pointer arithmetic */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>char *rp, *wp; /* where to read, where to write */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int nreaders, nwriters; /* number of openings for r/w */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct fasync_struct *async_queue; /* asynchronous readers */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct semaphore sem; /* mutual exclusion semaphore */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct cdev cdev; /* Char device structure */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation manages both blocking and nonblocking input and looks like this:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>static ssize_t scull_p_read (struct file *filp, char __user *buf, size_t count,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>loff_t *f_pos)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct scull_pipe *dev = filp-&gt;private_data;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (down_interruptible(&amp;dev-&gt;sem))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>while (dev-&gt;rp = = dev-&gt;wp) { /* nothing to read */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>up(&amp;dev-&gt;sem); /* release the lock */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (filp-&gt;f_flags &amp; O_NONBLOCK)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return -EAGAIN;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>PDEBUG("\"%s\" reading: going to sleep\n", current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (wait_event_interruptible(dev-&gt;inq, (dev-&gt;rp != dev-&gt;wp)))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS; /* signal: tell the fs layer to handle it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* otherwise loop, but first reacquire the lock */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (down_interruptible(&amp;dev-&gt;sem))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* ok, data is there, return something */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;wp &gt; dev-&gt;rp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count = min(count, (size_t)(dev-&gt;wp - dev-&gt;rp));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>else /* the write pointer has wrapped, return data up to dev-&gt;end */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count = min(count, (size_t)(dev-&gt;end - dev-&gt;rp));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (copy_to_user(buf, dev-&gt;rp, count)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up (&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EFAULT;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;rp += count;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;rp = = dev-&gt;end)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;rp = dev-&gt;buffer; /* wrapped */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up (&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* finally, awake any writers and return */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible(&amp;dev-&gt;outq);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG("\"%s\" did read %li bytes\n",current-&gt;comm, (long)count);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return count;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>As you can see, we left some </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>statements in the code. When you compile the driver, you can enable messaging to make it easier to follow the interaction of different processes.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Let us look carefully at how </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_p_read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>handles waiting for data. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>loop tests the buffer with the device semaphore held. If there is data there, we know we can return it to the user immediately without sleeping, so the entire body of the loop is skipped. If, instead, the buffer is empty, we must sleep. Before we can do that, however, we must drop the device semaphore; if we were to sleep holding it, no writer would ever have the opportunity to wake us up. Once the semaphore has been dropped, we make a quick check to see if the user has requested non-blocking I/O, and return if so. Otherwise, it is time to call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Once we get past that call, something has woken us up, but we do not know what. One possibility is that the process received a signal. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>statement that contains the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call checks for this case. This statement ensures the proper and expected reaction to signals, which could have been responsible for waking up the process (since we were in an interruptible sleep). If a signal has arrived and it has not been blocked by the process, the proper behavior is to let upper layers of the kernel handle the event. To this end, the driver returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ERESTARTSYS </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to the caller; this value is used internally by the virtual filesystem (VFS) layer, which either restarts the system call or returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EINTR </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to user space. We use the same type of check to deal with signal handling for every </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>However, even in the absence of a signal, we do not yet know for sure that there is data there for the taking. Somebody else could have been waiting for data as well, and they might win the race and get the data first. So we must acquire the device semaphore again; only then can we test the read buffer again (in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>loop) and truly know that we can return the data in the buffer to the user. The end result of all this code is that, when we exit from the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>loop, we know that the semaphore is held and the buffer contains data that we can use.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Just for completeness, let us note that </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_p_read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>can sleep in another spot after we take the device semaphore: the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>copy_to_user</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. If </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sleeps while copying data between kernel and user space, it sleeps with the device semaphore held. Holding the semaphore in this case is justified since it does not deadlock the system (we know that the kernel will perform the copy to user space and wakes us up without trying to lock the same semaphore in the process), and since it is important that the device memory array not change while the driver sleeps.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Advanced Sleeping</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Many drivers are able to meet their sleeping requirements with the functions we have covered so far. There are situations, however, that call for a deeper understanding of how the Linux wait queue mechanism works. Complex locking or performance requirements can force a driver to use lower-level functions to effect a sleep. In this section, we look at the lower level to get an understanding of what is really going on when a process sleeps.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>How a process sleeps</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If you look inside </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/wait.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you see that the data structure behind the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_head_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>type is quite simple; it consists of a spinlock and a linked list. What goes on to that list is a wait queue entry, which is declared with the type </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. This structure contains information about the sleeping process and exactly how it would like to be woken up.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The first step in putting a process to sleep is usually the allocation and initialization of a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure, followed by its addition to the proper wait queue. When everything is in place, whoever is charged with doing the wakeup will be able to find the right processes.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The next step is to set the state of the process to mark it as being asleep. There are several task states defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/sched.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_RUNNING </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>means that the process is able to run, although it is not necessarily executing in the processor at any specific moment. There are two states that indicate that a process is asleep: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_INTERRUPTIBLE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_UNINTERRUPTIBLE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>; they correspond, of course, to the two types of sleep. The other states are not normally of concern to driver writers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In the 2.6 kernel, it is not normally necessary for driver code to manipulate the process state directly. However, should you need to do so, the call to use is:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void set_current_state(int new_state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In older code, you often see something like this instead:</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>current-&gt;state = TASK_INTERRUPTIBLE;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>But changing </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>current </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>directly in that manner is discouraged; such code breaks easily when data structures change. The above code does show, however, that changing the current state of a process does not, by itself, put it to sleep. By changing the current state, you have changed the way the scheduler treats a process, but you have not yet yielded the processor.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Giving up the processor is the final step, but there is one thing to do first: you must check the condition you are sleeping for first. Failure to do this check invites a race condition; what happens if the condition came true while you were engaged in the above process, and some other thread has just tried to wake you up? You could miss the wakeup altogether and sleep longer than you had intended. Consequently, down inside code that sleeps, you typically see something such as:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!condition)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule( );</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>By checking our condition </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>after </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>setting the process state, we are covered against all possible sequences of events. If the condition we are waiting for had come about before setting the process state, we notice in this check and not actually sleep. If the wakeup happens thereafter, the process is made runnable whether or not we have actually gone to sleep yet.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is, of course, the way to invoke the scheduler and yield the CPU. Whenever you call this function, you are telling the kernel to consider which process should be running and to switch control to that process if necessary. So you never know how long it will be before </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns to your code.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>After the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>test and possible call to (and return from) </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, there is some cleanup to be done. Since the code no longer intends to sleep, it must ensure that the task state is reset to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_RUNNING</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. If the code just returned from </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, this step is unnecessary; that function does not return until the process is in a runnable state. But if the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>was skipped because it was no longer necessary to sleep, the process state will be incorrect. It is also necessary to remove the process from the wait queue, or it may be awakened more than once.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Manual sleeps</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In previous versions of the Linux kernel, nontrivial sleeps required the programmer to handle all of the above steps manually. It was a tedious process involving a fair amount of error-prone boilerplate code. Programmers can still code a manual sleep in that manner if they want to; </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/sched.h&gt; </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>contains all the requisite definitions, and the kernel source abounds with examples. There is an easier way, however. The first step is the creation and initialization of a wait queue entry. That is usually done with this macro:</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DEFINE_WAIT(my_wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in which </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>name </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is the name of the wait queue entry variable. You can also do things in two steps:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t my_wait;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>init_wait(&amp;my_wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>But it is usually easier to put a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DEFINE_WAIT </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>line at the top of the loop that implements your sleep.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The next step is to add your wait queue entry to the queue, and set the process state. Both of those tasks are handled by this function:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void prepare_to_wait(wait_queue_head_t *queue,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t *wait,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Here, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>queue </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>are the wait queue head and the process entry, respectively. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>state </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is the new state for the process; it should be either </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_INTERRUPTIBLE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for interruptible sleeps, which is usually what you want) or </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_UNINTERRUPTIBLE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(for uninterruptible sleeps).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>After calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the process can call </SPAN><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>schedule</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;">&#8212;</SPAN></FONT><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>after it has checked to be sure it still needs to wait. Once </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns, it is cleanup time. That task, too, is handled by a special function:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void finish_wait(wait_queue_head_t *queue, wait_queue_t *wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Thereafter, your code can test its state and see if it needs to wait again.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We are far past due for an example. Previously we looked at the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which uses </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method in the same driver does its waiting with </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>finish_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, instead. Normally you would not mix methods within a single driver in this way, but we did so in order to be able to show both ways of handling sleeps.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>First, for completeness, let</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s look at the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method itself:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* How much space is free? */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int spacefree(struct scull_pipe *dev)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;rp = = dev-&gt;wp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return dev-&gt;buffersize - 1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return ((dev-&gt;rp + dev-&gt;buffersize - dev-&gt;wp) % dev-&gt;buffersize) - 1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static ssize_t scull_p_write(struct file *filp, const char __user *buf, size_t count,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>loff_t *f_pos)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_pipe *dev = filp-&gt;private_data;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int result;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (down_interruptible(&amp;dev-&gt;sem))</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* Make sure there's space to write */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>result = scull_getwritespace(dev, filp);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (result)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return result; /* scull_getwritespace called up(&amp;dev-&gt;sem) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* ok, space is there, accept something */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count = min(count, (size_t)spacefree(dev));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;wp &gt;= dev-&gt;rp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count = min(count, (size_t)(dev-&gt;end - dev-&gt;wp)); /* to end-of-buf */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>else /* the write pointer has wrapped, fill up to rp-1 */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>count = min(count, (size_t)(dev-&gt;rp - dev-&gt;wp - 1));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG("Going to accept %li bytes to %p from %p\n", (long)count, dev-&gt;wp, buf);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (copy_from_user(dev-&gt;wp, buf, count)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up (&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EFAULT;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;wp += count;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;wp = = dev-&gt;end)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;wp = dev-&gt;buffer; /* wrapped */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up(&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* finally, awake any reader */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible(&amp;dev-&gt;inq); /* blocked in read( ) and select( ) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* and signal asynchronous readers, explained late in chapter 5 */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;async_queue)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kill_fasync(&amp;dev-&gt;async_queue, SIGIO, POLL_IN);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG("\"%s\" did write %li bytes\n",current-&gt;comm, (long)count);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return count;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This code looks similar to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, except that we have pushed the code that sleeps into a separate function called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_getwritespace</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. Its job is to ensure that there is space in the buffer for new data, sleeping if need be until that space comes available. Once the space is there, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_p_write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>can simply copy the user</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s data there, adjust the pointers, and wake up any processes that may have been waiting to read data.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The code that handles the actual sleep is:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* Wait for space for writing; caller must hold device semaphore. On</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* error the semaphore will be released before returning. */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_getwritespace(struct scull_pipe *dev, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while (spacefree(dev) = = 0) { /* full */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DEFINE_WAIT(wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up(&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (filp-&gt;f_flags &amp; O_NONBLOCK)</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EAGAIN;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG("\"%s\" writing: going to sleep\n",current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait(&amp;dev-&gt;outq, &amp;wait, TASK_INTERRUPTIBLE);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (spacefree(dev) = = 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule( );</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>finish_wait(&amp;dev-&gt;outq, &amp;wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (signal_pending(current))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS; /* signal: tell the fs layer to handle it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (down_interruptible(&amp;dev-&gt;sem))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Note once again the containing </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>loop. If space is available without sleeping, this function simply returns. Otherwise, it must drop the device semaphore and wait. The code uses </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DEFINE_WAIT </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to set up a wait queue entry and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to get ready for the actual sleep. Then comes the obligatory check on the buffer; we must handle the case in which space becomes available in the buffer after we have entered the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>loop (and dropped the semaphore) but before we put ourselves onto the wait queue. Without that check, if the reader processes were able to completely empty the buffer in that time, we could miss the only wakeup we would ever get and sleep forever. Having satisfied ourselves that we must sleep, we can call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>It is worth looking again at this case: what happens if the wakeup happens between the test in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>statement and the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>? In that case, all is well. The wakeup resets the process state to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_RUNNING </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>schedule </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>although not necessarily right away. As long as the test happens after the process has put itself on the wait queue and changed its state, things will work.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>To finish up, we call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>finish_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>signal_pending </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>tells us whether we were awakened by a signal; if so, we need to return to the user and let them try again later. Otherwise, we reacquire the semaphore, and test again for free space as usual.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Exclusive waits</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We have seen that when a process calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>on a wait queue, all processes waiting on that queue are made runnable. In many cases, that is the correct behavior. In others, however, it is possible to know ahead of time that only one of the processes being awakened will succeed in obtaining the desired resource, and the rest will simply have to sleep again. Each one of those processes, however, has to obtain the processor, contend for the resource (and any governing locks), and explicitly go back to sleep. If the number of processes in the wait queue is large, this </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>thundering herd</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka"> <SPAN lang=EN-US>behavior can seriously degrade the performance of the system.</SPAN></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In response to real-world thundering herd problems, the kernel developers added an </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>exclusive wait</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> option to the kernel. An exclusive wait acts very much like a normal sleep, with two important differences:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> When a wait queue entry has the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>WQ_FLAG_EXCLUSIVE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag set, it is added to the end of the wait queue. Entries without that flag are, instead, added to the beginning.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> When </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is called on a wait queue, it stops after waking the first process that has the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>WQ_FLAG_EXCLUSIVE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag set.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The end result is that processes performing exclusive waits are awakened one at a time, in an orderly manner, and do not create thundering herds. The kernel still wakes up all nonexclusive waiters every time, however.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Employing exclusive waits within a driver is worth considering if two conditions are met: you expect significant contention for a resource, and waking a single process is sufficient to completely consume the resource when it becomes available. Exclusive waits work well for the Apache web server, for example; when a new connection comes in, exactly one of the (often many) Apache processes on the system should wake up to deal with it. We did not use exclusive waits in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver, however; it is rare to see readers contending for data (or writers for buffer space), and we cannot know that one reader, once awakened, will consume all of the available data. Putting a process into an interruptible wait is a simple matter of calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait_exclusive</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void prepare_to_wait_exclusive(wait_queue_head_t *queue,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t *wait,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This call, when used in place of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>prepare_to_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, sets the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>exclusive</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> flag in the wait queue entry and adds the process to the end of the wait queue. Note that there is no way to perform exclusive waits with </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_event </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and its variants.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The details of waking up</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The view we have presented of the wakeup process is simpler than what really happens inside the kernel. The actual behavior that results when a process is awakened is controlled by a function in the wait queue entry. The default wakeup function</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>* It has the imaginative name </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>default_wake_function</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sets the process into a runnable state and, possibly, performs a context switch to that process if it has a higher priority. Device drivers should never need to supply a different wake function; should yours prove to be the exception, see </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/wait.h&gt; </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>for information on how to do it.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We have not yet seen all the variations of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. Most driver writers never need the others, but, for completeness, here is the full set:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>awakens every process on the queue that is not in an exclusive wait, and exactly one exclusive waiter, if it exists. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>does the same, with the exception that it skips over processes in an uninterruptible sleep. These functions can, before returning, cause one or more of the processes awakened to be scheduled (although this does not happen if they are called from an atomic context).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_nr(wait_queue_head_t *queue, int nr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible_nr(wait_queue_head_t *queue, int nr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>These functions perform similarly to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, except they can awaken up to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>nr </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>exclusive waiters, instead of just one. Note that passing 0 is interpreted as asking for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>all </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>of the exclusive waiters to be awakened, rather than none of them.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_all(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible_all(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This form of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>awakens all processes whether they are performing an exclusive wait or not (though the interruptible form still skips processes doing uninterruptible waits).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible_sync(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Normally, a process that is awakened may preempt the current process and be scheduled into the processor before </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns. In other words, a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>may not be atomic. If the process calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is running in an atomic context (it holds a spinlock, for example, or is an interrupt handler), this rescheduling does not happen. Normally, that protection is adequate. If, however, you need to explicitly ask to not be scheduled out of the processor at this time, you can use the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sync</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> variant of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. This function is most often used when the caller is about to reschedule anyway, and it is more efficient to simply finish what little work remains first.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If all of the above is not entirely clear on a first reading, don</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t worry. Very few drivers ever need to call anything except </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Ancient history: sleep_on</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If you spend any time digging through the kernel source, you will likely encounter two functions that we have neglected to discuss so far:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void sleep_on(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void interruptible_sleep_on(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>As you might expect, these functions unconditionally put the current process to sleep on the given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>queue</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. These functions are strongly deprecated, however, and you should never use them. The problem is obvious if you think about it: </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleep_on </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>offers no way to protect against race conditions. There is always a window between when your code decides it must sleep and when </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleep_on </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>actually effects that sleep. A wakeup that arrives during that window is missed. For this reason, code that calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleep_on </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is never entirely safe.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Current plans call for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleep_on </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and its variants (there are a couple of time-out forms we haven</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t shown) to be removed from the kernel in the not-too-distant future.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Testing the Scullpipe Driver</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We have seen how the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver implements blocking I/O. If you wish to try it out, the source to this driver can be found with the rest of the book examples. Blocking I/O in action can be seen by opening two windows. The first can run a command such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cat /dev/scullpipe</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. If you then, in another window, copy a file to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev/scullpipe</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you should see that file</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s contents appear in the first window.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Testing nonblocking activity is trickier, because the conventional programs available to a shell don</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t perform nonblocking operations. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>misc-progs </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>source directory contains the following simple program, called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>nbtest</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, for testing nonblocking operations. All it does is copy its input to its output, using nonblocking I/O and delaying between retries. The delay time is passed on the command line and is one second by default.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int main(int argc, char **argv)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int delay = 1, n, m = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (argc &gt; 1)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>delay=atoi(argv[1]);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl(0, F_SETFL, fcntl(0,F_GETFL) | O_NONBLOCK); /* stdin */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl(1, F_SETFL, fcntl(1,F_GETFL) | O_NONBLOCK); /* stdout */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while (1) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>n = read(0, buffer, 4096);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (n &gt;= 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>m = write(1, buffer, n);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if ((n &lt; 0 || m &lt; 0) &amp;&amp; (errno != EAGAIN))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sleep(delay);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>perror(n &lt; 0 ? "stdin" : "stdout");</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>exit(1);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If you run this program under a process tracing utility such as </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>strace</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you can see the success or failure of each operation, depending on whether data is available when the operation is tried.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>poll and select</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Applications that use nonblocking I/O often use the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system calls as well. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>have essentially the same functionality: each allow a process to determine whether it can read from or write to one or more open files without blocking. These calls can also block a process until any of a given set of file descriptors becomes available for reading or writing. Therefore, they are often used in applications that must use multiple input or output streams without getting stuck on any one of them. The same functionality is offered by multiple functions, because two were implemented in Unix almost at the same time by two different groups: </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>was introduced in BSD Unix, whereas </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>was the System V solution. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>* Actually, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a set of three calls that together can be used to achieve the polling functionality. For our purposes, though, we can think of it as a single call.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>was added in 2.5.45 as a way of making the polling function scale to thousands of file descriptors.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Support for any of these calls requires support from the device driver. This support (for all three calls) is provided through the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method. This method has the following prototype:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int (*poll) (struct file *filp, poll_table *wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The driver method is called whenever the user-space program performs a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call involving a file descriptor associated with the driver. The device method is in charge of these two steps:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>1. Call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll_wait </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>on one or more wait queues that could indicate a change in the poll status. If no file descriptors are currently available for I/O, the kernel causes the process to wait on the wait queues for all file descriptors passed to the system call.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>2. Return a bit mask describing the operations (if any) that could be immediately performed without blocking.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Both of these operations are usually straightforward and tend to look very similar from one driver to the next. They rely, however, on information that only the driver can provide and, therefore, must be implemented individually by each driver.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure, the second argument to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, is used within the kernel to implement the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>calls; it is declared in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&lt;linux/poll.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which must be included by the driver source. Driver writers do not need to know anything about its internals and must use it as an opaque object; it is passed to the driver method so that the driver can load it with every wait queue that could wake up the process and change the status of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>operation. The driver adds a wait queue to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure by calling the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void poll_wait (struct file *, wait_queue_head_t *, poll_table *);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The second task performed by the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method is returning the bit mask describing which operations could be completed immediately; this is also straightforward. For example, if the device has data available, a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>would complete without sleeping; the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method should indicate this state of affairs. Several flags (defined via </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/poll.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) are used to indicate the possible operations:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLIN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This bit must be set if the device can be read without blocking.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLRDNORM</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This bit must be set if </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>normal</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> data is available for reading. A readable device returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>(POLLIN | POLLRDNORM)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLRDBAND</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This bit indicates that out-of-band data is available for reading from the device. It is currently used only in one place in the Linux kernel (the DECnet code) and is not generally applicable to device drivers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLPRI</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>High-priority data (out-of-band) can be read without blocking. This bit causes </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to report that an exception condition occurred on the file, because </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>reports out-of-band data as an exception condition.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLHUP</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When a process reading this device sees end-of-file, the driver must set </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLHUP </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(hang-up). A process calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is told that the device is readable, as dictated by the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>functionality.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLERR</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>An error condition has occurred on the device. When </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is invoked, the device is reported as both readable and writable, since both </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>return an error code without blocking.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLOUT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This bit is set in the return value if the device can be written to without blocking.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLWRNORM</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This bit has the same meaning as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLOUT</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and sometimes it actually is the same number. A writable device returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>(POLLOUT | POLLWRNORM)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLWRBAND</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Like </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLRDBAND</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, this bit means that data with nonzero priority can be written to the device. Only the datagram implementation of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>uses this bit, since a datagram can transmit out-of-band data.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>It</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s worth repeating that </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLRDBAND </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLWRBAND </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>are meaningful only with file descriptors associated with sockets: device drivers won</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t normally use these flags. The description of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>takes up a lot of space for something that is relatively simple to use in practice. Consider the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static unsigned int scull_p_poll(struct file *filp, poll_table *wait)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_pipe *dev = filp-&gt;private_data;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int mask = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/*</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* The buffer is circular; it is considered full</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* if "wp" is right behind "rp" and empty if the</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* two are equal.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>*/</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>down(&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_wait(filp, &amp;dev-&gt;inq, wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_wait(filp, &amp;dev-&gt;outq, wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;rp != dev-&gt;wp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mask |= POLLIN | POLLRDNORM; /* readable */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (spacefree(dev))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mask |= POLLOUT | POLLWRNORM; /* writable */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>up(&amp;dev-&gt;sem);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return mask;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This code simply adds the two </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>wait queues to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, then sets the appropriate mask bits depending on whether data can be read or written.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>code as shown is missing end-of-file support, because </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>does not support an end-of-file condition. For most real devices, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method should return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLLHUP </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>if no more data is (or will become) available. If the caller used the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call, the file is reported as readable. Regardless of whether </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is used, the application knows that it can call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>without waiting forever, and the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method returns, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to signal end-of-file.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>With real FIFOs, for example, the reader sees an end-of-file when all the writers close the file, whereas in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the reader never sees end-of-file. The behavior is different because a FIFO is intended to be a communication channel between two processes, while </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a trash can where everyone can put data as long as there</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s at least one reader. Moreover, it makes no sense to reimplement what is already available in the kernel, so we chose to implement a different behavior in our example.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Implementing end-of-file in the same way as FIFOs do would mean checking </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt; nwriters</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, both in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and reporting end-of-file (as just described) if no process has the device opened for writing. Unfortunately, though, with this implementation, if a reader opened the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device before the writer, it would see endof- file without having a chance to wait for data. The best way to fix this problem would be to implement blocking within </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>like real FIFOs do; this task is left as an exercise for the reader.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Interaction with read and write</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The purpose of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>calls is to determine in advance if an I/O operation will block. In that respect, they complement </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. More important, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>are useful, because they let the application wait simultaneously for several data streams, although we are not exploiting this feature in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>examples. </SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>A correct implementation of the three calls is essential to make applications work correctly: although the following rules have more or less already been stated, we summarize them here.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Reading data from the device</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If there is data in the input buffer, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call should return immediately, with no noticeable delay, even if less data is available than the application requested, and the driver is sure the remaining data will arrive soon. You can always return less data than you</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>re asked for if this is convenient for any reason (we did it in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), provided you return at least one byte. In this case, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>POLLIN|POLLRDNORM</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If there is no data in the input buffer, by default </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>must block until at least one byte is there. If </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is set, on the other hand, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns immediately with a return value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>-EAGAIN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(although some old versions of System V return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in this case). In these cases, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>must report that the device is unreadable until at least one byte arrives. As soon as there is some data in the buffer, we fall back to the previous case.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If we are at end-of-file, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should return immediately with a return value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>0</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, independent of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>O_NONBLOCK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should report </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>POLLHUP </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in this case.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Writing to the device</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If there is space in the output buffer, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should return without delay. It can accept less data than the call requested, but it must accept at least one byte. In this case, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>reports that the device is writable by returning </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>POLLOUT|POLLWRNORM</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> If the output buffer is full, by default </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>blocks until some space is freed. If </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is set, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns immediately with a return value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>-EAGAIN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(older System V Unices returned </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>0</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>). In these cases, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should report that the file is not writable. If, on the other hand, the device is not able to accept any more data, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>-ENOSPC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>No space left on device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), independently of the setting of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>O_NONBLOCK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> Never make a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call wait for data transmission before returning, even if </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is clear. This is because many applications use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to find out whether a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>will block. If the device is reported as writable, the call must not block. If the program using the device wants to ensure that the data it enqueues in the output buffer is actually transmitted, the driver must provide an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method. For instance, a removable device should have an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>entry point.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Although this is a good set of general rules, one should also recognize that each device is unique and that sometimes the rules must be bent slightly. For example, record-oriented devices (such as tape drives) cannot execute partial writes.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Flushing pending output</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ve seen how the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method by itself doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t account for all data output needs. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>function, invoked by the system call of the same name, fills the gap. This method</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s prototype is</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*fsync) (struct file *file, struct dentry *dentry, int datasync);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If some application ever needs to be assured that data has been sent to the device, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method must be implemented regardless of whether </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is set. A call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should return only when the device has been completely flushed (i.e., the output buffer is empty), even if that takes some time. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>datasync </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument is used to distinguish between the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fdatasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system calls; as such, it is only of interest to filesystem code and can be ignored by drivers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fsync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method has no unusual features. The call isn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t time critical, so every device driver can implement it to the author</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s taste. Most of the time, char drivers just have a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>NULL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pointer in their </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fops</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. Block devices, on the other hand, always implement the method with the general-purpose </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>block_fsync</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which, in turn, flushes all the blocks of the device, waiting for I/O to complete.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The Underlying Data Structure</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The actual implementation of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system calls is reasonably simple, for those who are interested in how it works; </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a bit more complex but is built on the same mechanism. Whenever a user application calls </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>epoll_ctl</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>,</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> * This is the function that sets up the internal data structure for future calls to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>epoll_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the kernel invokes the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method of all files referenced by the system call, passing the same </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to each of them. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure is just a wrapper around a function that builds the actual data structure. That structure, for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, is a linked list of memory pages containing </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table_entry </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structures. Each </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table_entry </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>holds the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct file </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_head_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pointers passed to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_wait</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, along with an associated wait queue entry. The call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_wait </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sometimes also adds the process to the given wait queue. The whole structure must be maintained by the kernel so that the process can be removed from all of those queues before </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If none of the drivers being polled indicates that I/O can occur without blocking, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call simply sleeps until one of the (perhaps many) wait queues it is on wakes it up.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>What</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s interesting in the implementation of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is that the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method may be called with a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>NULL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pointer as a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument. This situation can come about for a couple of reasons. If the application calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>has provided a timeout value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0 </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(indicating that no wait should be done), there is no reason to accumulate wait queues, and the system simply does not do it. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pointer is also set to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>NULL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>immediately after any driver being </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ed indicates that I/O is possible. Since the kernel knows at that point that no wait will occur, it does not build up a list of wait queues.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call completes, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure is deallocated, and all wait queue entries previously added to the poll table (if any) are removed from the table and their wait queues.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We tried to show the data structures involved in polling in Figure 6-1; the figure is a simplified representation of the real data structures, because it ignores the multipage nature of a poll table and disregards the file pointer that is part of each </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll_table_entry</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The reader interested in the actual implementation is urged to look in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/poll.h&gt; </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fs/select.c</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes" lang=EN-US><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape style="WIDTH: 473.25pt; HEIGHT: 405pt; VISIBILITY: visible; mso-wrap-style: square" id=&#22270;&#29255;_x0020_1 o:spid="_x0000_i1025" type="#_x0000_t75"><v:imagedata src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN><SPAN style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Figure 6-1. The data structures behind poll</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>At this point, it is possible to understand the motivation behind the new </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call. In a typical case, a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>involves only a handful of file descriptors, so the cost of setting up the data structure is small. There are applications out there, however, that work with thousands of file descriptors. At that point, setting up and tearing down this data structure between every I/O operation becomes prohibitively expensive. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>epoll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call family allows this sort of application to set up the internal kernel data structure exactly once and to use it many times.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Asynchronous Notification</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Although the combination of blocking and nonblocking operations and the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method are sufficient for querying the device most of the time, some situations aren</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t efficiently managed by the techniques we</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ve seen so far.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Let</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s imagine a process that executes a long computational loop at low priority but needs to process incoming data as soon as possible. If this process is responding to new observations available from some sort of data acquisition peripheral, it would like to know immediately when new data is available. This application could be written to call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>regularly to check for data, but, for many situations, there is a better way. By enabling asynchronous notification, this application can receive a signal whenever data becomes available and need not concern itself with polling.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>User programs have to execute two steps to enable asynchronous notification from an input file. First, they specify a process as the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>owner</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> of the file. When a process invokes the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>F_SETOWN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command using the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call, the process ID of the owner process is saved in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_owner </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>for later use. This step is necessary for the kernel to know just whom to notify. In order to actually enable asynchronous notification, the user programs must set the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FASYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag in the device by means of the </SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>F_SETFL </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>fcntl </SPAN></I></FONT><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>After these two calls have been executed, the input file can request delivery of a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>SIGIO </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>signal whenever new data arrives. The signal is sent to the process (or process group, if the value is negative) stored in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_owner</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>For example, the following lines of code in a user program enable asynchronous notification to the current process for the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>stdin </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>input file:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>signal(SIGIO, &amp;input_handler); /* dummy sample; sigaction( ) is better */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl(STDIN_FILENO, F_SETOWN, getpid( ));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>oflags = fcntl(STDIN_FILENO, F_GETFL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fcntl(STDIN_FILENO, F_SETFL, oflags | FASYNC);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The program named </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>asynctest </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in the sources is a simple program that reads </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>stdin </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>as shown. It can be used to test the asynchronous capabilities of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The program is similar to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cat </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>but doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t terminate on end-of-file; it responds only to input, not to the absence of input.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Note, however, that not all the devices support asynchronous notification, and you can choose not to offer it. Applications usually assume that the asynchronous capability is available only for sockets and ttys.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>There is one remaining problem with input notification. When a process receives a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>SIGIO</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, it doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t know which input file has new input to offer. If more than one file is enabled to asynchronously notify the process of pending input, the application must still resort to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>select </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to find out what happened.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The Driver&#8217;s Point of View</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>A more relevant topic for us is how the device driver can implement asynchronous signaling. The following list details the sequence of operations from the kernel</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s point of view:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>1. When </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>F_SETOWN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is invoked, nothing happens, except that a value is assigned to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_owner</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>2. When </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>F_SETFL </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is executed to turn on </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FASYNC</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method is called. This method is called whenever the value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FASYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is changed in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_flags </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to notify the driver of the change, so it can respond properly. The flag is cleared by default when the file is opened. We</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll look at the standard implementation of the driver method later in this section.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>3. When data arrives, all the processes registered for asynchronous notification must be sent a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>SIGIO </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>signal.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>While implementing the first step is trivial</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>there</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s nothing to do on the driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s part</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the other steps involve maintaining a dynamic data structure to keep track of the different asynchronous readers; there might be several. This dynamic data structure, however, doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t depend on the particular device involved, and the kernel offers a suitable general-purpose implementation so that you don</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t have to rewrite the same code in every driver.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The general implementation offered by Linux is based on one data structure and two functions (which are called in the second and third steps described earlier). The header that declares related material is </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/fs.h&gt; </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(nothing new here), and the data structure is called </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct fasync_struct</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. As with wait queues, we need to insert a pointer to the structure in the device-specific data structure.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The two functions that the driver calls correspond to the following prototypes:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int fasync_helper(int fd, struct file *filp,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int mode, struct fasync_struct **fa);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void kill_fasync(struct fasync_struct **fa, int sig, int band);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync_helper </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is invoked to add or remove entries from the list of interested processes when the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FASYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>flag changes for an open file. All of its arguments except the last are provided to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method and can be passed through directly. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kill_fasync </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is used to signal the interested processes when data arrives. Its arguments are the signal to send (usually </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>SIGIO</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) and the band, which is almost always </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLL_IN</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>*(</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>* </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 7.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT size=3 face=Calibri>POLL_IN </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a symbol used in the asynchronous notification code; it is equivalent to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 7.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT size=3 face=Calibri>POLLIN|POLLRDNORM</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 12.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(but that may be used to send </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>urgent</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> or out-of-band data in the networking code).</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 13pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Here</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s how </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implements the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_p_fasync(int fd, struct file *filp, int mode)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_pipe *dev = filp-&gt;private_data;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return fasync_helper(fd, filp, mode, &amp;dev-&gt;async_queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>It</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s clear that all the work is performed by </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync_helper</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. It wouldn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t be possible, however, to implement the functionality without a method in the driver, because the helper function needs to access the correct pointer to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct fasync_struct * </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>(here </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&amp;dev-&gt;async_queue</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>), and only the driver can provide the information.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When data arrives, then, the following statement must be executed to signal asynchronous readers. Since new data for the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>reader is generated by a process issuing a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the statement appears in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (dev-&gt;async_queue)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kill_fasync(&amp;dev-&gt;async_queue, SIGIO, POLL_IN);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Note that some devices also implement asynchronous notification to indicate when the device can be written; in this case, of course, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kill_fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>must be called with a mode of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>POLL_OUT</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>It might appear that we</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>re done, but there</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s still one thing missing. We must invoke our </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method when the file is closed to remove the file from the list of active asynchronous readers. Although this call is required only if </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;f_flags </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>has </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>FASYNC </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>set, calling the function anyway doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t hurt and is the usual implementation. The following lines, for example, are part of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpipe</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* remove this filp from the asynchronously notified filp's */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_p_fasync(-1, filp, 0);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The data structure underlying asynchronous notification is almost identical to the structure </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct wait_queue</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, because both situations involve waiting on an event. The difference is that </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct file </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is used in place of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct task_struct</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct file </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in the queue is then used to retrieve </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>f_owner</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, in order to signal the process.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Seeking a Device</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>One of the last things we need to cover in this chapter is the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, which is useful (for some devices) and easy to implement.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>The llseek Implementation</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method implements the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>lseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system calls. We have already stated that if the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method is missing from the device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s operations, the default implementation in the kernel performs seeks by modifying </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>filp-&gt;f_pos</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, the current reading/writing position within the file. Please note that for the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>lseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call to work correctly, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>methods must cooperate by using and updating the offset item they receive as an argument.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>You may need to provide your own </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method if the seek operation corresponds to a physical operation on the device. A simple example can be seen in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>loff_t scull_llseek(struct file *filp, loff_t off, int whence)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct scull_dev *dev = filp-&gt;private_data;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>loff_t newpos;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>switch(whence) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>case 0: /* SEEK_SET */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>newpos = off;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>case 1: /* SEEK_CUR */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>newpos = filp-&gt;f_pos + off;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>case 2: /* SEEK_END */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>newpos = dev-&gt;size + off;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>break;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>default: /* can't happen */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return -EINVAL;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (newpos &lt; 0) return -EINVAL;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>filp-&gt;f_pos = newpos;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>return newpos;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The only device-specific operation here is retrieving the file length from the device. In </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>read </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>write </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>methods cooperate as needed, as shown in Chapter 3.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Although the implementation just shown makes sense for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which handles a welldefined data area, most devices offer a data flow rather than a data area (just think about the serial ports or the keyboard), and seeking those devices does not make sense. If this is the case for your device, you can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t just refrain from declaring the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>operation, because the default method allows seeking. Instead, you should inform the kernel that your device does not support </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>by calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>nonseekable_open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in your </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method:</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int nonseekable_open(struct inode *inode; struct file *filp);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This call marks the given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>as being nonseekable; the kernel never allows an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>lseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call on such a file to succeed. By marking the file in this way, you can also be assured that no attempts will be made to seek the file by way of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>pread </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>pwrite </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system calls.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>For completeness, you should also set the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method in your </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>file_operations </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>structure to the special helper function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>no_llseek</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which is defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/fs.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Access Control on a Device File</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Offering access control is sometimes vital for the reliability of a device node. Not only should unauthorized users not be permitted to use the device (a restriction is enforced by the filesystem permission bits), but sometimes only one authorized user should be allowed to open the device at a time.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The problem is similar to that of using ttys. In that case, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>login </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>process changes the ownership of the device node whenever a user logs into the system, in order to prevent other users from interfering with or sniffing the tty data flow. However, it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s impractical to use a privileged program to change the ownership of a device every time it is opened just to grant unique access to it.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>None of the code shown up to now implements any access control beyond the filesystem permission bits. If the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>system call forwards the request to the driver, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>succeeds. We now introduce a few techniques for implementing some additional checks.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Every device shown in this section has the same behavior as the bare </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device (that is, it implements a persistent memory area) but differs from </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>in access control, which is implemented in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>operations.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Single-Open Devices</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The brute-force way to provide access control is to permit a device to be opened by only one process at a time (single openness). This technique is best avoided because it inhibits user ingenuity. A user might want to run different processes on the same device, one reading status information while the other is writing data. In some cases, users can get a lot done by running a few simple programs through a shell script, as long as they can access the device concurrently. In other words, implementing a singleopen behavior amounts to creating policy, which may get in the way of what your users want to do.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Allowing only a single process to open a device has undesirable properties, but it is also the easiest access control to implement for a device driver, so it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s shown here. The source code is extracted from a device called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullsingle</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullsingle </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device maintains an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>atomic_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>variable called </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_s_available</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>; that variable is initialized to a value of one, indicating that the device is indeed available. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call decrements and tests </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_s_available </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and refuses access if somebody else already has the device open:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static atomic_t scull_s_available = ATOMIC_INIT(1);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_s_open(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_dev *dev = &amp;scull_s_device; /* device information */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (! atomic_dec_and_test (&amp;scull_s_available)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>atomic_inc(&amp;scull_s_available);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EBUSY; /* already open */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* then, everything else is copied from the bare scull device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if ( (filp-&gt;f_flags &amp; O_ACCMODE) = = O_WRONLY)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_trim(dev);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>filp-&gt;private_data = dev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0; /* success */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call, on the other hand, marks the device as no longer busy:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_s_release(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>atomic_inc(&amp;scull_s_available); /* release the device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Normally, we recommend that you put the open flag </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_s_available </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>within the device structure (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Scull_Dev </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>here) because, conceptually, it belongs to the device. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>driver, however, uses standalone variables to hold the flag so it can use the same device structure and methods as the bare </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device and minimize code duplication.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Restricting Access to a Single User at a Time</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The next step beyond a single-open device is to let a single user open a device in multiple processes but allow only one user to have the device open at a time. This solution makes it easy to test the device, since the user can read and write from several processes at once, but assumes that the user takes some responsibility for maintaining the integrity of the data during multiple accesses. This is accomplished by adding checks in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method; such checks are performed </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>after </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>the normal permission checking and can only make access more restrictive than that specified by the owner and group permission bits. This is the same access policy as that used for ttys, but it doesn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t resort to an external privileged program.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Those access policies are a little trickier to implement than single-open policies. In this case, two items are needed: an open count and the uid of the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>owner</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> of the device. Once again, the best place for such items is within the device structure; our example uses global variables instead, for the reason explained earlier for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullsingle</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The name of the device is </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sculluid</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call grants access on first open but remembers the owner of the device. This means that a user can open the device multiple times, thus allowing cooperating processes to work concurrently on the device. At the same time, no other user can open it, thus avoiding external interference. Since this version of the function is almost identical to the preceding one, only the relevant part is reproduced here:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_u_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (scull_u_count &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>(scull_u_owner != current-&gt;uid) &amp;&amp; /* allow user */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>(scull_u_owner != current-&gt;euid) &amp;&amp; /* allow whoever did su */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>!capable(CAP_DAC_OVERRIDE)) { /* still allow root */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_u_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EBUSY; /* -EPERM would confuse the user */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (scull_u_count = = 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_owner = current-&gt;uid; /* grab it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_count++;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_u_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Note that the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sculluid </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>code has two variables (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_owner </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_count</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) that control access to the device and that could be accessed concurrently by multiple processes. To make these variables safe, we control access to them with a spinlock (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_lock</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>). Without that locking, two (or more) processes could test </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_count </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>at the same time, and both could conclude that they were entitled to take ownership of the device. A spinlock is indicated here, because the lock is held for a very short time, and the driver does nothing that could sleep while holding the lock.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>We chose to return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EBUSY </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and not </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EPERM</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, even though the code is performing a permission check, in order to point a user who is denied access in the right direction. The reaction to </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Permission denied</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> is usually to check the mode and owner of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>file, while </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Device busy</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> correctly suggests that the user should look for a process already using the device.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This code also checks to see if the process attempting the open has the ability to override file access permissions; if so, the open is allowed even if the opening process is not the owner of the device. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>CAP_DAC_OVERRIDE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>capability fits the task well in this case.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method looks like the following:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_u_release(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_u_lock);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_u_count--; /* nothing else */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_u_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Once again, we must obtain the lock prior to modifying the count to ensure that we do not race with another process.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Blocking open as an Alternative to EBUSY</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>When the device isn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t accessible, returning an error is usually the most sensible approach, but there are situations in which the user would prefer to wait for the device.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>For example, if a data communication channel is used both to transmit reports on a regular, scheduled basis (using </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>crontab</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) and for casual usage according to people</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s needs, it</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s much better for the scheduled operation to be slightly delayed rather than fail just because the channel is currently busy.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This is one of the choices that the programmer must make when designing a device driver, and the right answer depends on the particular problem being solved.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The alternative to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>EBUSY</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, as you may have guessed, is to implement blocking </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullwuid </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device is a version of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sculluid </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>that waits for the device on </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>instead of returning </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EBUSY</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. It differs from </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sculluid </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>only in the following part of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>operation:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>while (! scull_w_available( )) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (filp-&gt;f_flags &amp; O_NONBLOCK) return -EAGAIN;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (wait_event_interruptible (scull_w_wait, scull_w_available( )))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ERESTARTSYS; /* tell the fs layer to handle it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (scull_w_count = = 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_w_owner = current-&gt;uid; /* grab it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_w_count++;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The implementation is based once again on a wait queue. If the device is not currently available, the process attempting to open it is placed on the wait queue until the owning process closes the device.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method, then, is in charge of awakening any pending process:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_w_release(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int temp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_w_count--;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>temp = scull_w_count;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_w_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (temp = = 0)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible_sync(&amp;scull_w_wait); /* awake other uid's */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Here is an example of where calling </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wake_up_interruptible_sync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>makes sense. When we do the wakeup, we are just about to return to user space, which is a natural scheduling point for the system. Rather than potentially reschedule when we do the wakeup, it is better to just call the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>sync</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> version and finish our job.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The problem with a blocking-open implementation is that it is really unpleasant for the interactive user, who has to keep guessing what is going wrong. The interactive user usually invokes standard commands, such as </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>cp </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>tar</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, and can</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t just add </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>O_NONBLOCK </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>call. Someone who</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s making a backup using the tape drive in the next room would prefer to get a plain </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device or resource busy</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> message instead of being left to guess why the hard drive is so silent today, while </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>tar </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should be scanning it.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This kind of problem (a need for different, incompatible policies for the same device) is often best solved by implementing one device node for each access policy. An example of this practice can be found in the Linux tape driver, which provides multiple device files for the same device. Different device files will, for example, cause the drive to record with or without compression, or to automatically rewind the tape when the device is closed.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Cloning the Device on open</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Another technique to manage access control is to create different private copies of the device, depending on the process opening it.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Clearly, this is possible only if the device is not bound to a hardware object; </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is an example of such a </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>software</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> device. The internals of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev/tty </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>use a similar technique in order to give its process a different </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>view</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> of what the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>entry point represents. When copies of the device are created by the software driver, we call them </SPAN><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>virtual devices</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;">&#8212;</SPAN></FONT><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>just as virtual consoles use a single physical tty device.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Although this kind of access control is rarely needed, the implementation can be enlightening in showing how easily kernel code can change the application</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s perspective of the surrounding world (i.e., the computer).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev/scullpriv </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device node implements virtual devices within the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>package. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scullpriv </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation uses the device number of the process</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s controlling tty as a key to access the virtual device. Nonetheless, you can easily modify the sources to use any integer value for the key; each choice leads to a different policy. For example, using the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>uid </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>leads to a different virtual device for each user, while using a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>pid </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>key creates a new device for each process accessing it.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The decision to use the controlling terminal is meant to enable easy testing of the device using I/O redirection: the device is shared by all commands run on the same virtual terminal and is kept separate from the one seen by commands run on another terminal.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method looks like the following code. It must look for the right virtual device and possibly create one. The final part of the function is not shown because it is copied from the bare </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which we</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ve already seen.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* The clone-specific data structure includes a key field */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_listitem {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_dev device;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev_t key;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head list;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* The list of devices, and a lock to protect it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static LIST_HEAD(scull_c_list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static spinlock_t scull_c_lock = SPIN_LOCK_UNLOCKED;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* Look for a device or create one if missing */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static struct scull_dev *scull_c_lookfor_device(dev_t key)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_listitem *lptr;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_entry(lptr, &amp;scull_c_list, list) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (lptr-&gt;key = = key)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return &amp;(lptr-&gt;device);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* not found */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>lptr = kmalloc(sizeof(struct scull_listitem), GFP_KERNEL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!lptr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return NULL;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* initialize the device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>memset(lptr, 0, sizeof(struct scull_listitem));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>lptr-&gt;key = key;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_trim(&amp;(lptr-&gt;device)); /* initialize it */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>init_MUTEX(&amp;(lptr-&gt;device.sem));</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* place it in the list */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add(&amp;lptr-&gt;list, &amp;scull_c_list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return &amp;(lptr-&gt;device);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_c_open(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct scull_dev *dev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev_t key;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!current-&gt;signal-&gt;tty) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PDEBUG("Process \"%s\" has no ctl tty\n", current-&gt;comm);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -EINVAL;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>key = tty_devnum(current-&gt;signal-&gt;tty);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* look for a scullc device in the list */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_lock(&amp;scull_c_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev = scull_c_lookfor_device(key);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>spin_unlock(&amp;scull_c_lock);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!dev)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return -ENOMEM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* then, everything else is copied from the bare scull device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method does nothing special. It would normally release the device on last close, but we chose not to maintain an open count in order to simplify the testing of the driver. If the device were released on last close, you wouldn</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>t be able to read the same data after writing to the device, unless a background process were to keep it open. The sample driver takes the easier approach of keeping the data, so that at the next </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, you</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>ll find it there. The devices are released when </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>scull_cleanup </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is called. This code uses the generic Linux linked list mechanism in preference to reimplementing the same capability from scratch. Linux lists are discussed in Chapter 11.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Here</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>release </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>implementation for </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/dev/scullpriv</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>, which closes the discussion of device methods.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int scull_c_release(struct inode *inode, struct file *filp)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/*</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* Nothing to do, because the device is persistent.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>* A `real' cloned device should be freed on last close</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>*/</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Quick Reference</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>This chapter introduced the following symbols and header files: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/ioctl.h&gt;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Declares all the macros used to define </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands. It is currently included by </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&lt;linux/fs.h&gt;</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NRBITS</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_TYPEBITS</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_SIZEBITS</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_DIRBITS</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The number of bits available for the different bitfields of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>commands. There are also four macros that specify the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>MASK</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s and four that specify the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>SHIFT</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>s, but they</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8217;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>re mainly for internal use. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_SIZEBITS </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is an important value to check, because it changes across architectures.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NONE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_READ</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_WRITE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The possible values for the </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>direction</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> bitfield. </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Read</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> and </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>write</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> are different bits and can be ORed to specify read/write. The values are 0-based.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC(dir,type,nr,size)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IO(type,nr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOR(type,nr,size)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOW(type,nr,size)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOWR(type,nr,size)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Macros used to create an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ioctl </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>command.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_DIR(nr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_TYPE(nr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_NR(nr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_SIZE(nr)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Macros used to decode a command. In particular, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_TYPE(nr) </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is an OR combination of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_READ </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_IOC_WRITE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/uaccess.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int access_ok(int type, const void *addr, unsigned long size);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Checks that a pointer to user space is actually usable. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>returns a nonzero value if the access should be allowed.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_READ</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_WRITE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The possible values for the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>type </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_WRITE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is a superset of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>VERIFY_READ</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/uaccess.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int put_user(datum,ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int get_user(local,ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int __put_user(datum,ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int __get_user(local,ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Macros used to store or retrieve a datum to or from user space. The number of bytes being transferred depends on </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sizeof(*ptr)</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The regular versions call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>first, while the qualified versions (</SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__put_user </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__get_user</FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>) assume that </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>access_ok </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>has already been called.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/capability.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Defines the various </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>CAP_ </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>symbols describing the capabilities a user-space process may have.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int capable(int capability);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Returns nonzero if the process has the given capability.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/wait.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef struct { /* ... */ } wait_queue_head_t;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void init_waitqueue_head(wait_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DECLARE_WAIT_QUEUE_HEAD(queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The defined type for Linux wait queues. A </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_head_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>must be explicitly initialized with either </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>init_waitqueue_head </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>at runtime or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DECLARE_WAIT_QUEUE_HEAD </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>at compile time.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wait_event(wait_queue_head_t q, int condition);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int wait_event_interruptible(wait_queue_head_t q, int condition);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int wait_event_timeout(wait_queue_head_t q, int condition, int time);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int wait_event_interruptible_timeout(wait_queue_head_t q, int condition,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int time);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Cause the process to sleep on the given queue until the given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>condition </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>evaluates to a true value.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up(struct wait_queue **q);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_interruptible(struct wait_queue **q);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_nr(struct wait_queue **q, int nr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_interruptible_nr(struct wait_queue **q, int nr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_all(struct wait_queue **q);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_interruptible_all(struct wait_queue **q);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void wake_up_interruptible_sync(struct wait_queue **q);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Wake processes that are sleeping on the queue </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>q</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_interruptible </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>form wakes only interruptible processes. Normally, only one exclusive waiter is awakened, but that behavior can be changed with the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_nr </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_all </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>forms. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>_sync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>version does not reschedule the CPU before returning.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/sched.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>set_current_state(int state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Sets the execution state of the current process. </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_RUNNING </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>means it is ready to run, while the sleep states are </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_INTERRUPTIBLE </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>TASK_UNINTERRUPTIBLE</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void schedule(void);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Selects a runnable process from the run queue. The chosen process can be </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>current </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>or a different one.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef struct { /* ... */ } wait_queue_t;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>init_waitqueue_entry(wait_queue_t *entry, struct task_struct *task);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wait_queue_t </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>type is used to place a process onto a wait queue.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void prepare_to_wait(wait_queue_head_t *queue, wait_queue_t *wait, int state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void prepare_to_wait_exclusive(wait_queue_head_t *queue, wait_queue_t *wait, int state);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void finish_wait(wait_queue_head_t *queue, wait_queue_t *wait);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Helper functions that can be used to code a manual sleep.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void sleep_on(wiat_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void interruptible_sleep_on(wiat_queue_head_t *queue);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Obsolete and deprecated functions that unconditionally put the current process to sleep.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/poll.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void poll_wait(struct file *filp, wait_queue_head_t *q, poll_table *p)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Places the current process into a wait queue without scheduling immediately. It is designed to be used by the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>poll </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method of device drivers.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int fasync_helper(struct inode *inode, struct file *filp, int mode, struct fasync_struct **fa);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>A </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8220;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>helper</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8221;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US> for implementing the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>device method. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mode </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>argument is the same value that is passed to the method, while </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fa </FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>points to a device-specific </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fasync_struct *</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void kill_fasync(struct fasync_struct *fa, int sig, int band);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>If the driver supports asynchronous notification, this function can be used to send a signal to processes registered in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>fa</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int nonseekable_open(struct inode *inode, struct file *filp);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>loff_t no_llseek(struct file *file, loff_t offset, int whence);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>nonseekable_open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>should be called in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>open </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method of any device that does not support seeking. Such devices should also use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>no_llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>as their </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>llseek </FONT></SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>method.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P></BODY>