=== 2. How to Build External Modules 
<P></P>
<P><FONT class=extract>To build external modules, you must have a prebuilt kernel available<BR>that contains the configuration and header files used in the build.<BR>Also, the kernel must have been built with modules enabled. If you are<BR>using a distribution kernel, there will be a package for the kernel you<BR>are running provided by your distribution.</FONT></P>
<P><FONT class=extract>An alternative is to use the "make" target "modules_prepare." This will<BR>make sure the kernel contains the information required. The target<BR>exists solely as a simple way to prepare a kernel source tree for<BR>building external modules.</FONT></P>
<P><FONT class=extract>NOTE: "modules_prepare" will not build Module.symvers even if<BR>CONFIG_MODVERSIONS is set; therefore, a full kernel build needs to be<BR>executed to make module versioning work.</FONT></P>
<P><FONT class=extract>--- 2.1 Command Syntax</FONT></P>
<P><FONT class=extract>&nbsp;The command to build an external module is:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;$ make -C &lt;path_to_kernel_src&gt; M=$PWD</FONT></P>
<P><FONT class=extract>&nbsp;The kbuild system knows that an external module is being built<BR>&nbsp;due to the "M=&lt;dir&gt;" option given in the command.</FONT></P>
<P><FONT class=extract>&nbsp;To build against the running kernel use:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;$ make -C /lib/modules/`uname -r`/build M=$PWD</FONT></P>
<P><FONT class=extract>&nbsp;Then to install the module(s) just built, add the target<BR>&nbsp;"modules_install" to the command:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;$ make -C /lib/modules/`uname -r`/build M=$PWD modules_install</FONT></P>
<P><FONT class=extract>--- 2.2 Options</FONT></P>
<P><FONT class=extract>&nbsp;($KDIR refers to the path of the kernel source directory.)</FONT></P>
<P><FONT class=extract>&nbsp;make -C $KDIR M=$PWD</FONT></P>
<P><FONT class=extract>&nbsp;-C $KDIR<BR>&nbsp;&nbsp;The directory where the kernel source is located.<BR>&nbsp;&nbsp;"make" will actually change to the specified directory<BR>&nbsp;&nbsp;when executing and will change back when finished.</FONT></P>
<P><FONT class=extract>&nbsp;M=$PWD<BR>&nbsp;&nbsp;Informs kbuild that an external module is being built.<BR>&nbsp;&nbsp;The value given to "M" is the absolute path of the<BR>&nbsp;&nbsp;directory where the external module (kbuild file) is<BR>&nbsp;&nbsp;located.</FONT></P>
<P><FONT class=extract>--- 2.3 Targets</FONT></P>
<P><FONT class=extract>&nbsp;When building an external module, only a subset of the "make"<BR>&nbsp;targets are available.</FONT></P>
<P><FONT class=extract>&nbsp;make -C $KDIR M=$PWD [target]</FONT></P>
<P><FONT class=extract>&nbsp;The default will build the module(s) located in the current<BR>&nbsp;directory, so a target does not need to be specified. All<BR>&nbsp;output files will also be generated in this directory. No<BR>&nbsp;attempts are made to update the kernel source, and it is a<BR>&nbsp;precondition that a successful "make" has been executed for the<BR>&nbsp;kernel.</FONT></P>
<P><FONT class=extract>&nbsp;modules<BR>&nbsp;&nbsp;The default target for external modules. It has the<BR>&nbsp;&nbsp;same functionality as if no target was specified. See<BR>&nbsp;&nbsp;description above.</FONT></P>
<P><FONT class=extract>&nbsp;modules_install<BR>&nbsp;&nbsp;Install the external module(s). The default location is<BR>&nbsp;&nbsp;/lib/modules/&lt;kernel_release&gt;/extra/, but a prefix may<BR>&nbsp;&nbsp;be added with INSTALL_MOD_PATH (discussed in section 5).</FONT></P>
<P><FONT class=extract>&nbsp;clean<BR>&nbsp;&nbsp;Remove all generated files in the module directory only.</FONT></P>
<P><FONT class=extract>&nbsp;help<BR>&nbsp;&nbsp;List the available targets for external modules.</FONT></P>
<P><FONT class=extract>--- 2.4 Building Separate Files</FONT></P>
<P><FONT class=extract>&nbsp;It is possible to build single files that are part of a module.<BR>&nbsp;This works equally well for the kernel, a module, and even for<BR>&nbsp;external modules.</FONT></P>
<P><FONT class=extract>&nbsp;Example (The module foo.ko, consist of bar.o and baz.o):<BR>&nbsp;&nbsp;make -C $KDIR M=$PWD bar.lst<BR>&nbsp;&nbsp;make -C $KDIR M=$PWD baz.o<BR>&nbsp;&nbsp;make -C $KDIR M=$PWD foo.ko<BR>&nbsp;&nbsp;make -C $KDIR M=$PWD /</FONT>