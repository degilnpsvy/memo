Menu attributes<BR>--------------- 
<P></P>
<P>A menu entry can have a number of attributes. Not all of them are<BR>applicable everywhere (see syntax).</P>
<P><FONT class=extract>- type definition: "bool"/"tristate"/"string"/"hex"/"int"<BR>&nbsp; Every config option must have a type. There are only two basic types:<BR>&nbsp; tristate and string; the other types are based on these two. The type<BR>&nbsp; definition optionally accepts an input prompt, so these two examples<BR>&nbsp; are equivalent:</FONT></P>
<P><FONT class=extract>&nbsp;bool "Networking support"<BR>&nbsp; and<BR>&nbsp;bool<BR>&nbsp;prompt "Networking support"</FONT></P>
<P><FONT class=extract>- input prompt: "prompt" &lt;prompt&gt; ["if" &lt;expr&gt;]<BR>&nbsp; Every menu entry can have at most one prompt, which is used to display<BR>&nbsp; to the user. Optionally dependencies only for this prompt can be added<BR>&nbsp; with "if".</FONT></P>
<P><FONT class=extract>- default value: "default" &lt;expr&gt; ["if" &lt;expr&gt;]<BR>&nbsp; A config option can have any number of default values. If multiple<BR>&nbsp; default values are visible, only the first defined one is active.<BR>&nbsp; Default values are not limited to the menu entry where they are<BR>&nbsp; defined. This means the default can be defined somewhere else or be<BR>&nbsp; overridden by an earlier definition.<BR>&nbsp; The default value is only assigned to the config symbol if no other<BR>&nbsp; value was set by the user (via the input prompt above). If an input<BR>&nbsp; prompt is visible the default value is presented to the user and can<BR>&nbsp; be overridden by him.<BR>&nbsp; Optionally, dependencies only for this default value can be added with<BR>&nbsp; "if".</FONT></P>
<P><FONT class=extract>- type definition + default value:<BR>&nbsp;"def_bool"/"def_tristate" &lt;expr&gt; ["if" &lt;expr&gt;]<BR>&nbsp; This is a shorthand notation for a type definition plus a value.<BR>&nbsp; Optionally dependencies for this default value can be added with "if".</FONT></P>
<P><FONT class=extract>- dependencies: "depends on" &lt;expr&gt;<BR>&nbsp; This defines a dependency for this menu entry. If multiple<BR>&nbsp; dependencies are defined, they are connected with '&amp;&amp;'. Dependencies<BR>&nbsp; are applied to all other options within this menu entry (which also<BR>&nbsp; accept an "if" expression), so these two examples are equivalent:</FONT></P>
<P><FONT class=extract>&nbsp;bool "foo" if BAR<BR>&nbsp;default y if BAR<BR>&nbsp; and<BR>&nbsp;depends on BAR<BR>&nbsp;bool "foo"<BR>&nbsp;default y</FONT></P>
<P><FONT class=extract>- reverse dependencies: "select" &lt;symbol&gt; ["if" &lt;expr&gt;]<BR>&nbsp; While normal dependencies reduce the upper limit of a symbol (see<BR>&nbsp; below), reverse dependencies can be used to force a lower limit of<BR>&nbsp; another symbol. The value of the current menu symbol is used as the<BR>&nbsp; minimal value &lt;symbol&gt; can be set to. If &lt;symbol&gt; is selected multiple<BR>&nbsp; times, the limit is set to the largest selection.<BR>&nbsp; Reverse dependencies can only be used with boolean or tristate<BR>&nbsp; symbols.<BR>&nbsp; Note:<BR>&nbsp;select should be used with care. select will force<BR>&nbsp;a symbol to a value without visiting the dependencies.<BR>&nbsp;By abusing select you are able to select a symbol FOO even<BR>&nbsp;if FOO depends on BAR that is not set.<BR>&nbsp;In general use select only for non-visible symbols<BR>&nbsp;(no prompts anywhere) and for symbols with no dependencies.<BR>&nbsp;That will limit the usefulness but on the other hand avoid<BR>&nbsp;the illegal configurations all over.</FONT></P>
<P><FONT class=extract>- limiting menu display: "visible if" &lt;expr&gt;<BR>&nbsp; This attribute is only applicable to menu blocks, if the condition is<BR>&nbsp; false, the menu block is not displayed to the user (the symbols<BR>&nbsp; contained there can still be selected by other symbols, though). It is<BR>&nbsp; similar to a conditional "prompt" attribute for individual menu<BR>&nbsp; entries. Default value of "visible" is true.</FONT></P>
<P><FONT class=extract>- numerical ranges: "range" &lt;symbol&gt; &lt;symbol&gt; ["if" &lt;expr&gt;]<BR>&nbsp; This allows to limit the range of possible input values for int<BR>&nbsp; and hex symbols. The user can only input a value which is larger than<BR>&nbsp; or equal to the first symbol and smaller than or equal to the second<BR>&nbsp; symbol.</FONT></P>
<P><FONT class=extract>- help text: "help" or "---help---"<BR>&nbsp; This defines a help text. The end of the help text is determined by<BR>&nbsp; the indentation level, this means it ends at the first line which has<BR>&nbsp; a smaller indentation than the first line of the help text.<BR>&nbsp; "---help---" and "help" do not differ in behaviour, "---help---" is<BR>&nbsp; used to help visually separate configuration logic from help within<BR>&nbsp; the file as an aid to developers.</FONT></P>
<P><FONT class=extract>- misc options: "option" &lt;symbol&gt;[=&lt;value&gt;]<BR>&nbsp; Various less common options can be defined via this option syntax,<BR>&nbsp; which can modify the behaviour of the menu entry and its config<BR>&nbsp; symbol. These options are currently possible:</FONT></P>
<P><FONT class=extract>&nbsp; - "defconfig_list"<BR>&nbsp;&nbsp;&nbsp; This declares a list of default entries which can be used when<BR>&nbsp;&nbsp;&nbsp; looking for the default configuration (which is used when the main<BR>&nbsp;&nbsp;&nbsp; .config doesn't exists yet.)</FONT></P>
<P><FONT class=extract>&nbsp; - "modules"<BR>&nbsp;&nbsp;&nbsp; This declares the symbol to be used as the MODULES symbol, which<BR>&nbsp;&nbsp;&nbsp; enables the third modular state for all config symbols.<BR>&nbsp;&nbsp;&nbsp; At most one symbol may have the "modules" option set.</FONT></P>
<P><FONT class=extract>&nbsp; - "env"=&lt;value&gt;<BR>&nbsp;&nbsp;&nbsp; This imports the environment variable into Kconfig. It behaves like<BR>&nbsp;&nbsp;&nbsp; a default, except that the value comes from the environment, this<BR>&nbsp;&nbsp;&nbsp; also means that the behaviour when mixing it with normal defaults is<BR>&nbsp;&nbsp;&nbsp; undefined at this point. The symbol is currently not exported back<BR>&nbsp;&nbsp;&nbsp; to the build environment (if this is desired, it can be done via<BR>&nbsp;&nbsp;&nbsp; another symbol).</FONT></P>
<P><FONT class=extract>&nbsp; - "allnoconfig_y"<BR>&nbsp;&nbsp;&nbsp; This declares the symbol as one that should have the value y when<BR>&nbsp;&nbsp;&nbsp; using "allnoconfig". Used for symbols that hide other symbols.</FONT>