<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powi</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>double, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowi-3670></A></VAR><BR>
<BLOCKQUOTE>
<P>Returns the first argument raised to the power of the second. Unlike the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pow</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function no guarantees about precision and rounding are made.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powif</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>float, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowif-3671></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_powi</CODE>, except the argument and return types are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powil</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long double, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowil-3672></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_powi</CODE>, except the argument and return types are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>#include &lt;stdio.h&gt;<BR>#include &lt;math.h&gt;</P>
<P>int main()<BR>{<BR>&nbsp;&nbsp;&nbsp; double ans;<BR>&nbsp;&nbsp;&nbsp; int i,j;<BR>&nbsp;&nbsp;&nbsp; for (j=0;j&lt;100000;j++)<BR>&nbsp;&nbsp;&nbsp; for (i=0;i&lt;1000;i++)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* ans=pow(i,100)+1; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ans=__builtin_powi(i,100)+1;<BR>&nbsp;&nbsp;&nbsp; printf("%f\n", ans);<BR>&nbsp;&nbsp;&nbsp; return 0;<BR>}<BR></P>
<P>[donpope_tang@rslpc1 ~/temp]$ gcc -lm temp.c &amp;&amp; time ./a.out<BR>904792147113708978202774232251163195302533462105055722767900559426340884272029685186051590482334035331693899455077156796388925114714517158031278411522025682959034044211796451865521609479168180373931125764906603841302214817053800703228926872204125712497938870378959719769520626963626891405829458624512.000000<BR>5.699u 0.002s 0:05.70 99.8%&nbsp;0+0k 0+0io 0pf+0w<BR>[donpope_tang@rslpc1 ~/temp]$ gcc -lm temp.c &amp;&amp; time ./a.out<BR>904792147113710019114610166699307153946282167035447814650041721002462223312331206344511602765395516949514046764522569655495578249795652476240950292956021136540440815888034499945109922701079940254418009773322413008739262463059844950653021686720187422467197114439617828201094444864365868041573628903424.000000<BR>1.114u 0.001s 0:01.11 100.0%&nbsp;0+0k 0+0io 0pf+0w<BR></P></BLOCKQUOTE></DIV>