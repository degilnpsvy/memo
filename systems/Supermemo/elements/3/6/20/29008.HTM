<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: uint16_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap16</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint16_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap16-3673></A></VAR><BR>
<BLOCKQUOTE>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the order of the bytes reversed; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xaabb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>becomes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xbbaa</CODE>. Byte here always means exactly 8 bits.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: uint32_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap32</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint32_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap32-3674></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap16</CODE>, except the argument and return types are 32 bit.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: uint64_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap64</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint64_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap64-3675></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap32</CODE>, except the argument and return types are 64 bit.</P></BLOCKQUOTE></DIV>