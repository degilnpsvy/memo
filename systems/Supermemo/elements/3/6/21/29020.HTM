lib/list_debug.c
<P></P>
<P>/*<BR>&nbsp;* Copyright 2006, Red Hat, Inc., Dave Jones<BR>&nbsp;* Released under the General Public License (GPL).<BR>&nbsp;*<BR>&nbsp;* This file contains the linked list implementations for<BR>&nbsp;* DEBUG_LIST.<BR>&nbsp;*/</P>
<P></P>
<P>#include &lt;linux/export.h&gt;<BR>#include &lt;linux/list.h&gt;<BR>#include &lt;linux/bug.h&gt;<BR>#include &lt;linux/kernel.h&gt;<BR>#include &lt;linux/rculist.h&gt;</P>
<P>/*<BR>&nbsp;* Insert a new entry between two known consecutive entries.<BR>&nbsp;*<BR>&nbsp;* This is only for internal list manipulation where we know<BR>&nbsp;* the prev/next entries already!<BR>&nbsp;*/</P>
<P>void __list_add(struct list_head *new,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *prev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *next)<BR>{<BR>&nbsp;WARN(next-&gt;prev != prev,<BR>&nbsp;&nbsp;"list_add corruption. next-&gt;prev should be "<BR>&nbsp;&nbsp;"prev (%p), but was %p. (next=%p).\n",<BR>&nbsp;&nbsp;prev, next-&gt;prev, next);<BR>&nbsp;WARN(prev-&gt;next != next,<BR>&nbsp;&nbsp;"list_add corruption. prev-&gt;next should be "<BR>&nbsp;&nbsp;"next (%p), but was %p. (prev=%p).\n",<BR>&nbsp;&nbsp;next, prev-&gt;next, prev);<BR>&nbsp;WARN(new == prev || new == next,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "list_add double add: new=%p, prev=%p, next=%p.\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new, prev, next);<BR>&nbsp;next-&gt;prev = new;<BR>&nbsp;new-&gt;next = next;<BR>&nbsp;new-&gt;prev = prev;<BR>&nbsp;WRITE_ONCE(prev-&gt;next, new);<BR>}<BR>EXPORT_SYMBOL(__list_add);</P>
<P>void __list_del_entry(struct list_head *entry)<BR>{<BR>&nbsp;struct list_head *prev, *next;</P>
<P>&nbsp;prev = entry-&gt;prev;<BR>&nbsp;next = entry-&gt;next;</P>
<P>&nbsp;if (WARN(next == LIST_POISON1,<BR>&nbsp;&nbsp;"list_del corruption, %p-&gt;next is LIST_POISON1 (%p)\n",<BR>&nbsp;&nbsp;entry, LIST_POISON1) ||<BR>&nbsp;&nbsp;&nbsp;&nbsp; WARN(prev == LIST_POISON2,<BR>&nbsp;&nbsp;"list_del corruption, %p-&gt;prev is LIST_POISON2 (%p)\n",<BR>&nbsp;&nbsp;entry, LIST_POISON2) ||<BR>&nbsp;&nbsp;&nbsp;&nbsp; WARN(prev-&gt;next != entry,<BR>&nbsp;&nbsp;"list_del corruption. prev-&gt;next should be %p, "<BR>&nbsp;&nbsp;"but was %p\n", entry, prev-&gt;next) ||<BR>&nbsp;&nbsp;&nbsp;&nbsp; WARN(next-&gt;prev != entry,<BR>&nbsp;&nbsp;"list_del corruption. next-&gt;prev should be %p, "<BR>&nbsp;&nbsp;"but was %p\n", entry, next-&gt;prev))<BR>&nbsp;&nbsp;return;</P>
<P>&nbsp;__list_del(prev, next);<BR>}<BR>EXPORT_SYMBOL(__list_del_entry);</P>
<P>/**<BR>&nbsp;* list_del - deletes entry from list.<BR>&nbsp;* @entry: the element to delete from the list.<BR>&nbsp;* Note: list_empty on entry does not return true after this, the entry is<BR>&nbsp;* in an undefined state.<BR>&nbsp;*/<BR>void list_del(struct list_head *entry)<BR>{<BR>&nbsp;__list_del_entry(entry);<BR>&nbsp;entry-&gt;next = LIST_POISON1;<BR>&nbsp;entry-&gt;prev = LIST_POISON2;<BR>}<BR>EXPORT_SYMBOL(list_del);</P>
<P>/*<BR>&nbsp;* RCU variants.<BR>&nbsp;*/<BR>void __list_add_rcu(struct list_head *new,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *prev, struct list_head *next)<BR>{<BR>&nbsp;WARN(next-&gt;prev != prev,<BR>&nbsp;&nbsp;"list_add_rcu corruption. next-&gt;prev should be prev (%p), but was %p. (next=%p).\n",<BR>&nbsp;&nbsp;prev, next-&gt;prev, next);<BR>&nbsp;WARN(prev-&gt;next != next,<BR>&nbsp;&nbsp;"list_add_rcu corruption. prev-&gt;next should be next (%p), but was %p. (prev=%p).\n",<BR>&nbsp;&nbsp;next, prev-&gt;next, prev);<BR>&nbsp;new-&gt;next = next;<BR>&nbsp;new-&gt;prev = prev;<BR>&nbsp;rcu_assign_pointer(list_next_rcu(prev), new);<BR>&nbsp;next-&gt;prev = new;<BR>}<BR>EXPORT_SYMBOL(__list_add_rcu);