The architecture allows the secure state to access the non-secure versions of banked registers. This is accomplished by aliasing the non-secure versions to a different part of the address space as follows:<BR>* Core registers &#8211; Setting the MSB of the address (i.e. SYSm[8]) for accesses from the secure states selects the non-secure version of the register. E.g. SYSm = 0x8 access the main stack pointer for the current state, where as SYSm = 0x88 accesses the non-secure version of the main stack pointer. Accesses from the non-secure state with the MSB set behave as RAZ/WI.<BR>* Memory mapped registers &#8211; The memory mapped address range 0xE002E000 -&gt; 0xE002EFFF is an alias of the SCS registers (0xE000E000 -&gt; 0xE000EFFF), however unless otherwise specified accesses to these aliases from the secure state behave as if the access came from the non-secure state and target the non-secure versions of the registers. Accesses from the debugger or software executing in the non-secure state behave as if the aliases did not exist (i.e. RAZ/WI if the access is privileged, and a BusFault is raised if the access is unprivileged).<BR>Unless otherwise specified, register fields that are added as part of the security extensions behave as RAZ/WI if the security extensions are not implemented.