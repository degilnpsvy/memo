list_for_each_entry_safe_continue</P>
<P>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate over list of given type, continuing after current point,<BR>&nbsp;* safe against removal of list entry.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe_continue(pos, n, head, member) &nbsp;&nbsp;\<BR>&nbsp;for (pos = list_next_entry(pos, member), &nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;n = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_next_entry(n, member))