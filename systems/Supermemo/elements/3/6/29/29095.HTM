<DIV id=cnblogs_post_body>
<P>The Intel documentation classifies interrupts and exceptions as follows:</P>
<P>1. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Interrupts</SPAN></STRONG>:</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Maskable interrupts</SPAN></STRONG>: All Interrupt ReQuests (IRQs) issued by I/O devices give rise to maksable</P>
<P>interrupts. A maskable interrupt can be in two states: <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">maksed</SPAN></STRONG> or <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">unmasked</SPAN></STRONG>; a masked interrupt</P>
<P>is ignored by the control unit as long as it remains masked.</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Nonmaskable Interrupts:</SPAN></STRONG> Only a few critical events (such as hardware failures) give rise to non-</P>
<P>maskable interrupts. Nonmaskable interrupts are always recognized by the CPU.&nbsp;</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">2. Exceptions</SPAN></STRONG></P>
<P><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">(1) <STRONG>Processor-detected exceptions:</STRONG> Generated when the CPU detects an anomalous condition while</SPAN></P>
<P>executing an instruction. These are further divided into <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">three groups</SPAN></STRONG>, depending on the value of</P>
<P>the <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">eip register</SPAN></STRONG> that is saved on the <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Kernel Mode Stack</SPAN></STRONG> when the CPU control unit raises the</P>
<P>exception.</P>
<P><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Faults</SPAN></STRONG></SPAN>: Can generally be detected; once occurred, the program is allowed to restart with no loss of</P>
<P>continuity. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">The saved value of eip is the address of the instruction that causes the fault</SPAN></STRONG>, and hence</P>
<P>that instruction can be resumed when the exception handler terminates. As we will see in the section</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Page Fault Exception Handler</SPAN></STRONG>, resuming the same instruction is necessary whenever the handler is</P>
<P>able to correct the anomalous condition that caused the exception.</P>
<P><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Traps</SPAN></STRONG></SPAN>: Reported immediately following the execution of the trapping instruction; after the kernel</P>
<P>returns control to the program, it is allowed to continue its execution with no loss of continuity. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">The</SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">saved value of eip is the address of the instruction that should be executed after the one that caused</SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">the trap. A trap is triggered only when there is no need to reexecute the instruction that terminated.</SPAN></STRONG></P>
<P>The main use of traps is for debugging purpose. The role of the interrupt signal in this case is to</P>
<P>notify the debugger that a specific instruction has been executed (for instance, a breakpoint has been</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">reached</SPAN></STRONG> within a program). Once the user has examined the data provided by the debugger, she may</P>
<P>ask that execution of the debugged program resume, starting from the next instruction.</P>
<P><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Aborts</SPAN></STRONG></SPAN>: <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">A serious error occurred; the control unit is in trouble, and it may be unable to store in the eip</SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">register the precise location of the instruction causing the exception.</SPAN></STRONG> Aborts are used to report severe</P>
<P>errors, such as hardware failures and invalid or inconsistent values in system tables. The interrupt signal</P>
<P>sent by the control unit is an emergency signal used to switch control to the corresponding abort exception</P>
<P>handler. This handler has no choice but to force the affected process to terminate.</P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">(2) Programmed Exceptions</SPAN></STRONG></P>
<P>Occur at the request of the programmer. They are triggered by int or int3 instruction; the into (check for</P>
<P>overflow) and bound (check on address bound) instructions also give rise to a programmed exception when</P>
<P>the condition they are checking is not true.<STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"> Programmed exceptions are handled by the control unit as traps;</SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">they are often called</SPAN></STRONG> <SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif; COLOR: #ff0000">software interrupts</SPAN>. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Such exceptions have two common uses: to implement system calls</SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">and to notify a debugger of a specific event.</SPAN></STRONG></P>
<P>Each interrupt or exception is identified by a number ranging from 0 to 255; Intel calls this 8-bit unsigned</P>
<P>number a vector. The vectors of nonmakable interrupts and exceptions are fixed, while those of maskable</P>
<P>interrupts can be altered by programming the Interrupt Controller.</P>
<P><FONT class=clozed>1. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Interrupts</SPAN></STRONG>:</FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Maskable interrupts</SPAN></STRONG>: All Interrupt ReQuests (IRQs) issued by I/O devices give rise to maksable</FONT></P>
<P><FONT class=clozed>interrupts. A maskable interrupt can be in two states: <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">maksed</SPAN></STRONG> or <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">unmasked</SPAN></STRONG>; a masked interrupt</FONT></P>
<P><FONT class=clozed>is ignored by the control unit as long as it remains masked.</FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Nonmaskable Interrupts:</SPAN></STRONG> Only a few critical events (such as hardware failures) give rise to non-</FONT></P>
<P><FONT class=clozed>maskable interrupts. Nonmaskable interrupts are always recognized by the CPU.&nbsp;</FONT></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>2. Exceptions</FONT></SPAN></STRONG></P>
<P><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>(1) <STRONG>Processor-detected exceptions:</STRONG> Generated when the CPU detects an anomalous condition while</FONT></SPAN></P>
<P><FONT class=clozed>executing an instruction. These are further divided into <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">three groups</SPAN></STRONG>, depending on the value of</FONT></P>
<P><FONT class=clozed>the <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">eip register</SPAN></STRONG> that is saved on the <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Kernel Mode Stack</SPAN></STRONG> when the CPU control unit raises the</FONT></P>
<P><FONT class=clozed>exception.</FONT></P>
<P><FONT class=clozed><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Faults</SPAN></STRONG></SPAN>: Can generally be detected; once occurred, the program is allowed to restart with no loss of</FONT></P>
<P><FONT class=clozed>continuity. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">The saved value of eip is the address of the instruction that causes the fault</SPAN></STRONG>, and hence</FONT></P>
<P><FONT class=clozed>that instruction can be resumed when the exception handler terminates. As we will see in the section</FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Page Fault Exception Handler</SPAN></STRONG>, resuming the same instruction is necessary whenever the handler is</FONT></P>
<P><FONT class=clozed>able to correct the anomalous condition that caused the exception.</FONT></P>
<P><FONT class=clozed><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Traps</SPAN></STRONG></SPAN>: Reported immediately following the execution of the trapping instruction; after the kernel</FONT></P>
<P><FONT class=clozed>returns control to the program, it is allowed to continue its execution with no loss of continuity. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">The</SPAN></STRONG></FONT></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>saved value of eip is the address of the instruction that should be executed after the one that caused</FONT></SPAN></STRONG></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>the trap. A trap is triggered only when there is no need to reexecute the instruction that terminated.</FONT></SPAN></STRONG></P>
<P><FONT class=clozed>The main use of traps is for debugging purpose. The role of the interrupt signal in this case is to</FONT></P>
<P><FONT class=clozed>notify the debugger that a specific instruction has been executed (for instance, a breakpoint has been</FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">reached</SPAN></STRONG> within a program). Once the user has examined the data provided by the debugger, she may</FONT></P>
<P><FONT class=clozed>ask that execution of the debugged program resume, starting from the next instruction.</FONT></P>
<P><FONT class=clozed><SPAN style="COLOR: #ff0000"><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Aborts</SPAN></STRONG></SPAN>: <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">A serious error occurred; the control unit is in trouble, and it may be unable to store in the eip</SPAN></STRONG></FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">register the precise location of the instruction causing the exception.</SPAN></STRONG> Aborts are used to report severe</FONT></P>
<P><FONT class=clozed>errors, such as hardware failures and invalid or inconsistent values in system tables. The interrupt signal</FONT></P>
<P><FONT class=clozed>sent by the control unit is an emergency signal used to switch control to the corresponding abort exception</FONT></P>
<P><FONT class=clozed>handler. This handler has no choice but to force the affected process to terminate.</FONT></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>(2) Programmed Exceptions</FONT></SPAN></STRONG></P>
<P><FONT class=clozed>Occur at the request of the programmer. They are triggered by int or int3 instruction; the into (check for</FONT></P>
<P><FONT class=clozed>overflow) and bound (check on address bound) instructions also give rise to a programmed exception when</FONT></P>
<P><FONT class=clozed>the condition they are checking is not true.<STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"> Programmed exceptions are handled by the control unit as traps;</SPAN></STRONG></FONT></P>
<P><FONT class=clozed><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">they are often called</SPAN></STRONG> <SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif; COLOR: #ff0000">software interrupts</SPAN>. <STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif">Such exceptions have two common uses: to implement system calls</SPAN></STRONG></FONT></P>
<P><STRONG><SPAN style="FONT-FAMILY: 'comic sans ms', sans-serif"><FONT class=clozed>and to notify a debugger of a specific event.</FONT></SPAN></STRONG></P>
<P><FONT class=clozed>Each interrupt or exception is identified by a number ranging from 0 to 255; Intel calls this 8-bit unsigned</FONT></P>
<P><FONT class=clozed>number a vector. The vectors of nonmakable interrupts and exceptions are fixed, while those of maskable</FONT></P>
<P><FONT class=clozed>interrupts can be altered by programming the Interrupt Controller.</FONT></P></DIV>