/**<BR>&nbsp;* <SPAN class=cloze>[...]</SPAN> - sleep until timeout<BR>&nbsp;* @timeout: timeout value in jiffies<BR>&nbsp;*<BR>&nbsp;* Make the current task sleep until @timeout jiffies have<BR>&nbsp;* elapsed. The routine will return immediately unless<BR>&nbsp;* the current task state has been set (see set_current_state()).<BR>&nbsp;*<BR>&nbsp;* You can set the task state as follows -<BR>&nbsp;*<BR>&nbsp;* %TASK_UNINTERRUPTIBLE - at least @timeout jiffies are guaranteed to<BR>&nbsp;* pass before the routine returns. The routine will return 0<BR>&nbsp;*<BR>&nbsp;* %TASK_INTERRUPTIBLE - the routine may return early if a signal is<BR>&nbsp;* delivered to the current task. In this case the remaining time<BR>&nbsp;* in jiffies will be returned, or 0 if the timer expired in time<BR>&nbsp;*<BR>&nbsp;* The current task state is guaranteed to be TASK_RUNNING when this<BR>&nbsp;* routine returns.<BR>&nbsp;*<BR>&nbsp;* Specifying a @timeout value of %MAX_SCHEDULE_TIMEOUT will schedule<BR>&nbsp;* the CPU away without a bound on the timeout. In this case the return<BR>&nbsp;* value will be %MAX_SCHEDULE_TIMEOUT.<BR>&nbsp;*<BR>&nbsp;* In all cases the return value is guaranteed to be non-negative.<BR>&nbsp;*/