/**<BR>&nbsp;* <FONT class=clozed>list_for_each_entry_safe_from</FONT> - iterate over list from current point safe against removal<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate over list of given type from current point, safe against<BR>&nbsp;* removal of list entry.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe_from(pos, n, head, member) &nbsp;&nbsp;&nbsp;\<BR><FONT class=clozed>&nbsp;for (n = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_next_entry(n, member))</FONT>