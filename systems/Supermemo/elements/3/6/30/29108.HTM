<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>Hardware Handling of Interrupts and Exceptions</H2></DIV></DIV></DIV>
<P><A id=IXT-4-472 class=indexterm></A><A id=IXT-4-473 class=indexterm></A>We now describe how the CPU control unit handles interrupts and exceptions. We assume that the kernel has been initialized and thus the CPU is operating in Protected Mode. </P>
<P>After executing an instruction, the <CODE class=literal>cs</CODE> and <CODE class=literal>eip</CODE> pair of registers contain the logical address of the next instruction to be executed. Before dealing with that instruction, the control unit checks whether an interrupt or an exception occurred while the control unit executed the previous instruction. If one occurred, the control unit does the following: </P>
<DIV class=orderedlist>
<OL class=orderedlist>
<LI class=listitem>
<P>Determines the vector <SPAN class=emphasis><EM>i</EM></SPAN> (0 &#8804; <SPAN class=emphasis><EM>i</EM></SPAN> &#8804; 255) associated with the interrupt or the exception. </P>
<LI class=listitem>
<P>Reads the <SPAN class=emphasis><EM>i</EM></SPAN> th entry of the IDT referred by the <CODE class=literal>idtr</CODE> register (we assume in the following description that the entry contains an interrupt or a trap gate). </P>
<LI class=listitem>
<P>Gets the base address of the GDT from the <CODE class=literal>gdtr</CODE> register and looks in the GDT to read the Segment Descriptor identified by the selector in the IDT entry. This descriptor specifies the base address of the segment that includes the interrupt or exception handler. </P>
<LI class=listitem>
<P>Makes sure the interrupt was issued by an authorized source. First, it compares the <A id=IXT-4-474 class=indexterm></A>Current Privilege Level (CPL), which is stored in the two least significant bits of the <CODE class=literal>cs</CODE> register, with the <A id=IXT-4-475 class=indexterm></A><A id=IXT-4-476 class=indexterm></A>Descriptor Privilege Level (DPL) of the Segment Descriptor included in the GDT. Raises a &#8220;General protection&#8221; exception if the CPL is lower than the DPL because the interrupt handler cannot have a lower privilege than the program that caused the interrupt. For programmed exceptions, it makes a further security check. It compares the CPL with the DPL of the gate descriptor included in the IDT and raises a &#8220;General protection&#8221; exception if the DPL is lower than the CPL. This last check makes it possible to prevent access by user applications to specific trap or interrupt gates. </P>
<LI class=listitem>
<P>Checks whether a change of privilege level is taking place &#8212; that is, if CPL is different from the selected Segment Descriptor&#8217;s DPL. If so, the control unit must start using the stack that is associated with the new privilege level. It does this by performing the following steps: </P>
<DIV class=orderedlist>
<OL class=orderedlist>
<LI class=listitem>
<P>Reads the <CODE class=literal>tr</CODE> register to access the TSS segment of the running process. </P>
<LI class=listitem>
<P>Loads the <CODE class=literal>ss</CODE> and <CODE class=literal>esp</CODE> registers with the proper values for the stack segment and stack pointer associated with the new privilege level. These values are found in the TSS (see <A title="Task State Segment" class=link href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/ch03s03.html#linuxkernel2-CHP-3-SECT-3.2">Section 3.3.2</A>). </P>
<LI class=listitem>
<P>In the new stack, saves the previous values of <CODE class=literal>ss</CODE> and <CODE class=literal>esp</CODE>, which define the logical address of the stack associated with the old privilege level. </P></LI></OL></DIV>
<LI class=listitem>
<P>If a fault has occurred, loads <CODE class=literal>cs</CODE> and <CODE class=literal>eip</CODE> with the logical address of the instruction that caused the exception so that it can be executed again. </P>
<LI class=listitem>
<P>Saves the contents of <CODE class=literal>eflags</CODE>, <CODE class=literal>cs</CODE>, and <CODE class=literal>eip</CODE> in the stack. </P>
<LI class=listitem>
<P>If the exception carries a hardware error code, saves it on the stack.</P>
<LI class=listitem>
<P>Loads <CODE class=literal>cs</CODE> and <CODE class=literal>eip</CODE>, respectively, with the Segment Selector and the Offset fields of the Gate Descriptor stored in the <SPAN class=emphasis><EM>i</EM></SPAN> th entry of the IDT. These values define the logical address of the first instruction of the interrupt or exception handler. </P></LI></OL></DIV>
<P>The last step performed by the control unit is equivalent to a jump to the interrupt or exception handler. In other words, the instruction processed by the control unit after dealing with the interrupt signal is the first instruction of the selected handler. </P>
<P>After the interrupt or exception is processed, the corresponding handler must relinquish control to the interrupted process by issuing the <CODE class=literal>iret</CODE> instruction, which forces the control unit to: </P>
<DIV class=orderedlist>
<OL class=orderedlist>
<LI class=listitem>
<P>Load the <CODE class=literal>cs</CODE>, <CODE class=literal>eip</CODE>, and <CODE class=literal>eflags</CODE> registers with the values saved on the stack. If a hardware error code has been pushed in the stack on top of the <CODE class=literal>eip</CODE> contents, it must be popped before executing <CODE class=literal>iret</CODE>. </P>
<LI class=listitem>
<P>Check whether the CPL of the handler is equal to the value contained in the two least significant bits of <CODE class=literal>cs</CODE> (this means the interrupted process was running at the same privilege level as the handler). If so, <CODE class=literal>iret</CODE> concludes execution; otherwise, go to the next step. </P>
<LI class=listitem>
<P>Load the <CODE class=literal>ss</CODE> and <CODE class=literal>esp</CODE> registers from the stack and return to the stack associated with the old privilege level. </P>
<LI class=listitem>
<P>Examine the contents of the <CODE class=literal>ds</CODE>, <CODE class=literal>es</CODE>, <CODE class=literal>fs</CODE>, and <CODE class=literal>gs</CODE> segment registers; if any of them contains a selector that refers to a Segment Descriptor whose DPL value is lower than CPL, clear the corresponding segment register. The control unit does this to forbid User Mode programs that run with a CPL equal to 3 from using segment registers previously used by kernel routines (with a DPL equal to 0). If these registers were not cleared, malicious User Mode programs could exploit them in order to access the kernel address space. </P></LI></OL></DIV>