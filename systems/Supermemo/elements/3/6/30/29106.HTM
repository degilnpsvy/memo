<DIV id=sbo-rt-content>
<DIV id=test-content-id>
<DIV title="Initializing the Interrupt Descriptor Table" class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title>Initializing the Interrupt Descriptor Table</H1></DIV></DIV></DIV>
<P><A id=linuxkernel2-IDXTERM-458 class=indexterm></A>Now that you understand what the Intel processor does with interrupts and exceptions at the hardware level, we can move on to describe how the Interrupt Descriptor Table is initialized. </P>
<P>Remember that before the kernel enables the interrupts, it must load the initial address of the IDT table into the <CODE class=literal>idtr</CODE> register and initialize all the entries of that table. This activity is done while initializing the system (see <A title="Appendix&nbsp;A.&nbsp;System Startup" class=link href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/apa.html">Appendix A</A>). </P>
<P>The <CODE class=literal>int</CODE> <A id=IXT-4-486 class=indexterm></A>instruction allows a User Mode process to issue an interrupt signal that has an arbitrary vector ranging from 0 to 255. Therefore, initialization of the IDT must be done carefully, to block illegal interrupts and exceptions simulated by User Mode processes via <CODE class=literal>int</CODE> instructions. This can be achieved by setting the DPL field of the Interrupt or Trap Gate Descriptor to 0. If the process attempts to issue one of these interrupt signals, the control unit checks the CPL value against the DPL field and issues a &#8220;General protection&#8221; exception. </P>
<P>In a few cases, however, a User Mode process must be able to issue a programmed exception. To allow this, it is sufficient to set the DPL field of the corresponding Interrupt or Trap Gate Descriptors to 3 &#8212; that is, as high as possible. </P>
<P>Let&#8217;s now see how Linux implements this strategy.</P>
<DIV title="Interrupt, Trap, and System Gates" class=sect2>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title><A id=linuxkernel2-CHP-4-SECT-4.1></A>Interrupt, Trap, and System Gates</H2></DIV></DIV></DIV>
<P>As mentioned in the earlier section <A title="Interrupt Descriptor Table" class=link href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/ch04s02.html#linuxkernel2-CHP-4-SECT-2.3">Section 4.2.3</A>, Intel provides three types of <A id=IXT-4-487 class=indexterm></A>interrupt descriptors: Task, Interrupt, and Trap Gate Descriptors. Task Gate Descriptors are irrelevant to Linux, but its Interrupt Descriptor Table contains several Interrupt and Trap Gate Descriptors. Linux classifies them as follows, using a slightly different breakdown and terminology from Intel: </P>
<DIV class=variablelist>
<DL>
<DT><SPAN class=term><A id=IXT-4-488 class=indexterm></A><SPAN class=emphasis><EM>Interrupt gate</EM></SPAN> </SPAN>
<DD>
<P>An Intel interrupt gate that cannot be accessed by a User Mode process (the gate&#8217;s DPL field is equal to 0). All Linux interrupt handlers are activated by means of interrupt gates, and all are restricted to Kernel Mode. </P>
<DT><SPAN class=term><A id=IXT-4-489 class=indexterm></A><SPAN class=emphasis><EM>System gate</EM></SPAN> </SPAN>
<DD>
<P>An Intel trap gate that can be accessed by a User Mode process (the gate&#8217;s DPL field is equal to 3). The four Linux exception handlers associated with the vectors 3, 4, 5, and 128 are activated by means of system gates, so the four assembly language instructions <CODE class=literal>int3</CODE>, <CODE class=literal>into</CODE>, <CODE class=literal>bound</CODE>, and <CODE class=literal>int $0x80</CODE> can be issued in User Mode. </P>
<DT><SPAN class=term><A id=IXT-4-490 class=indexterm></A><SPAN class=emphasis><EM>Trap gate</EM></SPAN> </SPAN>
<DD>
<P>An Intel trap gate that cannot be accessed by a User Mode process (the gate&#8217;s DPL field is equal to 0). Most Linux exception handlers are activated by means of trap gates. </P></DD></DL></DIV>
<P>The following architecture-dependent functions are used to insert gates in the IDT: </P>
<DIV class=variablelist>
<DL>
<DT><SPAN class=term><CODE class=literal>set_intr_gate(n,addr)</CODE> </SPAN>
<DD>
<P>Inserts an interrupt gate in the <SPAN class=emphasis><EM>n</EM></SPAN> <SUP>th</SUP> IDT entry. The Segment Selector inside the gate is set to the kernel code&#8217;s Segment Selector. The Offset field is set to <CODE class=literal>addr</CODE>, which is the address of the interrupt handler. The DPL field is set to 0. </P>
<DT><SPAN class=term><CODE class=literal>set_system_gate(n,addr)</CODE> </SPAN>
<DD>
<P>Inserts a trap gate in the <SPAN class=emphasis><EM>n</EM></SPAN> th IDT entry. The Segment Selector inside the gate is set to the kernel code&#8217;s Segment Selector. The Offset field is set to <CODE class=literal>addr</CODE>, which is the address of the exception handler. The DPL field is set to 3. </P>
<DT><SPAN class=term><CODE class=literal>set_trap_gate(n,addr)</CODE> </SPAN>
<DD>
<P>Similar to the previous function, except the DPL field is set to 0.</P></DD></DL></DIV></DIV>
<DIV title="Preliminary Initialization of the IDT" class=sect2>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title><A id=linuxkernel2-CHP-4-SECT-4.2></A>Preliminary Initialization of the IDT</H2></DIV></DIV></DIV>
<P>The <A id=IXT-4-491 class=indexterm></A>IDT is initialized and used by the BIOS routines when the computer still operates in Real Mode. Once Linux takes over, however, the IDT is moved to another area of RAM and initialized a second time, since Linux does not use any BIOS routines (see <A title="Appendix&nbsp;A.&nbsp;System Startup" class=link href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/apa.html">Appendix A</A>). </P>
<P>The <CODE class=literal>idt</CODE> variable points to the IDT, while the IDT itself is stored in the <CODE class=literal>idt_table</CODE> table, which includes 256 entries.<SUP>[<A id=linuxkernel2-CHP-4-FNOTE-4 class=footnote href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/ch04s04.html#ftn.linuxkernel2-CHP-4-FNOTE-4">26</A>]</SUP> The 6-byte <CODE class=literal>idt_descr</CODE> variable stores both the size of the IDT and its address and is used only when the kernel initializes the <CODE class=literal>idtr</CODE> register with the <CODE class=literal>lidt</CODE> assembly language instruction. </P>
<P>During kernel initialization, the <CODE class=literal>setup_idt( )</CODE> assembly language function starts by filling all 256 entries of <CODE class=literal>idt_table</CODE> with the same interrupt gate, which refers to the <CODE class=literal>ignore_int( )</CODE> interrupt handler: </P><A id=I_4_tt80></A><PRE class=programlisting>setup_idt: 
    lea ignore_int, %edx 
    movl $(_ _KERNEL_CS &lt;&lt; 16), %eax 
    movw %dx, %ax       /* selector = 0x0010 = cs */ 
    movw $0x8e00, %dx   /* interrupt gate, dpl=0, present */ 
    lea idt_table, %edi 
    mov $256, %ecx 
rp_sidt: 
    movl %eax, (%edi) 
    movl %edx, 4(%edi) 
    addl $8, %edi 
    dec %ecx 
    jne rp_sidt 
    ret</PRE>
<P>The <CODE class=literal>ignore_int( )</CODE> interrupt handler, which is in assembly language, may be viewed as a null handler that executes the following actions: </P>
<DIV class=orderedlist>
<OL class=orderedlist>
<LI class=listitem>
<P>Saves the content of some registers in the stack</P>
<LI class=listitem>
<P>Invokes the <CODE class=literal>printk( )</CODE> function to print an &#8220;Unknown interrupt&#8221; system message </P>
<LI class=listitem>
<P>Restores the register contents from the stack</P>
<LI class=listitem>
<P>Executes an <CODE class=literal>iret</CODE> instruction to restart the interrupted program </P></LI></OL></DIV>
<P>The <CODE class=literal>ignore_int( )</CODE> handler should never be executed. The occurrence of &#8220;Unknown interrupt&#8221; messages on the console or in the log files denotes either a hardware problem (an I/O device is issuing unforeseen interrupts) or a kernel problem (an interrupt or exception is not being handled properly). </P>
<P>Following this preliminary initialization, the kernel makes a second pass in the IDT to replace some of the null handlers with meaningful trap and interrupt handlers. Once this is done, the IDT includes a specialized interrupt, trap, or system gate for each different exception issued by the control unit and for each IRQ recognized by the interrupt controller. </P>
<P>The next two sections illustrate in detail how this is done for exceptions and interrupts.<A id=IXTR3-535 class=indexterm></A> </P></DIV>
<DIV class=footnotes><BR>
<DIV class=footnote>
<P><SUP>[<A id=ftn.linuxkernel2-CHP-4-FNOTE-4 class=para href="https://www.safaribooksonline.com/library/view/understanding-the-linux/0596002130/ch04s04.html#linuxkernel2-CHP-4-FNOTE-4">26</A>] </SUP>Some Pentium models have the notorious "<A id=IXT-4-492 class=indexterm></A> <A id=IXT-4-493 class=indexterm></A>f00f&#8221; bug, which allows a User Mode program to freeze the system. When executing on such CPUs, Linux uses a workaround based on storing the IDT in a write-protected page frame. The workaround for the bug is offered as an option when the user compiles the kernel.</P></DIV></DIV></DIV></DIV></DIV><SECTION class="t-bottom-cta bottom-cta free-chapter">
<H2><PRE><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#306" name=306>306</A>#ifdef <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_X86_64&amp;project=Linux-v4.6">CONFIG_X86_64</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#307" name=307>307</A>static inline void <A class=xf name=set_nmi_gate></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_nmi_gate&amp;project=Linux-v4.6">set_nmi_gate</A>(int <A class=xa name=gate></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=gate&amp;project=Linux-v4.6">gate</A>, void *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#308" name=308>308</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#309" name=309>309</A>	<A href="http://172.29.26.110:8080/source/s?defs=gate_desc&amp;project=Linux-v4.6">gate_desc</A> s;
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#310" name=310>310</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#311" name=311>311</A>	<A href="http://172.29.26.110:8080/source/s?defs=pack_gate&amp;project=Linux-v4.6">pack_gate</A>(&amp;s, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, (unsigned long)<A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, 0, 0, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#312" name=312>312</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#write_idt_entry">write_idt_entry</A>(<A href="http://172.29.26.110:8080/source/s?defs=debug_idt_table&amp;project=Linux-v4.6">debug_idt_table</A>, <A href="http://172.29.26.110:8080/source/s?defs=gate&amp;project=Linux-v4.6">gate</A>, &amp;s);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#313" name=313>313</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#314" name=314>314</A>#endif</PRE><PRE><PRE><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#358" name=358>358</A><SPAN class=c>/*
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#359" name=359>359</A> * This needs to use 'idt_table' rather than 'idt', and
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#360" name=360>360</A> * thus use the _nonmapped_ version of the IDT, as the
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#361" name=361>361</A> * Pentium F0 0F bugfix can have resulted in the mapped
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#362" name=362>362</A> * IDT being write-protected.
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#363" name=363>363</A> */</SPAN>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#364" name=364>364</A>#define <A class=xm name=set_intr_gate_notrace></A><A class=xm href="http://172.29.26.110:8080/source/s?refs=set_intr_gate_notrace&amp;project=Linux-v4.6">set_intr_gate_notrace</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>)					\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#365" name=365>365</A>	do {								\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#366" name=366>366</A>		<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((unsigned)n &gt; <SPAN class=n>0xFF</SPAN>);				\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#367" name=367>367</A>		<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, (void *)<A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, 0, 0,	\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#368" name=368>368</A>			  <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);					\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#369" name=369>369</A>	} while (0)
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#370" name=370>370</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#371" name=371>371</A>#define <A class=xm name=set_intr_gate></A><A class=xm href="http://172.29.26.110:8080/source/s?refs=set_intr_gate&amp;project=Linux-v4.6">set_intr_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>)						\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#372" name=372>372</A>	do {								\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#373" name=373>373</A>		<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#set_intr_gate_notrace">set_intr_gate_notrace</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>);				\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#374" name=374>374</A>		<A href="http://172.29.26.110:8080/source/s?defs=_trace_set_gate&amp;project=Linux-v4.6">_trace_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, (void *)<A href="http://172.29.26.110:8080/source/s?defs=trace_&amp;project=Linux-v4.6">trace_</A>##<A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>,\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#375" name=375>375</A>				0, 0, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);			\
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#376" name=376>376</A>	} while (0)</PRE><PRE>&nbsp;</PRE><PRE><PRE><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#399" name=399>399</A><SPAN class=c>/*
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#400" name=400>400</A> * This routine sets up an interrupt gate at directory privilege level 3.
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#401" name=401>401</A> */</SPAN>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#402" name=402>402</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_system_intr_gate></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_system_intr_gate&amp;project=Linux-v4.6">set_system_intr_gate</A>(<B>unsigned</B> <B>int</B> n, <B>void</B> *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#403" name=403>403</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#404" name=404>404</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#405" name=405>405</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, <SPAN class=n>0x3</SPAN>, 0, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#406" name=406>406</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#407" name=407>407</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#408" name=408>408</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_system_trap_gate></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_system_trap_gate&amp;project=Linux-v4.6">set_system_trap_gate</A>(<B>unsigned</B> <B>int</B> n, <B>void</B> *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#409" name=409>409</A>{
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#410" name=410>410</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#411" name=411>411</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_TRAP&amp;project=Linux-v4.6">GATE_TRAP</A>, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, <SPAN class=n>0x3</SPAN>, 0, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#412" name=412>412</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#413" name=413>413</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#414" name=414>414</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_trap_gate></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_trap_gate&amp;project=Linux-v4.6">set_trap_gate</A>(<B>unsigned</B> <B>int</B> n, <B>void</B> *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#415" name=415>415</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#416" name=416>416</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#417" name=417>417</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_TRAP&amp;project=Linux-v4.6">GATE_TRAP</A>, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, 0, 0, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#418" name=418>418</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#419" name=419>419</A>
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#420" name=420>420</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_task_gate></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_task_gate&amp;project=Linux-v4.6">set_task_gate</A>(<B>unsigned</B> <B>int</B> n, <B>unsigned</B> <B>int</B> <A class=xa name=gdt_entry></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=gdt_entry&amp;project=Linux-v4.6">gdt_entry</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#421" name=421>421</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#422" name=422>422</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#423" name=423>423</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_TASK&amp;project=Linux-v4.6">GATE_TASK</A>, (<B>void</B> *)0, 0, 0, (<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#gdt_entry">gdt_entry</A>&lt;&lt;<SPAN class=n>3</SPAN>));
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#424" name=424>424</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#425" name=425>425</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#426" name=426>426</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_intr_gate_ist></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_intr_gate_ist&amp;project=Linux-v4.6">set_intr_gate_ist</A>(<B>int</B> n, <B>void</B> *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>, <B>unsigned</B> <A class=xa name=ist></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=ist&amp;project=Linux-v4.6">ist</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#427" name=427>427</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#428" name=428>428</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#429" name=429>429</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, 0, <A href="http://172.29.26.110:8080/source/s?defs=ist&amp;project=Linux-v4.6">ist</A>, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#430" name=430>430</A>}
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#431" name=431>431</A>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#432" name=432>432</A><B>static</B> <B>inline</B> <B>void</B> <A class=xf name=set_system_intr_gate_ist></A><A class=xf href="http://172.29.26.110:8080/source/s?refs=set_system_intr_gate_ist&amp;project=Linux-v4.6">set_system_intr_gate_ist</A>(<B>int</B> n, <B>void</B> *<A class=xa name=addr></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=addr&amp;project=Linux-v4.6">addr</A>, <B>unsigned</B> <A class=xa name=ist></A><A class=xa href="http://172.29.26.110:8080/source/s?refs=ist&amp;project=Linux-v4.6">ist</A>)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#433" name=433>433</A>{
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#434" name=434>434</A>	<A href="http://172.29.26.110:8080/source/s?defs=BUG_ON&amp;project=Linux-v4.6">BUG_ON</A>((<B>unsigned</B>)n &gt; <SPAN class=n>0xFF</SPAN>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#435" name=435>435</A>	<A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#_set_gate">_set_gate</A>(n, <A href="http://172.29.26.110:8080/source/s?defs=GATE_INTERRUPT&amp;project=Linux-v4.6">GATE_INTERRUPT</A>, <A href="http://172.29.26.110:8080/source/s?defs=addr&amp;project=Linux-v4.6">addr</A>, <SPAN class=n>0x3</SPAN>, <A href="http://172.29.26.110:8080/source/s?defs=ist&amp;project=Linux-v4.6">ist</A>, <A href="http://172.29.26.110:8080/source/s?defs=__KERNEL_CS&amp;project=Linux-v4.6">__KERNEL_CS</A>);
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/arch/x86/include/asm/desc.h#436" name=436>436</A>}</PRE></PRE></PRE></H2></SECTION>