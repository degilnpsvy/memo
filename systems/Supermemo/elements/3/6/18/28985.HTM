/**<BR>&nbsp;* mod_timer_pinned - modify a timer's timeout<BR>&nbsp;* @timer: the timer to be modified<BR>&nbsp;* @expires: new timeout in jiffies<BR>&nbsp;*<BR>&nbsp;* mod_timer_pinned() is a way to update the expire field of an<BR>&nbsp;* active timer (if the timer is inactive it will be activated)<BR>&nbsp;* and to ensure that the timer is scheduled on the current CPU.<BR>&nbsp;*<BR>&nbsp;* Note that this does not prevent the timer from being migrated<BR>&nbsp;* when the current CPU goes offline.&nbsp; If this is a problem for<BR>&nbsp;* you, use CPU-hotplug notifiers to handle it correctly, for<BR>&nbsp;* example, cancelling the timer when the corresponding CPU goes<BR>&nbsp;* offline.<BR>&nbsp;*<BR>&nbsp;* mod_timer_pinned(timer, expires) is equivalent to:<BR>&nbsp;*<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp; del_timer(timer); timer-&gt;expires = expires; add_timer(timer);<BR>&nbsp;*/<BR>int mod_timer_pinned(struct timer_list *timer, unsigned long expires)<BR>{<BR>&nbsp;if (timer-&gt;expires == expires &amp;&amp; timer_pending(timer))<BR>&nbsp;&nbsp;return 1;</P>
<P>&nbsp;return __mod_timer(timer, expires, false, TIMER_PINNED);<BR>}<BR>EXPORT_SYMBOL(mod_timer_pinned);