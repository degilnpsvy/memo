/**<BR>&nbsp;* <FONT class=clozed>del_timer</FONT> - deactive a timer.<BR>&nbsp;* @timer: the timer to be deactivated<BR>&nbsp;*<BR>&nbsp;* del_timer() deactivates a timer - this works on both active and inactive<BR>&nbsp;* timers.<BR>&nbsp;*<BR>&nbsp;* The function returns whether it has deactivated a pending timer or not.<BR>&nbsp;* (ie. del_timer() of an inactive timer returns 0, del_timer() of an<BR>&nbsp;* active timer returns 1.)<BR>&nbsp;*/<BR>int del_timer(struct timer_list *timer)<BR>{<BR>&nbsp;struct tvec_base *base;<BR>&nbsp;unsigned long flags;<BR>&nbsp;int ret = 0; 
<P></P>
<P>&nbsp;debug_assert_init(timer);</P>
<P>&nbsp;timer_stats_timer_clear_start_info(timer);<BR>&nbsp;if (timer_pending(timer)) {<BR>&nbsp;&nbsp;base = lock_timer_base(timer, &amp;flags);<BR>&nbsp;&nbsp;ret = detach_if_pending(timer, base, true);<BR>&nbsp;&nbsp;spin_unlock_irqrestore(&amp;base-&gt;lock, flags);<BR>&nbsp;}</P>
<P>&nbsp;return ret;<BR>}<BR>EXPORT_SYMBOL(del_timer);