TakeReset() Reset behavior Reset behavior on page B1-641</P>
<P>// TakeReset()<BR>// ============</P>
<P>bit ExceptionActive[*]; /* conceptual array of 1-bit values for all exceptions */<BR>bits(32) vectortable = VTOR&lt;31:7&gt;:&#8217;0000000&#8217;;<BR>Mode CurrentMode;</P>
<P>TakeReset()<BR>&nbsp;&nbsp;&nbsp; R[0..12] = bits(32) UNKNOWN;<BR>&nbsp;&nbsp;&nbsp; SP_main = MemA[vectortable,4] &amp; 0xFFFFFFFC;<BR>&nbsp;&nbsp;&nbsp; SP_process = ((bits(30) UNKNOWN):&#8217;00&#8217;);<BR>&nbsp;&nbsp;&nbsp; LR = 0xFFFFFFFF; /* preset to an illegal exception return value */<BR>&nbsp;&nbsp;&nbsp; tmp = MemA[vectortable+4,4]<BR>&nbsp;&nbsp;&nbsp; PC = tmp AND 0xFFFFFFFE; /* address of reset service routine */<BR>&nbsp;&nbsp;&nbsp; tbit = tmp&lt;0&gt;;<BR>&nbsp;&nbsp;&nbsp; CurrentMode = Mode_Thread;<BR>&nbsp;&nbsp;&nbsp; APSR = bits(32) UNKNOWN; /* flags UNPREDICTABLE from reset */<BR>&nbsp;&nbsp;&nbsp; IPSR&lt;8:0&gt; = 0x0; /* Exception Number cleared */<BR>&nbsp;&nbsp;&nbsp; EPSR.T = tbit; /* T bit set from vector */<BR>&nbsp;&nbsp;&nbsp; EPSR.IT&lt;7:0&gt; = 0x0; /* IT/ICI bits cleared */<BR>&nbsp;&nbsp;&nbsp; PRIMASK&lt;0&gt; = &#8216;0&#8217;; /* priority mask cleared at reset */<BR>&nbsp;&nbsp;&nbsp; FAULTMASK&lt;0&gt; = &#8216;0&#8217;; /* fault mask cleared at reset */<BR>&nbsp;&nbsp;&nbsp; BASEPRI&lt;7:0&gt; = 0x0; /* base priority disabled at reset */<BR>&nbsp;&nbsp;&nbsp; if HaveFPExt() then /* initialize the Floating Point Extn */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONTROL&lt;2:0&gt; = &#8216;000&#8217;; /* FP inactive, stack is Main, thread is privileged */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CPACR.cp10 = &#8216;00&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CPACR.cp11 = &#8216;00&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPDSCR.AHP = &#8216;0&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPDSCR.DN = &#8216;0&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPDSCR.FZ = &#8216;0&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPDSCR.RMode = &#8216;00&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPCCR.ASPEN = &#8216;1&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPCCR.LSPEN = &#8216;1&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPCCR.LSPACT = &#8216;0&#8217;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPCAR = bits(32) UNKNOWN;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPFSR = bits(32) UNKNOWN;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S[0..31] = bits(32) UNKNOWN;<BR>&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONTROL&lt;1:0&gt; = &#8216;00&#8217;; /* current stack is Main, thread is privileged */<BR>&nbsp;&nbsp;&nbsp; ResetSCSRegs(); /* catch-all function for System Control Space reset */<BR>&nbsp;&nbsp;&nbsp; ExceptionActive[*] = &#8216;0&#8217;; /* all exceptions Inactive */<BR>&nbsp;&nbsp;&nbsp; ClearExclusiveLocal(); /* Synchronization (LDREX*/STREX*) monitor support */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* to open access state. */<BR>&nbsp;&nbsp;&nbsp; ClearEventRegister() /* see WFE instruction for more details */