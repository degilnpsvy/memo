InterruptAssertion() 
<P></P>
<P>Determine status of an external interrupt </P>
<P>External interrupt input behavior on page B3-751</P>
<P><BR>External interrupt input behavior<BR>The following pseudocode describes the relationship between external interrupt inputs and the NVIC<BR>behavior:</P>
<P></P>
<P>// DEFINITIONS</P>
<P><FONT class=extract>NVIC[] is an array of active high external interrupt input signals;<BR>&nbsp;&nbsp;&nbsp; // the type of signal (level or pulse) and its assertion level/sense is IMPLEMENTATION DEFINED<BR>&nbsp;&nbsp;&nbsp; // and might not be the same for all inputs</FONT></P>
<P><FONT class=extract>boolean Edge(integer INTNUM); // Returns true if on a clock edge NVIC[INTNUM]<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // has changed from &#8216;0&#8217; to &#8216;1&#8217;<BR></FONT><FONT class=extract>boolean NVIC_Pending[INTNUM]; // an array of pending status bits for the external interrupts</FONT><BR><FONT class=extract>integer INTNUM; // the external interrupt number</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; // The WriteToRegField helper function returns TRUE on a write of &#8216;1&#8217; event<BR>&nbsp;&nbsp;&nbsp; // to the field FieldNumber of the RegName register.<BR>&nbsp;&nbsp;&nbsp; <BR>boolean WriteToRegField(register RegName, integer FieldNumber)</FONT></P>
<P><FONT class=extract>boolean ExceptionIN(integer INTNUM); // returns TRUE if exception entry in progress<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to activate INTNUM<BR>boolean ExceptionOUT(integer INTNUM); // returns TRUE if exception return in progress<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // from active INTNUM</FONT></P>
<P><FONT class=extract>// INTERRUPT INTERFACE</FONT></P>
<P><FONT class=extract>sampleInterruptHi = WriteToRegField(AIRCR, VECTCLRACTIVE) || ExceptionOUT(INTNUM);<BR>sampleInterruptLo = WriteToRegField(ICPR, INTNUM);</FONT></P>
<P><FONT class=extract>InterruptAssertion = Edge(INTNUM) || (NVIC[INTNUM] &amp;&amp; sampleInterruptHi);<BR>InterruptDeassertion = !NVIC[INTNUM] &amp;&amp; sampleInterruptLo;</FONT></P>
<P><FONT class=extract>// NVIC BEHAVIOR</FONT></P>
<P><FONT class=extract>clearPend = ExceptionIN(INTNUM) || InterruptDeassertion;<BR>setPend = InterruptAssertion || WriteToRegField(ISPR, INTNUM);</FONT></P>
<P><FONT class=extract>if clearPend &amp;&amp; setPend then<BR>&nbsp;&nbsp;&nbsp; IMPLEMENTATION DEFINED whether NVIC_Pending[INTNUM] is TRUE or FALSE;<BR>else<BR>&nbsp;&nbsp;&nbsp; NVIC_Pending[INTNUM] = setPend || (NVIC_Pending[INTNUM] &amp;&amp; !clearPend);</FONT>