/*<BR>&nbsp;* Deferred Probe infrastructure.<BR>&nbsp;*<BR>&nbsp;* Sometimes driver probe order matters, but the kernel doesn't always have<BR>&nbsp;* dependency information which means some drivers will get probed before a<BR>&nbsp;* resource it depends on is available.&nbsp; For example, an SDHCI driver may<BR>&nbsp;* first need a GPIO line from an i2c GPIO controller before it can be<BR>&nbsp;* initialized.&nbsp; If a required resource is not available yet, a driver can<BR>&nbsp;* request probing to be deferred by returning -EPROBE_DEFER from its probe hook<BR>&nbsp;*<BR>&nbsp;* Deferred probe maintains two lists of devices, a pending list and an active<BR>&nbsp;* list.&nbsp; A driver returning -EPROBE_DEFER causes the device to be added to the<BR>&nbsp;* pending list.&nbsp; A successful driver probe will trigger moving all devices<BR>&nbsp;* from the pending to the active list so that the workqueue will eventually<BR>&nbsp;* retry them.<BR>&nbsp;*<BR>&nbsp;* The deferred_probe_mutex must be held any time the deferred_probe_*_list<BR>&nbsp;* of the (struct device*)-&gt;p-&gt;deferred_probe pointers are manipulated<BR>&nbsp;*/