include/linux/mm_types.h </P>
<P><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#32" name=32>32</A><SPAN class=c>/*<BR>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#33" name=33>33</A> * Each physical page in the system has a struct page associated with<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#34" name=34>34</A> * it to keep track of whatever it is we are using the page for at the<BR>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#35" name=35>35</A> * moment. Note that we have no way to track which tasks are using<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#36" name=36>36</A> * a page, though if it is a pagecache page, rmap structures can tell us<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#37" name=37>37</A> * who is mapping it.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#38" name=38>38</A> *<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#39" name=39>39</A> * The objects in struct page are organized in double word blocks in<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#40" name=40>40</A> * order to allows us to use atomic double word operations on portions<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#41" name=41>41</A> * of struct page. That is currently only used by slub but the arrangement<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#42" name=42>42</A> * allows the use of atomic double word operations on the <A href="http://172.29.26.110:8080/source/s?path=flags/">flags</A>/<A href="http://172.29.26.110:8080/source/s?path=flags/mapping">mapping</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#43" name=43>43</A> * and lru list pointers also.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#44" name=44>44</A> */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#45" name=45>45</A><B>struct</B> <A class=xs name=page></A><A class=xs href="http://172.29.26.110:8080/source/s?refs=page&amp;project=Linux-v4.6">page</A> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#46" name=46>46</A>	<SPAN class=c>/* First double word block */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#47" name=47>47</A>	<B>unsigned</B> <B>long</B> <A class=xmb name=flags></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=flags&amp;project=Linux-v4.6">flags</A>;		<SPAN class=c>/* Atomic flags, some possibly<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#48" name=48>48</A>					 * updated asynchronously */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#49" name=49>49</A>	<B>union</B> {<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#50" name=50>50</A>		<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=address_space&amp;project=Linux-v4.6">address_space</A> *<A class=xmb name=mapping></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=mapping&amp;project=Linux-v4.6">mapping</A>;	<SPAN class=c>/* If low bit clear, points to<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#51" name=51>51</A>						 * inode address_space, or NULL.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#52" name=52>52</A>						 * If page mapped as anonymous<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#53" name=53>53</A>						 * memory, low bit is set, and<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#54" name=54>54</A>						 * it points to anon_vma object:<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#55" name=55>55</A>						 * see PAGE_MAPPING_ANON below.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#56" name=56>56</A>						 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#57" name=57>57</A>		<B>void</B> *<A class=xmb name=s_mem></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=s_mem&amp;project=Linux-v4.6">s_mem</A>;			<SPAN class=c>/* slab first object */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#58" name=58>58</A>		<A href="http://172.29.26.110:8080/source/s?defs=atomic_t&amp;project=Linux-v4.6">atomic_t</A> <A class=xmb name=compound_mapcount></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_mapcount&amp;project=Linux-v4.6">compound_mapcount</A>;	<SPAN class=c>/* first tail page */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#59" name=59>59</A>		<SPAN class=c>/* page_deferred_list().next	 -- second tail page */</SPAN><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#60" name=60>60</A>	};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#61" name=61>61</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#62" name=62>62</A>	<SPAN class=c>/* Second double word */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#63" name=63>63</A>	<B>struct</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#64" name=64>64</A>		<B>union</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#65" name=65>65</A>			<A href="http://172.29.26.110:8080/source/s?defs=pgoff_t&amp;project=Linux-v4.6">pgoff_t</A> <A class=xmb name=index></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=index&amp;project=Linux-v4.6">index</A>;		<SPAN class=c>/* Our offset within mapping. */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#66" name=66>66</A>			<B>void</B> *<A class=xmb name=freelist></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=freelist&amp;project=Linux-v4.6">freelist</A>;		<SPAN class=c>/* sl[aou]b first free object */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#67" name=67>67</A>			<SPAN class=c>/* page_deferred_list().prev	-- second tail page */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#68" name=68>68</A>		};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#69" name=69>69</A><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#70" name=70>70</A>		<B>union</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#71" name=71>71</A>#<B>if</B> <B>defined</B>(<A href="http://172.29.26.110:8080/source/s?defs=CONFIG_HAVE_CMPXCHG_DOUBLE&amp;project=Linux-v4.6">CONFIG_HAVE_CMPXCHG_DOUBLE</A>) &amp;&amp; \<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#72" name=72>72</A>	<B>defined</B>(<A href="http://172.29.26.110:8080/source/s?defs=CONFIG_HAVE_ALIGNED_STRUCT_PAGE&amp;project=Linux-v4.6">CONFIG_HAVE_ALIGNED_STRUCT_PAGE</A>)<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#73" name=73>73</A>			<SPAN class=c>/* Used for cmpxchg_double in slub */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#74" name=74>74</A>			<B>unsigned</B> <B>long</B> <A class=xmb name=counters></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=counters&amp;project=Linux-v4.6">counters</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#75" name=75>75</A>#<B>else</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#76" name=76>76</A>			<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#77" name=77>77</A>			 * Keep _refcount separate from slub cmpxchg_double<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#78" name=78>78</A>			 * data.&nbsp; As the rest of the double word is protected by<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#79" name=79>79</A>			 * slab_lock but _refcount is not.<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#80" name=80>80</A>			 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#81" name=81>81</A>			<B>unsigned</B> <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#counters">counters</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#82" name=82>82</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#83" name=83>83</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#84" name=84>84</A>			<B>struct</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#85" name=85>85</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#86" name=86>86</A>				<B>union</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#87" name=87>87</A>					<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#88" name=88>88</A>					 * Count of ptes mapped in mms, to show<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#89" name=89>89</A>					 * when page is mapped &amp; limit reverse<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#90" name=90>90</A>					 * map searches.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#91" name=91>91</A>					 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#92" name=92>92</A>					<A href="http://172.29.26.110:8080/source/s?defs=atomic_t&amp;project=Linux-v4.6">atomic_t</A> <A class=xmb name=_mapcount></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=_mapcount&amp;project=Linux-v4.6">_mapcount</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#93" name=93>93</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#94" name=94>94</A>					<B>struct</B> { <SPAN class=c>/* SLUB */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#95" name=95>95</A>						<B>unsigned</B> <A class=xmb name=inuse></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=inuse&amp;project=Linux-v4.6">inuse</A>:<SPAN class=n>16</SPAN>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#96" name=96>96</A>						<B>unsigned</B> <A class=xmb name=objects></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=objects&amp;project=Linux-v4.6">objects</A>:<SPAN class=n>15</SPAN>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#97" name=97>97</A>						<B>unsigned</B> <A class=xmb name=frozen></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=frozen&amp;project=Linux-v4.6">frozen</A>:<SPAN class=n>1</SPAN>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#98" name=98>98</A>					};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#99" name=99>99</A>					<B>int</B> <A class=xmb name=units></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=units&amp;project=Linux-v4.6">units</A>;	<SPAN class=c>/* SLOB */</SPAN><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#100" name=100>100</A>				};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#101" name=101>101</A>				<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#102" name=102>102</A>				 * Usage count, *USE WRAPPER FUNCTION*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#103" name=103>103</A>				 * when manual accounting. See <A href="http://172.29.26.110:8080/source/s?path=page_ref.h&amp;project=Linux-v4.6">page_ref.h</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#104" name=104>104</A>				 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#105" name=105>105</A>				<A href="http://172.29.26.110:8080/source/s?defs=atomic_t&amp;project=Linux-v4.6">atomic_t</A> <A class=xmb name=_refcount></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=_refcount&amp;project=Linux-v4.6">_refcount</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#106" name=106>106</A>			};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#107" name=107>107</A>			<B>unsigned</B> <B>int</B> <A class=xmb name=active></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=active&amp;project=Linux-v4.6">active</A>;	<SPAN class=c>/* SLAB */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#108" name=108>108</A>		};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#109" name=109>109</A>	};<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#110" name=110>110</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#111" name=111>111</A>	<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#112" name=112>112</A>	 * Third double word block<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#113" name=113>113</A>	 *<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#114" name=114>114</A>	 * WARNING: bit 0 of the first word encode PageTail(). That means<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#115" name=115>115</A>	 * the rest users of the storage space MUST NOT use the bit to<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#116" name=116>116</A>	 * avoid collision and false-positive PageTail().<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#117" name=117>117</A>	 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#118" name=118>118</A>	<B>union</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#119" name=119>119</A>		<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=list_head&amp;project=Linux-v4.6">list_head</A> <A class=xmb name=lru></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=lru&amp;project=Linux-v4.6">lru</A>;	<SPAN class=c>/* Pageout list, eg. active_list<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#120" name=120>120</A>					 * protected by zone-&gt;lru_lock !<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#121" name=121>121</A>					 * Can be used as a generic list<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#122" name=122>122</A>					 * by the page owner.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#123" name=123>123</A>					 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#124" name=124>124</A>		<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=dev_pagemap&amp;project=Linux-v4.6">dev_pagemap</A> *<A class=xmb name=pgmap></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pgmap&amp;project=Linux-v4.6">pgmap</A>; <SPAN class=c>/* ZONE_DEVICE pages are never on an<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#125" name=125>125</A>					&nbsp;&nbsp;&nbsp; * lru or handled by a slab<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#126" name=126>126</A>					&nbsp;&nbsp;&nbsp; * allocator, this points to the<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#127" name=127>127</A>					&nbsp;&nbsp;&nbsp; * hosting device page map.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#128" name=128>128</A>					&nbsp;&nbsp;&nbsp; */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#129" name=129>129</A>		<B>struct</B> {		<SPAN class=c>/* slub per cpu partial pages */</SPAN><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#130" name=130>130</A>			<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=page&amp;project=Linux-v4.6">page</A> *<A class=xmb name=next></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=next&amp;project=Linux-v4.6">next</A>;	<SPAN class=c>/* Next partial slab */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#131" name=131>131</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_64BIT&amp;project=Linux-v4.6">CONFIG_64BIT</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#132" name=132>132</A>			<B>int</B> <A class=xmb name=pages></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pages&amp;project=Linux-v4.6">pages</A>;	<SPAN class=c>/* Nr of partial slabs left */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#133" name=133>133</A>			<B>int</B> <A class=xmb name=pobjects></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pobjects&amp;project=Linux-v4.6">pobjects</A>;	<SPAN class=c>/* Approximate # of objects */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#134" name=134>134</A>#<B>else</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#135" name=135>135</A>			<B>short</B> <B>int</B> <A class=xmb name=pages></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pages&amp;project=Linux-v4.6">pages</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#136" name=136>136</A>			<B>short</B> <B>int</B> <A class=xmb name=pobjects></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pobjects&amp;project=Linux-v4.6">pobjects</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#137" name=137>137</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#138" name=138>138</A>		};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#139" name=139>139</A><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#140" name=140>140</A>		<B>struct</B> <A class=xmb name=rcu_head></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=rcu_head&amp;project=Linux-v4.6">rcu_head</A> <A class=xmb name=rcu_head></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=rcu_head&amp;project=Linux-v4.6">rcu_head</A>;	<SPAN class=c>/* Used by SLAB<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#141" name=141>141</A>						 * when destroying via RCU<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#142" name=142>142</A>						 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#143" name=143>143</A>		<SPAN class=c>/* Tail pages of compound page */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#144" name=144>144</A>		<B>struct</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#145" name=145>145</A>			<B>unsigned</B> <B>long</B> <A class=xmb name=compound_head></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_head&amp;project=Linux-v4.6">compound_head</A>; <SPAN class=c>/* If bit zero is set */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#146" name=146>146</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#147" name=147>147</A>			<SPAN class=c>/* First tail page only */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#148" name=148>148</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_64BIT&amp;project=Linux-v4.6">CONFIG_64BIT</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#149" name=149>149</A>			<SPAN class=c>/*<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#150" name=150>150</A>			 * On 64 bit system we have enough space in struct page<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#151" name=151>151</A>			 * to encode compound_dtor and compound_order with<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#152" name=152>152</A>			 * unsigned int. It can help compiler generate better or<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#153" name=153>153</A>			 * smaller code on some archtectures.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#154" name=154>154</A>			 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#155" name=155>155</A>			<B>unsigned</B> <B>int</B> <A class=xmb name=compound_dtor></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_dtor&amp;project=Linux-v4.6">compound_dtor</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#156" name=156>156</A>			<B>unsigned</B> <B>int</B> <A class=xmb name=compound_order></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_order&amp;project=Linux-v4.6">compound_order</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#157" name=157>157</A>#<B>else</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#158" name=158>158</A>			<B>unsigned</B> <B>short</B> <B>int</B> <A class=xmb name=compound_dtor></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_dtor&amp;project=Linux-v4.6">compound_dtor</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#159" name=159>159</A>			<B>unsigned</B> <B>short</B> <B>int</B> <A class=xmb name=compound_order></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=compound_order&amp;project=Linux-v4.6">compound_order</A>;<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#160" name=160>160</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#161" name=161>161</A>		};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#162" name=162>162</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#163" name=163>163</A>#<B>if</B> <B>defined</B>(<A href="http://172.29.26.110:8080/source/s?defs=CONFIG_TRANSPARENT_HUGEPAGE&amp;project=Linux-v4.6">CONFIG_TRANSPARENT_HUGEPAGE</A>) &amp;&amp; <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#USE_SPLIT_PMD_PTLOCKS">USE_SPLIT_PMD_PTLOCKS</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#164" name=164>164</A>		<B>struct</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#165" name=165>165</A>			<B>unsigned</B> <B>long</B> <A class=xmb name=__pad></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=__pad&amp;project=Linux-v4.6">__pad</A>;	<SPAN class=c>/* do not overlay pmd_huge_pte<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#166" name=166>166</A>						 * with compound_head to avoid<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#167" name=167>167</A>						 * possible bit 0 collision.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#168" name=168>168</A>						 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#169" name=169>169</A>			<A href="http://172.29.26.110:8080/source/s?defs=pgtable_t&amp;project=Linux-v4.6">pgtable_t</A> <A class=xmb name=pmd_huge_pte></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=pmd_huge_pte&amp;project=Linux-v4.6">pmd_huge_pte</A>; <SPAN class=c>/* protected by page-&gt;ptl */</SPAN><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#170" name=170>170</A>		};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#171" name=171>171</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#172" name=172>172</A>	};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#173" name=173>173</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#174" name=174>174</A>	<SPAN class=c>/* Remainder is not double word aligned */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#175" name=175>175</A>	<B>union</B> {<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#176" name=176>176</A>		<B>unsigned</B> <B>long</B> <A href="http://172.29.26.110:8080/source/s?defs=private&amp;project=Linux-v4.6">private</A>;		<SPAN class=c>/* Mapping-private opaque data:<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#177" name=177>177</A>					 	 * usually used for buffer_heads<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#178" name=178>178</A>						 * if PagePrivate set; used for<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#179" name=179>179</A>						 * swp_entry_t if PageSwapCache;<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#180" name=180>180</A>						 * indicates order in the buddy<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#181" name=181>181</A>						 * system if PG_buddy is set.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#182" name=182>182</A>						 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#183" name=183>183</A>#<B>if</B> <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#USE_SPLIT_PTE_PTLOCKS">USE_SPLIT_PTE_PTLOCKS</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#184" name=184>184</A>#<B>if</B> <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#ALLOC_SPLIT_PTLOCKS">ALLOC_SPLIT_PTLOCKS</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#185" name=185>185</A>		<A href="http://172.29.26.110:8080/source/s?defs=spinlock_t&amp;project=Linux-v4.6">spinlock_t</A> *<A class=xmb name=ptl></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=ptl&amp;project=Linux-v4.6">ptl</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#186" name=186>186</A>#<B>else</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#187" name=187>187</A>		<A href="http://172.29.26.110:8080/source/s?defs=spinlock_t&amp;project=Linux-v4.6">spinlock_t</A> <A class=xmb name=ptl></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=ptl&amp;project=Linux-v4.6">ptl</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#188" name=188>188</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#189" name=189>189</A>#<B>endif</B><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#190" name=190>190</A>		<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=kmem_cache&amp;project=Linux-v4.6">kmem_cache</A> *<A class=xmb name=slab_cache></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=slab_cache&amp;project=Linux-v4.6">slab_cache</A>;	<SPAN class=c>/* SL[AU]B: Pointer to slab */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#191" name=191>191</A>	};<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#192" name=192>192</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#193" name=193>193</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_MEMCG&amp;project=Linux-v4.6">CONFIG_MEMCG</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#194" name=194>194</A>	<B>struct</B> <A class=xmb name=mem_cgroup></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=mem_cgroup&amp;project=Linux-v4.6">mem_cgroup</A> *<A class=xmb name=mem_cgroup></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=mem_cgroup&amp;project=Linux-v4.6">mem_cgroup</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#195" name=195>195</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#196" name=196>196</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#197" name=197>197</A>	<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#198" name=198>198</A>	 * On machines where all RAM is mapped into kernel address space,<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#199" name=199>199</A>	 * we can simply calculate the virtual address. On machines with<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#200" name=200>200</A>	 * highmem some memory is mapped into kernel virtual memory<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#201" name=201>201</A>	 * dynamically, so we need a place to store that address.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#202" name=202>202</A>	 * Note that this field could be 16 bits on x86 ... ;)<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#203" name=203>203</A>	 *<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#204" name=204>204</A>	 * Architectures with slow multiplication can define<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#205" name=205>205</A>	 * WANT_PAGE_VIRTUAL in <A href="http://172.29.26.110:8080/source/s?path=asm/">asm</A>/<A href="http://172.29.26.110:8080/source/s?path=asm/page.h">page.h</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#206" name=206>206</A>	 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#207" name=207>207</A>#<B>if</B> <B>defined</B>(<A href="http://172.29.26.110:8080/source/s?defs=WANT_PAGE_VIRTUAL&amp;project=Linux-v4.6">WANT_PAGE_VIRTUAL</A>)<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#208" name=208>208</A>	<B>void</B> *<A href="http://172.29.26.110:8080/source/s?defs=virtual&amp;project=Linux-v4.6">virtual</A>;			<SPAN class=c>/* Kernel virtual address (NULL if<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#209" name=209>209</A>					&nbsp;&nbsp; not kmapped, ie. highmem) */</SPAN><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#210" name=210>210</A>#<B>endif</B> <SPAN class=c>/* WANT_PAGE_VIRTUAL */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#211" name=211>211</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#212" name=212>212</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_KMEMCHECK&amp;project=Linux-v4.6">CONFIG_KMEMCHECK</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#213" name=213>213</A>	<SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#214" name=214>214</A>	 * kmemcheck wants to track the status of each byte in a page; this<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#215" name=215>215</A>	 * is a pointer to such a status block. NULL if not tracked.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#216" name=216>216</A>	 */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#217" name=217>217</A>	<B>void</B> *<A class=xmb name=shadow></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=shadow&amp;project=Linux-v4.6">shadow</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#218" name=218>218</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#219" name=219>219</A><BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#220" name=220>220</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=LAST_CPUPID_NOT_IN_PAGE_FLAGS&amp;project=Linux-v4.6">LAST_CPUPID_NOT_IN_PAGE_FLAGS</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#221" name=221>221</A>	<B>int</B> <A class=xmb name=_last_cpupid></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=_last_cpupid&amp;project=Linux-v4.6">_last_cpupid</A>;<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#222" name=222>222</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#223" name=223>223</A>}<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#224" name=224>224</A><SPAN class=c>/*<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#225" name=225>225</A> * The struct page can be forced to be double word aligned so that atomic ops<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#226" name=226>226</A> * on double words work. The SLUB allocator can make use of such a feature.<BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#227" name=227>227</A> */</SPAN><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#228" name=228>228</A>#<B>ifdef</B> <A href="http://172.29.26.110:8080/source/s?defs=CONFIG_HAVE_ALIGNED_STRUCT_PAGE&amp;project=Linux-v4.6">CONFIG_HAVE_ALIGNED_STRUCT_PAGE</A><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#229" name=229>229</A>	<A href="http://172.29.26.110:8080/source/s?defs=__aligned&amp;project=Linux-v4.6">__aligned</A>(<SPAN class=n>2</SPAN> * <B>sizeof</B>(<B>unsigned</B> <B>long</B>))<BR><A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#230" name=230>230</A>#<B>endif</B><BR><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/mm_types.h#231" name=231>231</A>;