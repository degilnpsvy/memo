RCU's readers execute within <I><FONT class=clozed>read-side critical sections</FONT></I>, which are normally delimited by <FONT class=clozed><SPAN style="FONT-FAMILY: monospace, monospace">rcu_read_lock</SPAN> and <SPAN style="FONT-FAMILY: monospace, monospace">rcu_read_unlock</SPAN></FONT>. Any statement that is not within an RCU read-side critical section is said to be in a <I><FONT class=clozed>quiescent state</FONT></I>, and such statements are not permitted to <FONT class=clozed>hold references to RCU-protected data structures</FONT>, nor is <FONT class=clozed>the wait-for-readers operation required to wait for threads in quiescent states</FONT>. Any time period during which each thread resides at least once in a quiescent state is called a <SPAN class=cloze>[...]</SPAN>. By definition, any RCU read-side critical section in existence at the beginning of a given grace period must complete before the end of that grace period, which constitutes the fundamental guarantee provided by RCU. In addition, the wait-for-readers operation must wait for at least one grace period to elapse. It turns out that this guarantee can be provided with extremely small read-side overheads, in fact, in the limiting case that is actually realized by server-class Linux-kernel builds, the read-side overhead is exactly zero.<SUP id=cite_ref-2 class=reference><A href="https://en.wikipedia.org/wiki/Read-copy-update#cite_note-2">[1]</A></SUP>