/**<BR>&nbsp;* down_trylock - try to acquire the semaphore, without waiting<BR>&nbsp;* @sem: the semaphore to be acquired<BR>&nbsp;*<BR>&nbsp;* Try to acquire the semaphore atomically.&nbsp; Returns 0 if the semaphore has<BR>&nbsp;* been acquired successfully or 1 if it it cannot be acquired.<BR>&nbsp;*<BR>&nbsp;* NOTE: This return value is inverted from both spin_trylock and<BR>&nbsp;* mutex_trylock!&nbsp; Be careful about this when converting code.<BR>&nbsp;*<BR>&nbsp;* Unlike mutex_trylock, this function can be used from interrupt context,<BR>&nbsp;* and the semaphore can be released by any task or interrupt.<BR>&nbsp;*/<BR>int down_trylock(struct semaphore *sem)<BR>{<BR>&nbsp;unsigned long flags;<BR>&nbsp;int count;</P>
<P>&nbsp;raw_spin_lock_irqsave(&amp;sem-&gt;lock, flags);<BR>&nbsp;count = sem-&gt;count - 1;<BR>&nbsp;if (likely(count &gt;= 0))<BR>&nbsp;&nbsp;sem-&gt;count = count;<BR>&nbsp;raw_spin_unlock_irqrestore(&amp;sem-&gt;lock, flags);</P>
<P>&nbsp;return (count &lt; 0);<BR>}<BR>EXPORT_SYMBOL(down_trylock);