A3.5.1 Memory types 
<P></P>
<P><FONT class=extract>For each memory region, the most significant memory attribute specifies the memory type. There are three mutually exclusive memory types:<BR>&#8226; Normal<BR>&#8226; Device<BR>&#8226; Strongly-ordered.</FONT><BR>Normal and Device memory regions have additional attributes.<BR><FONT class=extract>Usually, memory used for program code and for data storage is Normal memory. Examples of Normal memory technologies are:<BR>&#8226; programmed Flash ROM<BR>&nbsp; Note<BR>&nbsp; During programming, Flash memory can be ordered more strictly than Normal memory.<BR>&#8226; ROM<BR>&#8226; SRAM<BR>&#8226; DRAM and DDR memory.<BR></FONT><FONT class=extract>System peripherals (I/O) generally conform to different access rules to Normal memory. Examples of I/O accesses are:<BR>&#8226; FIFOs where consecutive accesses<BR>&nbsp; &#8213; add queued values on write accesses<BR>&nbsp; &#8213; remove queued values on read accesses.<BR>&#8226; interrupt controller registers where an access can be used as an interrupt acknowledge, changing the state of the controller itself<BR>&#8226; memory controller configuration registers that are used to set up the timing and correctness of areas of Normal memory<BR>&#8226; memory-mapped peripherals, where accessing a memory location can cause side effects in the system.</FONT><BR><FONT class=extract>In ARMv7, regions of the memory map for these accesses are defined as Device or Strongly-ordered memory. To ensure system correctness, access rules for Device and Strongly-ordered memory are more restrictive than those for Normal memory:<BR>&#8226; both read and write accesses can have side effects<BR>&#8226; accesses must not be repeated, for example, on return from an exception<BR>&#8226; the number, order and sizes of the accesses must be maintained.<BR>In addition, for Strongly-ordered memory, all memory accesses are strictly ordered to correspond to the program order of the memory access instructions.</FONT>