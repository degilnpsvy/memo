<H2 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 22pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt"><FONT face=Cambria>4.7 Caches</FONT></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>The security extensions modify the behavior of the following cache maintenance instructions such that non-secure code is not able to invalidate dirty secure data, which would result in secure data corruption. It is IMPLEMENTATION DEFINED whether the DCIMVAC and DCISW operations when performed from the non-secure state:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style='FONT: 7pt "Times New Roman"'> </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Clean any data that may be secure before invalidating it.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style='FONT: 7pt "Times New Roman"'> </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Do not invalidate secure data. To allow potential micro-architectural optimizations, the remaining cache maintenance operations are relaxed such that these operations on secure data may be ignored if the operation was performed from the non-secure state.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>If the security attribution of memory is changed it is IMPLEMENTATION DEFINED whether cache maintenance operation are required to keep the system state valid. If required the sequence of cache maintenance operations is as follows:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>1) If the attribution of the address range is changing from secure to non-secure software must ensure the memory doesn&#8217;t contain any data that must to remain secure (eg by writing zeros the address range).</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>2) Execute a DSB instruction</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>3) Clean the affected lines in data or unified caches using the DCC* instructions</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>4) Execute a DSB instruction</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>5) Change the security attribution of the address range</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>6) Execute a DSB instruction</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>7) Invalidate the affected lines in all caches using the DCI* and ICI* instructions</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>8) Execute a context synchronization operation</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>NOTE: Since the architecture supports cache lines larger than the minimum SAU/IDAU region alignment of 32 bytes, it is possible that a cache line will contain data from both security domains in some implementations. To remove the need for multiple valid bits per cache line it is anticipated that such implementations will choose to clean any data that may be secure before invalidating the cache line.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Disabling a data or unified cache can cause dirty secure data to become invisible to code executing in the secure state, and as such could be used as a method of attack by non-secure code. To prevent this the data cache enable bit is banked between the security states.</FONT></SPAN>