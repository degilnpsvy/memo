<H3 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 22pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt"><FONT face=Calibri>4.8.9 IMPLEMENTATION DEFINED registers</FONT></SPAN></H3>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>The existing ARMv7-M architecture allows implementations to specify additional control registers (e.g. for TCM&#8217;s, or other features). If not properly protected many of these control registers could introduce new attack vectors, either directly be allowing an attacker to read or corrupt secure data/code, or indirectly be changing the execution time of secure code (which could be used as part of a timing attack to extract encryption keys or other sensitive data). To maintain consistence with the underlying architecture it is recommended that any sensitive fields with IMPLEMENTATION DEFINED registers are protected by one of the following methods:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style='FONT: 7pt "Times New Roman"'> </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Access restrictions &#8211; It may be possible to simply restrict access to the field from the non-secure state. This can take a number of different forms (listed below), whether a field or register is deemed as being sensitive may be determined statically and hardwired into an implementation, or it may be configurable in a similar way to the ICSR.PENDNMISET field.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">n<SPAN style='FONT: 7pt "Times New Roman"'>&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>No access &#8211; i.e. the sensitive field or register is defined as RAZ/WI when accessed from the non-secure state.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">n<SPAN style='FONT: 7pt "Times New Roman"'>&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Read only &#8211; For some configuration fields it may be useful to allow read access from the non-secure state</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Unprivileged accesses from either security state should raise a BusFault.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 11.0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style='FONT: 7pt "Times New Roman"'> </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>Banking &#8211; Where restricting access to a field is not practical the register should be banked so that the security states have independent control. The non-secure versions of the banked registers should be aliased so that they are accessible from the secure state. I.e. the IMPLEMENTATION DEFINE SCS register space should aliased to the range 0xE002EF90 -&gt; 0xE002EFCF.</FONT></SPAN>