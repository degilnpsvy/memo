A3.5.5 Device memory<BR><FONT class=extract>The Device memory type attribute defines memory locations where an access to the location can cause side effects, or where the value returned for a load can vary depending on the number of loads performed. memory-mapped peripherals and I/O locations are examples of memory regions that normally are marked as being Device.</FONT> 
<P></P>
<P><FONT class=extract>For explicit accesses from the processor to memory marked as Device:<BR>&#8226; all accesses occur at their program size<BR>&#8226; the number of accesses is the number specified by the program.</FONT></P>
<P><FONT class=extract>An implementation must not repeat an access to a Device memory location if the program has only one access to that location. In other words, accesses to Device memory locations are not restartable.</FONT></P>
<P><FONT class=extract>The architecture does not permit speculative accesses to memory marked as Device.</FONT></P>
<P><FONT class=extract>Address locations marked as Device are Non-cacheable. While writes to Device memory can be buffered, writes can be merged only where the merge maintains:<BR>&#8226; the number of accesses<BR>&#8226; the order of the accesses<BR>&#8226; the size of each access.</FONT></P>
<P><FONT class=extract>Multiple accesses to the same address must not change the number of accesses to that address. Coalescing of accesses is not permitted for accesses to Device memory.</FONT></P>
<P><FONT class=extract>When a Device memory operation has side effects that apply to Normal memory regions, software must use a Memory Barrier to ensure correct execution. An example is programming the configuration registers of a memory controller with respect to the memory accesses it controls.</FONT></P>
<P>All explicit accesses to Device memory must comply with the ordering requirements of accesses described in Ordering requirements for memory accesses on page A3-114.</P>
<P>An instruction that generates a sequence of accesses as described in Atomicity in the ARM architecture on page A3-101 might be abandoned as a result of an exception being taken during the sequence of accesses. On return from the exception the instruction is restarted, and therefore one or more of the memory locations might be accessed multiple times. This can result in repeated write accesses to a location that has been changed between the write accesses.</P>
<P><FONT class=extract>Note<BR>Do not use an instruction that generates a sequence of accesses to access Device memory if the instruction might restart after an exception and repeat any write accesses, see Exceptions in Load Multiple and Store Multiple operations on page B1-658 for more information.</FONT></P>
<P>Any unaligned access that is not faulted by the alignment restrictions and accesses Device memory has UNPREDICTABLE behavior.