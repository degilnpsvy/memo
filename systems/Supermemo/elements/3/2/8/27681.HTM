Single-copy atomicity 
<P></P>
<P><FONT class=extract>A read or write operation is single-copy atomic if the following conditions are both true:<BR>&#8226; After any number of write operations to an operand, the value of the operand is the value written by one of the write operations. It is impossible for part of the value of the operand to come from one write operation and another part of the value to come from a different write operation.<BR>&#8226; When a read operation and a write operation are made to the same operand, the value obtained by the read operation is one of:<BR>&nbsp;&nbsp;&nbsp; &#8213; the value of the operand before the write operation<BR>&nbsp;&nbsp;&nbsp; &#8213; the value of the operand after the write operation.<BR>&nbsp;&nbsp;&nbsp; It is never the case that the value of the read operation is partly the value of the operand before the write operation and partly the value of the operand after the write operation.</FONT><BR>&nbsp;&nbsp;&nbsp; <BR><FONT class=extract>In ARMv7-M, the single-copy atomic processor accesses are:<BR>&#8226; all byte accesses<BR>&#8226; all halfword accesses to halfword-aligned locations<BR>&#8226; all word accesses to word-aligned locations</FONT></P>
<P><FONT class=extract>LDM, LDC, LDC2, LDRD, STM, STC, STC2, STRD, PUSH, POP, VLDR, VSTR, VLDM, VSTM, VPUSH, and VPOP instructions are executed as a sequence of word-aligned word accesses. Each 32-bit word access is guaranteed to be single-copy atomic. A subsequence of two or more word accesses from the sequence might not exhibit single-copy atomicity.<BR>When an access is not single-copy atomic, it is executed as a sequence of smaller accesses, each of which is single-copy atomic, at least at the byte level.<BR>If an instruction is executed as a sequence of accesses according to these rules, some exceptions can be taken in the sequence and cause execution of the instruction to be abandoned.<BR>On exception return, the instruction that generated the sequence of accesses is re-executed and so any accesses that had already been performed before the exception was taken might be repeated, see Exceptions in Load Multiple and Store Multiple operations on page B1-658.</FONT></P>
<P><FONT class=extract>Note<BR>The exception behavior for these multiple access instructions means they are not suitable for use for writes to memory for the purpose of software synchronization.</FONT></P>
<P><FONT class=extract>For implicit accesses:<BR>&#8226; Cache linefills and evictions have no effect on the single-copy atomicity of explicit transactions or instruction fetches.<BR>&#8226; Instruction fetches are single-copy atomic at 16-bit granularity.</FONT>