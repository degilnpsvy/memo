B1.1 Introduction to the system level 
<P></P>
<P><FONT class=extract>The ARM architecture defines a hierarchy for software operation:<BR>&#8226; The lowest level is the application level, described in part A of this manual. In particular, Chapter A2 Application Level Programmers&#8217; Model describes the programmers model for applications. Application-level software is largely independent of the architecture profile.<BR>&#8226; The higher level is the system level, that includes support for the applications. The system level features and how they are supported, is significantly different in the different ARMv7 architecture profiles.</FONT></P>
<P>Part B of this manual describes the ARMv7-M architecture at the system level.</P>
<P>As stated in Privileged execution on page A2-49, programs can execute in a privileged or unprivileged manner. System level support requires privileged access, giving system software the access permissions required to configure and control the resources. Typically, an operating system provides this control, providing system services to the applications, either transparently, or through application initiated Supervisor calls. The operating system is also responsible for servicing interrupts and other system events, making exceptions a key component of the system level programmers&#8217; model.</P>
<P>In addition, ARMv7-M is a departure from the normal architecture evolution in that it has been designed to take the ARM architecture to lower cost or performance points than previously supported as well as having a strong migration path to ARMv7-R and the broad spectrum of embedded processing.</P>
<P>Note<BR>&#8226; In deeply embedded systems, particularly at low cost or performance points, there might be no clear distinction between an operating system and the applications, and software might be developed as a homogeneous codebase.<BR>&#8226; Appendix C Deprecated Features in ARMv7-M describes deprecated features of the ARMv7-M profile.