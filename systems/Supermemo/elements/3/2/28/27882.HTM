MPU pseudocode</P>
<P>The following pseudocode defines the operation of an ARMv7-M MPU. The terms used align with the MPU register names and bit field names described in Register support for PMSAv7 in the SCS on page B3-764.</P>
<P>// ValidateAddress()<BR>// =================</P>
<P>AddressDescriptor ValidateAddress(bits(32) address, boolean ispriv, boolean iswrite,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean isinstrfetch)</P>
<P>&nbsp;&nbsp;&nbsp; boolean isvectortablelookup; // TRUE if address associated with exception entry</P>
<P>&nbsp;&nbsp;&nbsp; AddressDescriptor result;<BR>&nbsp;&nbsp;&nbsp; Permissions perms;</P>
<P>&nbsp;&nbsp;&nbsp; result.physicaladdress = address;<BR>&nbsp;&nbsp;&nbsp; result.memattrs = DefaultMemoryAttributes(address);<BR>&nbsp;&nbsp;&nbsp; perms = DefaultPermissions(address);</P>
<P>&nbsp;&nbsp;&nbsp; hit = FALSE;&nbsp; // assume no valid MPU region and not using default memory map</P>
<P>&nbsp;&nbsp;&nbsp; isPPBaccess = (address&lt;31:20&gt; == '111000000000');</P>
<P>&nbsp;&nbsp;&nbsp; if isvectortablelookup OR isPPBaccess then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hit = TRUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // use default map for PPB and vector table lookups</P>
<P>&nbsp;&nbsp;&nbsp; elsif MPU_CTRL.ENABLE == '0' then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if MPU_CTRL.HFNMIENA == '1' then UNPREDICTABLE<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else hit = TRUE; // always use default map if MPU disabled</P>
<P>&nbsp;&nbsp;&nbsp; elsif MPU_CTRL.HFNMIENA == '0' AND (ExecutionPriority() &lt; 0) then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hit = TRUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // optionally use default for HardFault, NMI and FAULTMASK</P>
<P>&nbsp;&nbsp;&nbsp; else&nbsp; // MPU is enabled so check each individual region<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (MPU_CTRL.PRIVDEFENA == '1') &amp;&amp; ispriv then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hit = TRUE;&nbsp; // optional default as background for Privileged accesses</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for r = 0 to (UInt(MPU_TYPE.DREGION) - 1)&nbsp; // highest matching region wins<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits(16) size_enable&nbsp;&nbsp;&nbsp; = MPU_RASR[r]&lt;15:0&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits(32) base_address&nbsp;&nbsp; = MPU_RBAR[r];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits(16) access_control = MPU_RASR[r]&lt;31:16&gt;;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if size_enable&lt;0&gt; == '1' then&nbsp; // MPU region enabled so perform checks<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lsbit = UInt(size_enable&lt;5:1&gt;) + 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if lsbit &lt; 5 then UNPREDICTABLE;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (lsbit &lt; 8) &amp;&amp; (!IsZero(size_enable&lt;15:8&gt;)) then UNPREDICTABLE;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if lsbit == 32 || address&lt;31:lsbit&gt; == base_address&lt;31:lsbit&gt; then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subregion = UInt(address&lt;lsbit-1:lsbit-3&gt;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if size_enable&lt;subregion+8&gt; == '0' then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; texcb = access_control&lt;5:3,1:0&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S = access_control&lt;2&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perms.ap = access_control&lt;10:8&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perms.xn = access_control&lt;12&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.memattrs = DefaultTEXDecode(texcb,S);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hit = TRUE;</P>
<P>&nbsp;&nbsp;&nbsp; if address&lt;31:29&gt; == '111' then&nbsp; // enforce System space execute never<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perms.xn = TRUE;</P>
<P><BR>&nbsp;&nbsp;&nbsp; if hit then&nbsp; // perform check of acquired access permissions<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckPermission(perms, address, iswrite, ispriv, isinstrfetch);<BR>&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // generate fault if no MPU match or use of default not enabled<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if isinstrfetch then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMSR.IACCVIOL = '1';<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMSR.MMARVALID = '0';<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMSR.DACCVIOL = '1';<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMAR = address;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMSR.MMARVALID = '1';<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptionTaken(MemManage);</P>
<P>&nbsp;&nbsp;&nbsp; return result;</P>
<P>Access permission checking on page B2-700 defines the CheckPermission() function,