5.6.3 BX
<P></P>
<P>The existing instruction is modified as follows:</P>
<P>BX {NS} &lt;c&gt; &lt;Rm&gt;</P>
<P>m = UInt(Rm); allowNonSecure = NS == '1';<BR>if !IsSecure() &amp;&amp; allowNonSecure then UNDEFINED;<BR>if InITBlock() &amp;&amp; !LastInITBlock() then UNPREDICTABLE;</P>
<P>Operation:<BR>if ConditionPassed() then<BR>&nbsp; EncodingSpecificOperations();<BR>&nbsp; exc = BXWritePC(R[m], allowNonSecure);<BR>&nbsp; HandleException(exc);</P>
<P>If set to 1 the new NS field specifies that the branch is allowed to cause a transition from the secure to non-secure domain. This variant of the instruction should only be used where the additional steps required to make such a transition safe have been taken (See section 5.3). BX instructions that have NS set to 0 retain the ASRMv7-M behaiour with respect to the LSB of the target address (i.e. an INVSTATE UsageFault is raised if the LSB is 0). BX instructions that cause a transition from secure to non-secure and have NS set to 0 and the LSB of the target address set to 1 (i.e. BX instructions that don't raise an INVSTATE UsageFault) will result in a INVTRAN SecureFault (see section 5.2). The NS variant of the instruction is UNDEFINED from the non-secure state.