B1.3.2 Exceptions 
<P></P>
<P>An exception is a condition that changes the normal flow of control in a program. Exception behavior splits into two stages:</P>
<P>Exception generation<BR>&nbsp;&nbsp;&nbsp; When an exception event occurs and is presented to the processor<BR>Exception processing, or activation<BR>&nbsp;&nbsp;&nbsp; When the processor follows a sequence of exception entry, exception handler code execution, and exception return. The transition from exception generation to exception processing can be instantaneous.<BR>&nbsp;&nbsp;&nbsp; <BR><FONT class=extract>ARMv7-M defines the following exception categories:<BR>*Reset<BR>&nbsp;&nbsp;&nbsp; Reset is a special form of exception that, when asserted, terminates current execution in a potentially unrecoverable way. When reset is deasserted, execution restarts from a fixed point.<BR>*Supervisor call (SVCall)<BR>&nbsp;&nbsp;&nbsp; An exception caused explicitly by the SVC instruction. Application software uses the SVC instruction to make a call to an underlying operating system. This is called a Supervisor call. The SVC instruction enables the application to issue a Supervisor call that requires privileged access to the system and executes in program order with respect to the application.<BR>&nbsp;&nbsp;&nbsp; ARMv7-M also supports an interrupt-driven Supervisor-calling mechanism, PendSV, see Overview of the exceptions supported on page B1-631.<BR>*Fault<BR>&nbsp;&nbsp;&nbsp; A fault is an exception that results from an error condition in instruction execution. A fault can be reported synchronously or asynchronously to the instruction that caused it. In general, faults are reported synchronously. The Imprecise BusFault is an asynchronous fault supported in the ARMv7-M profile.<BR>&nbsp;&nbsp;&nbsp; A synchronous fault is always reported with the instruction that caused the fault. The architecture makes no guarantee about how an asynchronous fault is reported relative to the instruction that caused the fault.<BR>&nbsp;&nbsp;&nbsp; Synchronous debug monitor exceptions are faults. Debug watchpoints are asynchronous and are treated as an interrupt.<BR>*Interrupt<BR>&nbsp;&nbsp;&nbsp; An interrupt is an exception, other than a reset, fault or a supervisor call. All interrupts are asynchronous to the instruction stream. Typically interrupts are used by other components of the system that must communicate with the processor. This can include software running on another processor in the system.</FONT><BR>&nbsp;&nbsp;&nbsp; <BR><FONT class=extract>Each exception has:<BR>&#8226; An exception number.<BR>&#8226; A priority level.<BR>&#8226; A vector in memory that defines the entry point for execution on taking the exception. The value held in a vector is the address of the entry point of the exception handler, or Interrupt Service Routine (ISR), for the corresponding exception.</FONT></P>
<P><FONT class=extract>An exception, other than reset, has the following possible states:<BR>*Inactive<BR>&nbsp;&nbsp;&nbsp; An exception that is not pending or active.<BR>*Pending<BR>&nbsp;&nbsp;&nbsp; An exception that has been generated, but that the processor has not yet started processing. An exception is generated when the corresponding exception event occurs.<BR>*Active<BR>&nbsp;&nbsp;&nbsp; An exception for which the processor has started executing a corresponding exception handler, but has not returned from that handler. The handler for an active exception is either running or preempted by a the handler for a higher priority exception.<BR>*Active and pending<BR>&nbsp;&nbsp;&nbsp; One instance of the exception is active, and a second instance of the exception is pending.<BR>&nbsp;&nbsp;&nbsp; Only asynchronous exceptions can be active and pending. Any synchronous exception is either inactive, pending, or active.</FONT>