Exception return<BR>The processor executes the exception handler in Handler mode, and returns from the handler. On exception return:<BR>&#8226; If the exception state is active and pending:<BR>&nbsp; &#8213; if the exception has sufficient priority, it becomes active and the processor re-enters the exception handler<BR>&nbsp; &#8213; otherwise, it becomes pending.<BR>&#8226; If the exception state is active it becomes inactive.<BR>&#8226; The processor restores the information that it stacked on exception entry.<BR>&#8226; If the code that was preempted by the exception handler was running in Thread mode the processor changes to Thread mode.<BR>&#8226; The processor resumes execution of the code that was preempted by the exception handler.
<P></P>
<P>The Exception Return Link, a value stored in the link register on exception entry, determines the target of the exception return.</P>
<P>On an exception return, there can be a pending exception with sufficient priority to preempt the execution being returned to. This results in an exception entry sequence immediately after the exception return sequence. This is referred to as chaining the exceptions. Hardware can optimize chaining of exceptions to remove the need to restore and resave the key context state. This optimization is referred to as Tail-chaining, see Exceptions on exception return, and tail-chaining exceptions on page B1-664 for details.</P>
<P>Faults can occur during the exception return, for example as a result of a memory fault when popping previous state off the stack. The behavior in this and other cases is explained in Derived exceptions on exception entry on page B1-663.