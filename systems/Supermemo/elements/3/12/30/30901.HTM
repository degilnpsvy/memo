<H1 class=title>Exercise 10: What Was That?</H1>
<P id=p1>In Exercise 9 I threw you some new stuff, just to keep you on your toes. I showed you two ways to make a string that goes across multiple lines. In the first way, I put the characters <TT class="docutils literal">\n</TT> (backslash <TT class="docutils literal">n</TT>) between the names of the months. These two characters put a <TT class="docutils literal">new line character</TT> into the string at that point.</P>
<P id=p2>This <TT class="docutils literal">\</TT> (backslash) character encodes difficult-to-type characters into a string. There are various "escape sequences" available for different characters you might want to use. We'll try a few of these sequences so you can see what I mean.</P>
<P id=p3>An important escape sequence is to escape a single-quote <TT class="docutils literal">'</TT> or double-quote <TT class="docutils literal">"</TT>. Imagine you have a string that uses double-quotes and you want to put a double-quote inside the string. If you write <TT class="docutils literal">"I "understand" joe."</TT> then Python will get confused because it will think the <TT class="docutils literal">"</TT> around <TT class="docutils literal">"understand"</TT> actually <EM>ends</EM> the string. You need a way to tell Python that the <TT class="docutils literal">"</TT> inside the string isn't a <EM>real</EM> double-quote.</P>
<P id=p4>To solve this problem you <EM>escape</EM> double-quotes and single-quotes so Python knows to include in the string. Here's an example:</P><PRE class="code python literal-block"><FONT class=extract><SPAN class="literal string double">"I am 6'2</SPAN><SPAN class="literal string escape">\"</SPAN><SPAN class="literal string double"> tall."</SPAN>  <SPAN class="comment single"># escape double-quote inside string</SPAN>
<SPAN class="literal string single">'I am 6</SPAN><SPAN class="literal string escape">\'</SPAN><SPAN class="literal string single">2" tall.'</SPAN>  <SPAN class="comment single"># escape single-quote inside string</SPAN></FONT>
</PRE>
<P id=p5>The second way is by using triple-quotes, which is just <TT class="docutils literal">"""</TT> and works like a string, but you also can put as many lines of text as you want until you type <TT class="docutils literal">"""</TT> again. We'll also play with these.</P>
<TABLE class=highlighttable>
<TBODY>
<TR></TR></TBODY></TABLE>
<TABLE class=highlighttable>
<TBODY>
<TR>
<TD class=code>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex10.py-idio.html-1></A><SPAN class=n>tabby_cat</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"</SPAN><SPAN class=se>\t</SPAN><SPAN class=s2>I'm tabbed in."</SPAN>
<A name=python--ex10.py-idio.html-2></A><SPAN class=n>persian_cat</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"I'm split</SPAN><SPAN class=se>\n</SPAN><SPAN class=s2>on a line."</SPAN>
<A name=python--ex10.py-idio.html-3></A><SPAN class=n>backslash_cat</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"I'm </SPAN><SPAN class=se>\\</SPAN><SPAN class=s2> a </SPAN><SPAN class=se>\\</SPAN><SPAN class=s2> cat."</SPAN>
<A name=python--ex10.py-idio.html-4></A>
<A name=python--ex10.py-idio.html-5></A><SPAN class=n>fat_cat</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"""</SPAN>
<A name=python--ex10.py-idio.html-6></A><SPAN class=s2>I'll do a list:</SPAN>
<A name=python--ex10.py-idio.html-7></A><SPAN class=se>\t</SPAN><SPAN class=s2>* Cat food</SPAN>
<A name=python--ex10.py-idio.html-8></A><SPAN class=se>\t</SPAN><SPAN class=s2>* Fishies</SPAN>
<A name=python--ex10.py-idio.html-9></A><SPAN class=se>\t</SPAN><SPAN class=s2>* Catnip</SPAN><SPAN class=se>\n\t</SPAN><SPAN class=s2>* Grass</SPAN>
<A name=python--ex10.py-idio.html-10></A><SPAN class=s2>"""</SPAN>
<A name=python--ex10.py-idio.html-11></A>
<A name=python--ex10.py-idio.html-12></A><SPAN class=k>print</SPAN> <SPAN class=n>tabby_cat</SPAN>
<A name=python--ex10.py-idio.html-13></A><SPAN class=k>print</SPAN> <SPAN class=n>persian_cat</SPAN>
<A name=python--ex10.py-idio.html-14></A><SPAN class=k>print</SPAN> <SPAN class=n>backslash_cat</SPAN>
<A name=python--ex10.py-idio.html-15></A><SPAN class=k>print</SPAN> <SPAN class=n>fat_cat</SPAN>
</PRE></DIV></TD></TR></TBODY></TABLE>
<DIV id=what-you-should-see class=section>
<H1>What You Should See</H1>
<P id=p6>Look for the tab characters that you made. In this exercise the spacing is important to get right.</P><PRE class="code bash literal-block">$ python ex10.py
        I<SPAN class="literal string single">'m tabbed in.
I'</SPAN>m split
on a line.
I<SPAN class="literal string single">'m \ a \ cat.

I'</SPAN>ll <SPAN class=keyword>do</SPAN> a list:
        * Cat food
        * Fishies
        * Catnip
        * Grass
</PRE></DIV>
<DIV id=escape-sequences class=section>
<H1>Escape Sequences</H1>
<P id=p7>This is all of the escape sequences Python supports. You may not use many of these, but memorize their format and what they do anyway. Try them out in some strings to see if you can make them work.</P>
<TABLE class=docutils border=1>
<COLGROUP>
<COL width="21%">
<COL width="79%"></COLGROUP>
<THEAD vAlign=bottom>
<TR>
<TH class=head><FONT class=extract>Escape</FONT></TH>
<TH class=head><FONT class=extract>What it does.</FONT></TH></TR></THEAD>
<TBODY vAlign=top>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\\</FONT></TT></TD>
<TD><FONT class=extract>Backslash (\)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\'</FONT></TT></TD>
<TD><FONT class=extract>Single-quote (')</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\"</FONT></TT></TD>
<TD><FONT class=extract>Double-quote (")</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\a</FONT></TT></TD>
<TD><FONT class=extract>ASCII bell (BEL)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\b</FONT></TT></TD>
<TD><FONT class=extract>ASCII backspace (BS)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\f</FONT></TT></TD>
<TD><FONT class=extract>ASCII formfeed (FF)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\n</FONT></TT></TD>
<TD><FONT class=extract>ASCII linefeed (LF)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\N{name}</FONT></TT></TD>
<TD><FONT class=extract>Character named name in the Unicode database (Unicode only)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\r</FONT></TT></TD>
<TD><FONT class=extract>Carriage Return (CR)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\t</FONT></TT></TD>
<TD><FONT class=extract>Horizontal Tab (TAB)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\uxxxx</FONT></TT></TD>
<TD><FONT class=extract>Character with 16-bit hex value xxxx (u'' string only)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\Uxxxxxxxx</FONT></TT></TD>
<TD><FONT class=extract>Character with 32-bit hex value xxxxxxxx (u'' string only)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\v</FONT></TT></TD>
<TD><FONT class=extract>ASCII vertical tab (VT)</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\ooo</FONT></TT></TD>
<TD><FONT class=extract>Character with octal value ooo</FONT></TD></TR>
<TR>
<TD><TT class="docutils literal"><FONT class=extract>\xhh</FONT></TT></TD>
<TD><FONT class=extract>Character with hex value hh</FONT></TD></TR></TBODY></TABLE>
<DIV class=note>
<P id=p8 class="first admonition-title">Note</P>
<P id=p9 class=last>If you use <TT class="docutils literal">\U</TT> or <TT class="docutils literal">\u</TT> then you'll need to use a unicode string in <TT class="docutils literal"><SPAN class=pre>u'\U0001F47E'</SPAN></TT>. Put a <TT class="docutils literal">u</TT> in front of the <TT class="docutils literal">''</TT> (single-quotes) or <TT class="docutils literal">""</TT> (double-quotes).</P></DIV>
<P id=p10>Here's a tiny piece of fun code to try out:</P><PRE class="code python literal-block"><SPAN class=keyword>while</SPAN> <SPAN class="name builtin pseudo">True</SPAN><SPAN class=punctuation>:</SPAN>
    <SPAN class=keyword>for</SPAN> <SPAN class=name>i</SPAN> <SPAN class="operator word">in</SPAN> <SPAN class=punctuation>[</SPAN><SPAN class="literal string double">"/"</SPAN><SPAN class=punctuation>,</SPAN><SPAN class="literal string double">"-"</SPAN><SPAN class=punctuation>,</SPAN><SPAN class="literal string double">"|"</SPAN><SPAN class=punctuation>,</SPAN><SPAN class="literal string double">"</SPAN><SPAN class="literal string escape">\\</SPAN><SPAN class="literal string double">"</SPAN><SPAN class=punctuation>,</SPAN><SPAN class="literal string double">"|"</SPAN><SPAN class=punctuation>]:</SPAN>
        <SPAN class=keyword>print</SPAN> <SPAN class="literal string double">"</SPAN><SPAN class="literal string interpol">%s</SPAN><SPAN class="literal string escape">\r</SPAN><SPAN class="literal string double">"</SPAN> <SPAN class=operator>%</SPAN> <SPAN class=name>i</SPAN><SPAN class=punctuation>,</SPAN>
</PRE></DIV>
<DIV id=study-drills class=section>
<H1>Study Drills</H1>
<OL class="arabic simple">
<LI>Memorize all the escape sequences by putting them on flash cards. 
<LI>Use <TT class="docutils literal">'''</TT> (triple-single-quote) instead. Can you see why you might use that instead of <TT class="docutils literal">"""</TT>? 
<LI>Combine escape sequences and format strings to create a more complex format. 
<LI>Remember the <TT class="docutils literal">%r</TT> format? Combine <TT class="docutils literal">%r</TT> with double-quote and single-quote escapes and print them out. Compare %r with %s. Notice how %r prints it the way you'd write it in your file, but %s prints it the way you'd like to see it?</LI></OL></DIV>
<DIV id=common-student-questions class=section>
<H1>Common Student Questions</H1>
<DL class=docutils>
<DT>What if I wanted to start the months on a new line? 
<DD>
<P id=p11 class=first>You simply start the string with <TT class="docutils literal">\n</TT> like this:</P><PRE class="last literal-block">"\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"
</PRE>
<DT>I still haven't completely figured out the last exercise. Should I continue? 
<DD>Yes, keep going. Instead of stopping, take notes listing things you don't understand for each exercise. Periodically go through your notes and see if you can figure these things out after you've completed more exercises. Sometimes though you may need to go back a few exercises and do them again. 
<DT>What makes <TT class="docutils literal">\\</TT> special compared to the other ones? 
<DD>It's simply the way you would write out one backslash (<TT class="docutils literal">\</TT>) character. Think about why you would need this. 
<DT>When I write <TT class="docutils literal">//</TT> or <TT class="docutils literal">/n</TT> it doesn't work. 
<DD>That's because you are using a forward-slash <TT class="docutils literal">/</TT> and not a backslash <TT class="docutils literal">\</TT>. They are different characters that do very different things. 
<DT>When I use a <TT class="docutils literal">%r</TT> format none of the escape sequences work. 
<DD>That's because <TT class="docutils literal">%r</TT> is printing out the raw representation of what you typed, which is going to include the original escape sequences. Use <TT class="docutils literal">%s</TT> instead. Always remember this: <TT class="docutils literal">%r</TT> is for debugging, <TT class="docutils literal">%s</TT> is for displaying. 
<DT>I don't get Study Drill 3. What do you mean by "combine" escape sequences and formats? 
<DD>One concept I need you to understand is that each of these exercises can be combined to solve problems. Take what you know about format strings and write some new code that uses format strings <EM>and</EM> the escape sequences from this exercise. 
<DT>What's better, <TT class="docutils literal">'''</TT> or <TT class="docutils literal">"""</TT>? 
<DD>It's entirely based on style. Go with the <TT class="docutils literal">'''</TT> (triple-single-quote) style for now but be ready to use either depending on what feels best or what everyone else is doing.</DD></DL></DIV>