D2.2.172 <FONT class=extract>RETPSR, Combined Exception Return Program Status Registers</FONT> 
<P></P>
<P><FONT class=extract>The RETPSR characteristics are:<BR>Purpose: Value pushed to the stack on exception entry. On exception return this is used to restore the flags and other architectural state. This payload is also used for FNC_RETURN stacking, however in this case only some of the fields are used. See FunctionReturn() for details.<BR>Usage constraints: None.<BR>Configurations: All.<BR>Attributes: 32-bit payload.</FONT></P>
<P>N, bit [31]<BR>Negative flag. Value corresponding to APSR.N.</P>
<P>Z, bit [30]<BR>Zero flag. Value corresponding to APSR.Z.</P>
<P>C, bit [29]<BR>Carry flag. Value corresponding to APSR.C.</P>
<P>V, bit [28]<BR>Overflow flag. Value corresponding to APSR.V.</P>
<P>Q, bit [27]<BR>Saturate flag. Value corresponding to APSR.Q.</P>
<P>T, bit [24]<BR>T32 state. Value corresponding to EPSR.T.</P>
<P>Bits [23:21]<BR>Reserved, RES0.</P>
<P>SFPA, bit [20]<BR>Secure floating-point active. Value corresponding to CONTROL.SFPA.</P>
<P>GE, bits [19:16]<BR>Greater-than or equal flag. Value corresponding to APSR.GE.</P>
<P>IT, bits [15:10,26:25], when {RETPSR[26:25], RETPSR[11:10]} != 0<BR>If-then flags. Value corresponding to EPSR.IT.</P>
<P>ICI, bits [26:25,15:10], when {RETPSR[26:25], RETPSR[11:10]} == 0<BR>Interrupt continuation flags. Value corresponding to EPSR.ICI.</P>
<P>SPREALIGN, bit [9]<BR>Stack-pointer re-align. Indicates whether the SP was re-aligned to an 8-byte alignment on exception entry.<BR>The possible values of this bit are:<BR>0 The stack pointer was 8-byte aligned before exception entry began, no special handling is required on exception return.<BR>1 The stack pointer was only 4-byte aligned before exception entry. The exception entry realigned SP to 8-byte alignment by increasing the stack frame size by 4-bytes.</P>
<P>Exception, bits [8:0]<BR>Exception number. Value corresponding to IPSR.Exception.