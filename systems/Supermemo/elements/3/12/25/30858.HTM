void arm_v7m_cpu_do_interrupt(CPUState *cs)<BR>{<BR>&nbsp;&nbsp;&nbsp; ARMCPU *cpu = ARM_CPU(cs);<BR>&nbsp;&nbsp;&nbsp; CPUARMState *env = &amp;cpu-&gt;env;<BR>&nbsp;&nbsp;&nbsp; uint32_t xpsr = xpsr_read(env);<BR>&nbsp;&nbsp;&nbsp; uint32_t lr;<BR>&nbsp;&nbsp;&nbsp; uint32_t addr; 
<P></P>
<P>&nbsp;&nbsp;&nbsp; arm_log_exception(cs-&gt;exception_index);</P>
<P>&nbsp;&nbsp;&nbsp; lr = 0xfffffff1;<BR>&nbsp;&nbsp;&nbsp; if (env-&gt;v7m.current_sp)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lr |= 4;<BR>&nbsp;&nbsp;&nbsp; if (env-&gt;v7m.exception == 0)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lr |= 8;</P>
<P>&nbsp;&nbsp;&nbsp; /* For exceptions we just mark as pending on the NVIC, and let that<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handle it.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; /* TODO: Need to escalate if the current priority is higher than the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; one we're raising.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; switch (cs-&gt;exception_index) {<BR>&nbsp;&nbsp;&nbsp; case EXCP_UDEF:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; armv7m_nvic_set_pending(env-&gt;nvic, ARMV7M_EXCP_USAGE);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; case EXCP_SWI:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* The PC already points to the next instruction.&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; armv7m_nvic_set_pending(env-&gt;nvic, ARMV7M_EXCP_SVC);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; case EXCP_PREFETCH_ABORT:<BR>&nbsp;&nbsp;&nbsp; case EXCP_DATA_ABORT:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* TODO: if we implemented the MPU registers, this is where we<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * should set the MMFAR, etc from exception.fsr and exception.vaddress.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; armv7m_nvic_set_pending(env-&gt;nvic, ARMV7M_EXCP_MEM);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; case EXCP_BKPT:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (semihosting_enabled()) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int nr;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nr = arm_lduw_code(env, env-&gt;regs[15], arm_sctlr_b(env)) &amp; 0xff;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (nr == 0xab) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;regs[15] += 2;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; qemu_log_mask(CPU_LOG_INT,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "...handling as semihosting call 0x%x\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;regs[0]);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;regs[0] = do_arm_semihosting(env);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; armv7m_nvic_set_pending(env-&gt;nvic, ARMV7M_EXCP_DEBUG);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; case EXCP_IRQ:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;v7m.exception = armv7m_nvic_acknowledge_irq(env-&gt;nvic);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<BR>&nbsp;&nbsp;&nbsp; case EXCP_EXCEPTION_EXIT:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do_v7m_exception_exit(env);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; default:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu_abort(cs, "Unhandled exception 0x%x\n", cs-&gt;exception_index);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; /* Never happens.&nbsp; Keep compiler happy.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; /* Align stack pointer.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; /* ??? Should only do this if Configuration Control Register<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; STACKALIGN bit is set.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; if (env-&gt;regs[13] &amp; 4) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;regs[13] -= 4;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xpsr |= 0x200;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; /* Switch to the handler mode.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, xpsr);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[15]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[14]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[12]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[3]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[2]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[1]);<BR>&nbsp;&nbsp;&nbsp; v7m_push(env, env-&gt;regs[0]);<BR>&nbsp;&nbsp;&nbsp; switch_v7m_sp(env, 0);<BR>&nbsp;&nbsp;&nbsp; /* Clear IT bits */<BR>&nbsp;&nbsp;&nbsp; env-&gt;condexec_bits = 0;<BR>&nbsp;&nbsp;&nbsp; env-&gt;regs[14] = lr;<BR>&nbsp;&nbsp;&nbsp; addr = ldl_phys(cs-&gt;as, env-&gt;v7m.vecbase + env-&gt;v7m.exception * 4);<BR>&nbsp;&nbsp;&nbsp; env-&gt;regs[15] = addr &amp; 0xfffffffe;<BR>&nbsp;&nbsp;&nbsp; env-&gt;thumb = addr &amp; 1;<BR>}