/* Sign/zero extend */<BR>uint32_t HELPER(sxtb16)(uint32_t x)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint32_t res;<BR>&nbsp;&nbsp;&nbsp; res = (uint16_t)(int8_t)x;<BR>&nbsp;&nbsp;&nbsp; res |= (uint32_t)(int8_t)(x &gt;&gt; 16) &lt;&lt; 16;<BR>&nbsp;&nbsp;&nbsp; return res;<BR>}</P>
<P>uint32_t HELPER(uxtb16)(uint32_t x)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint32_t res;<BR>&nbsp;&nbsp;&nbsp; res = (uint16_t)(uint8_t)x;<BR>&nbsp;&nbsp;&nbsp; res |= (uint32_t)(uint8_t)(x &gt;&gt; 16) &lt;&lt; 16;<BR>&nbsp;&nbsp;&nbsp; return res;<BR>}</P>
<P>uint32_t HELPER(clz)(uint32_t x)<BR>{<BR>&nbsp;&nbsp;&nbsp; return clz32(x);<BR>}</P>
<P>int32_t HELPER(sdiv)(int32_t num, int32_t den)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (den == 0)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<BR>&nbsp;&nbsp;&nbsp; if (num == INT_MIN &amp;&amp; den == -1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return INT_MIN;<BR>&nbsp;&nbsp;&nbsp; return num / den;<BR>}</P>
<P>uint32_t HELPER(udiv)(uint32_t num, uint32_t den)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (den == 0)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<BR>&nbsp;&nbsp;&nbsp; return num / den;<BR>}</P>
<P>uint32_t HELPER(rbit)(uint32_t x)<BR>{<BR>&nbsp;&nbsp;&nbsp; return revbit32(x);<BR>}</P>
<P>#if defined(CONFIG_USER_ONLY)</P>
<P>/* These should probably raise undefined insn exceptions.&nbsp; */<BR>void HELPER(v7m_msr)(CPUARMState *env, uint32_t reg, uint32_t val)<BR>{<BR>&nbsp;&nbsp;&nbsp; ARMCPU *cpu = arm_env_get_cpu(env);</P>
<P>&nbsp;&nbsp;&nbsp; cpu_abort(CPU(cpu), "v7m_msr %d\n", reg);<BR>}</P>
<P>uint32_t HELPER(v7m_mrs)(CPUARMState *env, uint32_t reg)<BR>{<BR>&nbsp;&nbsp;&nbsp; ARMCPU *cpu = arm_env_get_cpu(env);</P>
<P>&nbsp;&nbsp;&nbsp; cpu_abort(CPU(cpu), "v7m_mrs %d\n", reg);<BR>&nbsp;&nbsp;&nbsp; return 0;<BR>}