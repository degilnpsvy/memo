#ifndef CONFIG_USER_ONLY</P>
<P>static inline bool arm_ccnt_enabled(CPUARMState *env)<BR>{<BR>&nbsp;&nbsp;&nbsp; /* This does not support checking PMCCFILTR_EL0 register */</P>
<P>&nbsp;&nbsp;&nbsp; if (!(env-&gt;cp15.c9_pmcr &amp; PMCRE)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; return true;<BR>}</P>
<P>void pmccntr_sync(CPUARMState *env)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint64_t temp_ticks;</P>
<P>&nbsp;&nbsp;&nbsp; temp_ticks = muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);</P>
<P>&nbsp;&nbsp;&nbsp; if (env-&gt;cp15.c9_pmcr &amp; PMCRD) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Increment once every 64 processor clock cycles */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp_ticks /= 64;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (arm_ccnt_enabled(env)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;cp15.c15_ccnt = temp_ticks - env-&gt;cp15.c15_ccnt;<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>static void pmcr_write(CPUARMState *env, const ARMCPRegInfo *ri,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t value)<BR>{<BR>&nbsp;&nbsp;&nbsp; pmccntr_sync(env);</P>
<P>&nbsp;&nbsp;&nbsp; if (value &amp; PMCRC) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* The counter has been reset */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;cp15.c15_ccnt = 0;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; /* only the DP, X, D and E bits are writable */<BR>&nbsp;&nbsp;&nbsp; env-&gt;cp15.c9_pmcr &amp;= ~0x39;<BR>&nbsp;&nbsp;&nbsp; env-&gt;cp15.c9_pmcr |= (value &amp; 0x39);</P>
<P>&nbsp;&nbsp;&nbsp; pmccntr_sync(env);<BR>}</P>
<P>static uint64_t pmccntr_read(CPUARMState *env, const ARMCPRegInfo *ri)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint64_t total_ticks;</P>
<P>&nbsp;&nbsp;&nbsp; if (!arm_ccnt_enabled(env)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Counter is disabled, do not change value */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return env-&gt;cp15.c15_ccnt;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; total_ticks = muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);</P>
<P>&nbsp;&nbsp;&nbsp; if (env-&gt;cp15.c9_pmcr &amp; PMCRD) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Increment once every 64 processor clock cycles */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total_ticks /= 64;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; return total_ticks - env-&gt;cp15.c15_ccnt;<BR>}</P>
<P>static void pmccntr_write(CPUARMState *env, const ARMCPRegInfo *ri,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t value)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint64_t total_ticks;</P>
<P>&nbsp;&nbsp;&nbsp; if (!arm_ccnt_enabled(env)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Counter is disabled, set the absolute value */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env-&gt;cp15.c15_ccnt = value;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; total_ticks = muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);</P>
<P>&nbsp;&nbsp;&nbsp; if (env-&gt;cp15.c9_pmcr &amp; PMCRD) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Increment once every 64 processor clock cycles */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total_ticks /= 64;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; env-&gt;cp15.c15_ccnt = total_ticks - value;<BR>}</P>
<P>static void pmccntr_write32(CPUARMState *env, const ARMCPRegInfo *ri,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t value)<BR>{<BR>&nbsp;&nbsp;&nbsp; uint64_t cur_val = pmccntr_read(env, NULL);</P>
<P>&nbsp;&nbsp;&nbsp; pmccntr_write(env, ri, deposit64(cur_val, 0, 32, value));<BR>}</P>
<P>#else /* CONFIG_USER_ONLY */</P>
<P>void pmccntr_sync(CPUARMState *env)<BR>{<BR>}</P>
<P>#endif