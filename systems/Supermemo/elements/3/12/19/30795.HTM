void init_cpreg_list(ARMCPU *cpu)<BR>{<BR>&nbsp;&nbsp;&nbsp; /* Initialise the cpreg_tuples[] array based on the cp_regs hash.<BR>&nbsp;&nbsp;&nbsp;&nbsp; * Note that we require cpreg_tuples[] to be sorted by key ID.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; GList *keys;<BR>&nbsp;&nbsp;&nbsp; int arraylen;</P>
<P>&nbsp;&nbsp;&nbsp; keys = g_hash_table_get_keys(cpu-&gt;cp_regs);<BR>&nbsp;&nbsp;&nbsp; keys = g_list_sort(keys, cpreg_key_compare);</P>
<P>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_array_len = 0;</P>
<P>&nbsp;&nbsp;&nbsp; g_list_foreach(keys, count_cpreg, cpu);</P>
<P>&nbsp;&nbsp;&nbsp; arraylen = cpu-&gt;cpreg_array_len;<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_indexes = g_new(uint64_t, arraylen);<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_values = g_new(uint64_t, arraylen);<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_vmstate_indexes = g_new(uint64_t, arraylen);<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_vmstate_values = g_new(uint64_t, arraylen);<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_vmstate_array_len = cpu-&gt;cpreg_array_len;<BR>&nbsp;&nbsp;&nbsp; cpu-&gt;cpreg_array_len = 0;</P>
<P>&nbsp;&nbsp;&nbsp; g_list_foreach(keys, add_cpreg_to_list, cpu);</P>
<P>&nbsp;&nbsp;&nbsp; assert(cpu-&gt;cpreg_array_len == arraylen);</P>
<P>&nbsp;&nbsp;&nbsp; g_list_free(keys);<BR>}