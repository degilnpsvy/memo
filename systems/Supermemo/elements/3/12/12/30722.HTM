# cpu-exec-common.c
<P></P>
<P>/*<BR>&nbsp;*&nbsp; emulator main execution loop<BR>&nbsp;*<BR>&nbsp;*&nbsp; Copyright (c) 2003-2005 Fabrice Bellard<BR>&nbsp;*<BR>&nbsp;* This library is free software; you can redistribute it and/or<BR>&nbsp;* modify it under the terms of the GNU Lesser General Public<BR>&nbsp;* License as published by the Free Software Foundation; either<BR>&nbsp;* version 2 of the License, or (at your option) any later version.<BR>&nbsp;*<BR>&nbsp;* This library is distributed in the hope that it will be useful,<BR>&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of<BR>&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp; See the GNU<BR>&nbsp;* Lesser General Public License for more details.<BR>&nbsp;*<BR>&nbsp;* You should have received a copy of the GNU Lesser General Public<BR>&nbsp;* License along with this library; if not, see &lt;<A href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</A>&gt;.<BR>&nbsp;*/</P>
<P></P>
<P>#include "qemu/osdep.h"<BR>#include "cpu.h"<BR>#include "sysemu/cpus.h"<BR>#include "exec/exec-all.h"<BR>#include "exec/memory-internal.h"</P>
<P>bool exit_request;<BR>CPUState *tcg_current_cpu;</P>
<P>/* exit the current TB, but without causing any exception to be raised */<BR>void cpu_loop_exit_noexc(CPUState *cpu)<BR>{<BR>&nbsp;&nbsp;&nbsp; /* XXX: restore cpu registers saved in host registers */</P>
<P>&nbsp;&nbsp;&nbsp; cpu-&gt;exception_index = -1;<BR>&nbsp;&nbsp;&nbsp; siglongjmp(cpu-&gt;jmp_env, 1);<BR>}</P>
<P>#if defined(CONFIG_SOFTMMU)<BR>void cpu_reloading_memory_map(void)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (qemu_in_vcpu_thread()) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* The guest can in theory prolong the RCU critical section as long<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * as it feels like. The major problem with this is that because it<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * can do multiple reconfigurations of the memory map within the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * critical section, we could potentially accumulate an unbounded<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * collection of memory data structures awaiting reclamation.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Because the only thing we're currently protecting with RCU is the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * memory data structures, it's sufficient to break the critical section<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * in this callback, which we know will get called every time the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * memory map is rearranged.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (If we add anything else in the system that uses RCU to protect<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * its data structures, we will need to implement some other mechanism<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * to force TCG CPUs to exit the critical section, at which point this<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * part of this callback might become unnecessary.)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * This pair matches cpu_exec's rcu_read_lock()/rcu_read_unlock(), which<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * only protects cpu-&gt;as-&gt;dispatch. Since we know our caller is about<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * to reload it, it's safe to split the critical section.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcu_read_unlock();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcu_read_lock();<BR>&nbsp;&nbsp;&nbsp; }<BR>}<BR>#endif</P>
<P>void cpu_loop_exit(CPUState *cpu)<BR>{<BR>&nbsp;&nbsp;&nbsp; siglongjmp(cpu-&gt;jmp_env, 1);<BR>}</P>
<P>void cpu_loop_exit_restore(CPUState *cpu, uintptr_t pc)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (pc) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu_restore_state(cpu, pc);<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; siglongjmp(cpu-&gt;jmp_env, 1);<BR>}