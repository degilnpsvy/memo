static void hcr_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value)<BR>{<BR>&nbsp;&nbsp;&nbsp; ARMCPU *cpu = arm_env_get_cpu(env);<BR>&nbsp;&nbsp;&nbsp; uint64_t valid_mask = HCR_MASK;</P>
<P>&nbsp;&nbsp;&nbsp; if (arm_feature(env, ARM_FEATURE_EL3)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; valid_mask &amp;= ~HCR_HCD;<BR>&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; valid_mask &amp;= ~HCR_TSC;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; /* Clear RES0 bits.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; value &amp;= valid_mask;</P>
<P>&nbsp;&nbsp;&nbsp; /* These bits change the MMU setup:<BR>&nbsp;&nbsp;&nbsp;&nbsp; * HCR_VM enables stage 2 translation<BR>&nbsp;&nbsp;&nbsp;&nbsp; * HCR_PTW forbids certain page-table setups<BR>&nbsp;&nbsp;&nbsp;&nbsp; * HCR_DC Disables stage1 and enables stage2 translation<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; if ((raw_read(env, ri) ^ value) &amp; (HCR_VM | HCR_PTW | HCR_DC)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tlb_flush(CPU(cpu), 1);<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; raw_write(env, ri, value);<BR>}