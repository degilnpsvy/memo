static const ARMCPRegInfo v8_cp_reginfo[] = {<BR>&nbsp;&nbsp;&nbsp; /* Minimal set of EL0-visible registers. This will need to be expanded<BR>&nbsp;&nbsp;&nbsp;&nbsp; * significantly for system emulation of AArch64 CPUs.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "NZCV", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 3, .opc2 = 0, .crn = 4, .crm = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_RW, .type = ARM_CP_NZCV },<BR>&nbsp;&nbsp;&nbsp; { .name = "DAIF", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 3, .opc2 = 1, .crn = 4, .crm = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_RW, .accessfn = aa64_daif_access,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, daif),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = aa64_daif_write, .resetfn = arm_cp_reset_ignore },<BR>&nbsp;&nbsp;&nbsp; { .name = "FPCR", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 3, .opc2 = 0, .crn = 4, .crm = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_RW, .readfn = aa64_fpcr_read, .writefn = aa64_fpcr_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "FPSR", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 3, .opc2 = 1, .crn = 4, .crm = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_RW, .readfn = aa64_fpsr_read, .writefn = aa64_fpsr_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCZID_EL0", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 3, .opc2 = 7, .crn = 0, .crm = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_R, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .readfn = aa64_dczid_read },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_ZVA", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 3, .crn = 7, .crm = 4, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_W, .type = ARM_CP_DC_ZVA,<BR>#ifndef CONFIG_USER_ONLY<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Avoid overhead of an access check that always passes in user-mode */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .accessfn = aa64_zva_access,<BR>#endif<BR>&nbsp;&nbsp;&nbsp; },<BR>&nbsp;&nbsp;&nbsp; { .name = "CURRENTEL", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .opc2 = 2, .crn = 4, .crm = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_R, .type = ARM_CP_CURRENTEL },<BR>&nbsp;&nbsp;&nbsp; /* Cache ops: all NOPs since we don't emulate caches */<BR>&nbsp;&nbsp;&nbsp; { .name = "IC_IALLUIS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "IC_IALLU", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 5, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "IC_IVAU", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 3, .crn = 7, .crm = 5, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_W, .type = ARM_CP_NOP,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .accessfn = aa64_cacheop_access },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_IVAC", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 6, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_ISW", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 6, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_CVAC", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 3, .crn = 7, .crm = 10, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_W, .type = ARM_CP_NOP,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .accessfn = aa64_cacheop_access },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_CSW", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 10, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_CVAU", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 3, .crn = 7, .crm = 11, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_W, .type = ARM_CP_NOP,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .accessfn = aa64_cacheop_access },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_CIVAC", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 3, .crn = 7, .crm = 14, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL0_W, .type = ARM_CP_NOP,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .accessfn = aa64_cacheop_access },<BR>&nbsp;&nbsp;&nbsp; { .name = "DC_CISW", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 14, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; /* TLBI operations */<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VMALLE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vmalle1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ASIDE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vmalle1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAAE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VALE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAALE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VMALLE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vmalle1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ASIDE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vmalle1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAAE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VALE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAALE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_IPAS2E1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 0, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_ipas2e1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_IPAS2LE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 0, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_ipas2e1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ALLE1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VMALLS12E1IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 6,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle1is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_IPAS2E1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 4, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_ipas2e1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_IPAS2LE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 4, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_ipas2e1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ALLE1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle1_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VMALLS12E1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 6,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle1is_write },<BR>#ifndef CONFIG_USER_ONLY<BR>&nbsp;&nbsp;&nbsp; /* 64 bit address translation operations */<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E1R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 8, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E1W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 8, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E0R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 8, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E0W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 0, .crn = 7, .crm = 8, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S12E1R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S12E1W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S12E0R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 6,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S12E0W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; /* AT S1E2* are elsewhere as they UNDEF from EL3 if EL2 is not present */<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E3R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 6, .crn = 7, .crm = 8, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL3_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E3W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 6, .crn = 7, .crm = 8, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL3_W, .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "PAR_EL1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .crn = 7, .crm = 4, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.par_el[1]),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = par_write },<BR>#endif<BR>&nbsp;&nbsp;&nbsp; /* TLB invalidate last level of translation table walk */<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVALIS", .cp = 15, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL1_W, .writefn = tlbimva_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVAALIS", .cp = 15, .opc1 = 0, .crn = 8, .crm = 3, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL1_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbimvaa_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVAL", .cp = 15, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL1_W, .writefn = tlbimva_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVAAL", .cp = 15, .opc1 = 0, .crn = 8, .crm = 7, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL1_W, .writefn = tlbimvaa_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVALH", .cp = 15, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbimva_hyp_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVALHIS",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbimva_hyp_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIIPAS2",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 4, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiipas2_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIIPAS2IS",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 0, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiipas2_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIIPAS2L",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 4, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiipas2_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIIPAS2LIS",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 0, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiipas2_is_write },<BR>&nbsp;&nbsp;&nbsp; /* 32 bit cache operations */<BR>&nbsp;&nbsp;&nbsp; { .name = "ICIALLUIS", .cp = 15, .opc1 = 0, .crn = 7, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "BPIALLUIS", .cp = 15, .opc1 = 0, .crn = 7, .crm = 1, .opc2 = 6,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "ICIALLU", .cp = 15, .opc1 = 0, .crn = 7, .crm = 5, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "ICIMVAU", .cp = 15, .opc1 = 0, .crn = 7, .crm = 5, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "BPIALL", .cp = 15, .opc1 = 0, .crn = 7, .crm = 5, .opc2 = 6,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "BPIMVA", .cp = 15, .opc1 = 0, .crn = 7, .crm = 5, .opc2 = 7,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCIMVAC", .cp = 15, .opc1 = 0, .crn = 7, .crm = 6, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCISW", .cp = 15, .opc1 = 0, .crn = 7, .crm = 6, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCCMVAC", .cp = 15, .opc1 = 0, .crn = 7, .crm = 10, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCCSW", .cp = 15, .opc1 = 0, .crn = 7, .crm = 10, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCCMVAU", .cp = 15, .opc1 = 0, .crn = 7, .crm = 11, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCCIMVAC", .cp = 15, .opc1 = 0, .crn = 7, .crm = 14, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; { .name = "DCCISW", .cp = 15, .opc1 = 0, .crn = 7, .crm = 14, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NOP, .access = PL1_W },<BR>&nbsp;&nbsp;&nbsp; /* MMU Domain access control / MPU write buffer control */<BR>&nbsp;&nbsp;&nbsp; { .name = "DACR", .cp = 15, .opc1 = 0, .crn = 3, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = dacr_write, .raw_writefn = raw_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .bank_fieldoffsets = { offsetoflow32(CPUARMState, cp15.dacr_s),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; offsetoflow32(CPUARMState, cp15.dacr_ns) } },<BR>&nbsp;&nbsp;&nbsp; { .name = "ELR_EL1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .crn = 4, .crm = 0, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, elr_el[1]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_EL1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .crn = 4, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_SVC]) },<BR>&nbsp;&nbsp;&nbsp; /* We rely on the access checks not allowing the guest to write to the<BR>&nbsp;&nbsp;&nbsp;&nbsp; * state field when SPSel indicates that it's being used as the stack<BR>&nbsp;&nbsp;&nbsp;&nbsp; * pointer.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "SP_EL0", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .crn = 4, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .accessfn = sp_el0_access,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, sp_el[0]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SP_EL1", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, sp_el[1]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSel", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 0, .crn = 4, .crm = 2, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .readfn = spsel_read, .writefn = spsel_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "FPEXC32_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 5, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, vfp.xregs[ARM_VFP_FPEXC]),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .accessfn = fpexc32_access },<BR>&nbsp;&nbsp;&nbsp; { .name = "DACR32_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 3, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = dacr_write, .raw_writefn = raw_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.dacr32_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "IFSR32_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 5, .crm = 0, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.ifsr32_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_IRQ", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_IRQ]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_ABT", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_ABT]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_UND", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 3, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_UND]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_FIQ", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 3, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_FIQ]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "MDCR_EL3", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 6, .crn = 1, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL3_RW, .fieldoffset = offsetof(CPUARMState, cp15.mdcr_el3) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SDCR", .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 0, .crn = 1, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .accessfn = access_trap_aa32s_el1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = sdcr_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetoflow32(CPUARMState, cp15.mdcr_el3) },<BR>&nbsp;&nbsp;&nbsp; REGINFO_SENTINEL<BR>};