static const ARMCPRegInfo xscale_cp_reginfo[] = {<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_CPAR",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .crn = 15, .crm = 1, .opc1 = 0, .opc2 = 0, .access = PL1_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.c15_cpar), .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = xscale_cpar_write, },<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_AUXCR",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .crn = 1, .crm = 0, .opc1 = 0, .opc2 = 1, .access = PL1_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.c1_xscaleauxcr),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0, },<BR>&nbsp;&nbsp;&nbsp; /* XScale specific cache-lockdown: since we have no cache we NOP these<BR>&nbsp;&nbsp;&nbsp;&nbsp; * and hope the guest does not really rely on cache behaviour.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_LOCK_ICACHE_LINE",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 0, .crn = 9, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_UNLOCK_ICACHE",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 0, .crn = 9, .crm = 1, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_DCACHE_LOCK",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 0, .crn = 9, .crm = 2, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_RW, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; { .name = "XSCALE_UNLOCK_DCACHE",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 0, .crn = 9, .crm = 2, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL1_W, .type = ARM_CP_NOP },<BR>&nbsp;&nbsp;&nbsp; REGINFO_SENTINEL<BR>};