static const ARMCPRegInfo el2_cp_reginfo[] = {<BR>&nbsp;&nbsp;&nbsp; { .name = "HCR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 1, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .fieldoffset = offsetof(CPUARMState, cp15.hcr_el2),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = hcr_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "ELR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 0, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, elr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "ESR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 5, .crm = 2, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .fieldoffset = offsetof(CPUARMState, cp15.esr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "FAR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 6, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .fieldoffset = offsetof(CPUARMState, cp15.far_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SPSR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 4, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, banked_spsr[BANK_HYP]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "VBAR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 12, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .writefn = vbar_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.vbar_el[2]),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; { .name = "SP_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 6, .crn = 4, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL3_RW, .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, sp_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "CPTR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 1, .crm = 1, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .accessfn = cptr_access, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.cptr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "MAIR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 10, .crm = 2, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .fieldoffset = offsetof(CPUARMState, cp15.mair_el[2]),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; { .name = "HMAIR1", .state = ARM_CP_STATE_AA32,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc1 = 4, .crn = 10, .crm = 2, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetofhigh32(CPUARMState, cp15.mair_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "AMAIR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 10, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_CONST,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; /* HAMAIR1 is mapped to AMAIR_EL2[63:32] */<BR>&nbsp;&nbsp;&nbsp; { .name = "HMAIR1", .state = ARM_CP_STATE_AA32,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc1 = 4, .crn = 10, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_CONST,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AFSR0_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 5, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_CONST,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AFSR1_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 5, .crm = 1, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_CONST,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0 },<BR>&nbsp;&nbsp;&nbsp; { .name = "TCR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 2, .crm = 0, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* no .writefn needed as this can't cause an ASID change;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * no .raw_writefn or .resetfn needed as we never use mask/base_mask<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.tcr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "VTCR", .state = ARM_CP_STATE_AA32,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 2, .crm = 1, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .accessfn = access_el3_aa32ns,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.vtcr_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "VTCR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 2, .crm = 1, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* no .writefn needed as this can't cause an ASID change;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * no .raw_writefn or .resetfn needed as we never use mask/base_mask<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.vtcr_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "VTTBR", .state = ARM_CP_STATE_AA32,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 6, .crm = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_64BIT | ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .accessfn = access_el3_aa32ns,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.vttbr_el2),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = vttbr_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "VTTBR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 2, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .writefn = vttbr_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.vttbr_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "SCTLR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 1, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .raw_writefn = raw_write, .writefn = sctlr_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.sctlr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "TPIDR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 13, .crm = 0, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.tpidr_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "TTBR0_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 2, .crm = 0, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.ttbr0_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "HTTBR", .cp = 15, .opc1 = 4, .crm = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_64BIT | ARM_CP_ALIAS,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.ttbr0_el[2]) },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIALLNSNH",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiall_nsnh_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIALLNSNHIS",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiall_nsnh_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIALLH", .cp = 15, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiall_hyp_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIALLHIS", .cp = 15, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbiall_hyp_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVAH", .cp = 15, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbimva_hyp_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBIMVAHIS", .cp = 15, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbimva_hyp_is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ALLE2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle2_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAE2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae2_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VALE2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 7, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae2_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_ALLE2IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_alle2is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VAE2IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae2is_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "TLBI_VALE2IS", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 8, .crm = 3, .opc2 = 5,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .type = ARM_CP_NO_RAW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = tlbi_aa64_vae2is_write },<BR>#ifndef CONFIG_USER_ONLY<BR>&nbsp;&nbsp;&nbsp; /* Unlike the other EL2-related AT operations, these must<BR>&nbsp;&nbsp;&nbsp;&nbsp; * UNDEF from EL3 if EL2 is not implemented, which is why we<BR>&nbsp;&nbsp;&nbsp;&nbsp; * define them here rather than with the rest of the AT ops.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E2R", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .accessfn = at_s1e2_access,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; { .name = "AT_S1E2W", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 1, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W, .accessfn = at_s1e2_access,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW, .writefn = ats_write64 },<BR>&nbsp;&nbsp;&nbsp; /* The AArch32 ATS1H* operations are CONSTRAINED UNPREDICTABLE<BR>&nbsp;&nbsp;&nbsp;&nbsp; * if EL2 is not implemented; we choose to UNDEF. Behaviour at EL3<BR>&nbsp;&nbsp;&nbsp;&nbsp; * with SCR.NS == 0 outside Monitor mode is UNPREDICTABLE; we choose<BR>&nbsp;&nbsp;&nbsp;&nbsp; * to behave as if SCR.NS was 1.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "ATS1HR", .cp = 15, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = ats1h_write, .type = ARM_CP_NO_RAW },<BR>&nbsp;&nbsp;&nbsp; { .name = "ATS1HW", .cp = 15, .opc1 = 4, .crn = 7, .crm = 8, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_W,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = ats1h_write, .type = ARM_CP_NO_RAW },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTHCTL_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 14, .crm = 1, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* ARMv7 requires bit 0 and 1 to reset to 1. ARMv8 defines the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * reset values as IMPDEF. We choose to reset to 3 to comply with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * both ARMv7 and ARMv8.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.cnthctl_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTVOFF_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 14, .crm = 0, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_IO, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = gt_cntvoff_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.cntvoff_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTVOFF", .cp = 15, .opc1 = 4, .crm = 14,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_64BIT | ARM_CP_ALIAS | ARM_CP_IO,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = gt_cntvoff_write,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.cntvoff_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTHP_CVAL_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 14, .crm = 2, .opc2 = 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.c14_timer[GTIMER_HYP].cval),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_IO, .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = gt_hyp_cval_write, .raw_writefn = raw_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTHP_CVAL", .cp = 15, .opc1 = 6, .crm = 14,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.c14_timer[GTIMER_HYP].cval),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .type = ARM_CP_64BIT | ARM_CP_IO,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = gt_hyp_cval_write, .raw_writefn = raw_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTHP_TVAL_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 14, .crm = 2, .opc2 = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_NO_RAW | ARM_CP_IO, .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetfn = gt_hyp_timer_reset,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .readfn = gt_hyp_tval_read, .writefn = gt_hyp_tval_write },<BR>&nbsp;&nbsp;&nbsp; { .name = "CNTHP_CTL_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .type = ARM_CP_IO,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 14, .crm = 2, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.c14_timer[GTIMER_HYP].ctl),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .writefn = gt_hyp_ctl_write, .raw_writefn = raw_write },<BR>#endif<BR>&nbsp;&nbsp;&nbsp; /* The only field of MDCR_EL2 that has a defined architectural reset value<BR>&nbsp;&nbsp;&nbsp;&nbsp; * is MDCR_EL2.HPMN which should reset to the value of PMCR_EL0.N; but we<BR>&nbsp;&nbsp;&nbsp;&nbsp; * don't impelment any PMU event counters, so using zero as a reset<BR>&nbsp;&nbsp;&nbsp;&nbsp; * value for MDCR_EL2 is okay<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; { .name = "MDCR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 1, .crm = 1, .opc2 = 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .resetvalue = 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.mdcr_el2), },<BR>&nbsp;&nbsp;&nbsp; { .name = "HPFAR", .state = ARM_CP_STATE_AA32,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc1 = 4, .crn = 6, .crm = 0, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW, .accessfn = access_el3_aa32ns,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.hpfar_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "HPFAR_EL2", .state = ARM_CP_STATE_AA64,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .opc0 = 3, .opc1 = 4, .crn = 6, .crm = 0, .opc2 = 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.hpfar_el2) },<BR>&nbsp;&nbsp;&nbsp; { .name = "HSTR_EL2", .state = ARM_CP_STATE_BOTH,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cp = 15, .opc0 = 3, .opc1 = 4, .crn = 1, .crm = 1, .opc2 = 3,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .access = PL2_RW,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fieldoffset = offsetof(CPUARMState, cp15.hstr_el2) },<BR>&nbsp;&nbsp;&nbsp; REGINFO_SENTINEL<BR>};