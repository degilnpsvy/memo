<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nan</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnan-3643></A></VAR><BR>
<BLOCKQUOTE>
<P>This is an implementation of the ISO C99 function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nan</CODE>.</P>
<P>Since ISO C99 defines this function in terms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtod</CODE>, which we do not implement, a description of the parsing is in order. The string is parsed as by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtol</CODE>; that is, the base is recognized by leading &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>0x</SPAN></SAMP>&#8217; prefixes. The number parsed is placed in the significand such that the least significant bit of the number is at the least significant bit of the significand. The number is truncated to fit the significand field provided. The significand is forced to be a quiet NaN.</P>
<P>This function, if given a string literal all of which would have been consumed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtol</CODE>, is evaluated early enough that it is considered a compile-time constant.</P></BLOCKQUOTE></DIV>