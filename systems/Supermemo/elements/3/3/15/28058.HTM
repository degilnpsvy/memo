5.3 Function calls to secure code</P>
<P>When any branch causes a transition from non-secure to secure code the first instruction of the secure code must be a SG (see section 5.6.1) instruction.</P>
<P>Figure 3 shows a simple example of non-secure code calling a secure function highlighting where the domain transitions occur. Since the processor remains in the non-secure state until the SG instruction has been executed, the register state (include LR) is treated as untrusted, and therefore does not need protecting in the event that a non-secure interrupt occurs between the BL and the SG. Another key feature is that the processor is returned to the non-secure state after the BXNS LR instruction. This prevents return attacks by causing an exception to be generated if the next instruction is not in the non-secure domain, or another SG instruction in the secure domain. As described in section 5.2, the BXNS LR instruction can determine the security state of the target in advance by examing the LSB of the LR register. Since the SG instruction automatically sanitises the return address, the LSB of the LR register can be trusted at this point (see sections 5.5 and 5.6.1).</P>
<P>NOTE: The secure code is responsible for making sure the registers don't contain any secure data when a secure function returns.</P>
<P>Non-secure memory&nbsp; |&nbsp;&nbsp;&nbsp; Secure memory<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>NonSecureFunc:&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; PUSH 1r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; &lt;other code&gt;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; Secure Func:<BR>&nbsp; BL Secure Func --|---&gt;&nbsp; SG<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;other code&gt;&nbsp; (Secure)<BR>&nbsp; &lt;other code&gt;&nbsp; &lt;--|----&nbsp; BXNS lr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Secure)<BR>&nbsp; POP pc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |