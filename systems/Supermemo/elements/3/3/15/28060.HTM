5.4.1 Precautions to be taken when calling non-secure code</P>
<P>To prevent secure data being leaked to the non-secure domain when calling a non-secure function it is important to clear any registers not being used to hold function arguments. As both the clearing of registers, and any associated stacking operations required to preserve their values can consume a significant number of cycles, these operations can be skipped if the callee function is secure. NOTE: the security domain of the callee function can be determined by examining the LSB of the target address (see section 5.2).</P>
<P>Any exception or BLX that causes a transition from the secure to non-secure state will result in the last location on the secure stack being either a valid function return address, or a magic signature (see section 6.3.1). This provides a degree of protection against returning to arbitrary locations as magic signature is not a valid function return address (and will cause a fault if an attempt is made to use it as one). To ensure the integrity of the platform it is important that any other methods that cause a transition to the non-secure state leave the last location on the secure stack set to either a valid return address, or a value that will result in a fault. To maintain compatibility with future architectures the recommended value of 0xFEF5EDA5 should be used, which has the following properties:<BR>* It is not a valid FNC_RETURN or EXC_RETURN value<BR>* It is not the magic signature so would not inadvertently mark the stack as containing a valid exception stack frame.<BR>* The value starts with 0xF and is therefore not a valid instruction address.