5.5.2 Function pointers</P>
<P>When executing in the secure state care must be taken to sanitise any function pointers that originate from the non-secure domain. This is required to prevent against the following style of attack being used to branch to arbitrary secure locations:<BR>* Non-secure code passes a function pointer to secure function that is used to register a call back. The function pointer pointers to an arbitrary secure location and has the LASB set to 1.<BR>* Non-secure code either triggers or waits for the secure code to call the function pointer</P>
<P>Without sanitisation this attack would succeed because secure code is permitted to branch to any arbitrary location. This attack vector can be prevented by simply forcing the LSB of any function pointers that originate from the non-secure domain to 0. This will cause the processor to transition to the non-secure state when the function pointer is called, which in turn will raise a SecureFault (see section 6.13) if the target address is secure and hasn't been marked as a valid entry point using the SG instruction (see section 5.6.1).</P>
<P>To prevent the need to manually sanitise function return addresses the SG instruction automatically sets the LSB of the LR register to 0 if a transition from the non-secure to the secure state occurs.