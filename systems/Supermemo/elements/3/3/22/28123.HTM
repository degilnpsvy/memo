<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>*__builtin_assume_aligned</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const void *exp, size_t align, ...</VAR>)<VAR><A name=index-g_t_002a_005f_005fbuiltin_005fassume_005faligned-3626></A></VAR><BR>
<BLOCKQUOTE>
<P>This function returns its first argument, and allows the compiler to assume that the returned pointer is at least<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>align</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes aligned. This built-in can have either two or three arguments, if it has three, the third argument should have integer type, and if it is nonzero means misalignment offset. For example:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void *x = __builtin_assume_aligned (arg, 16);
</PRE>
<P class=noindent>means that the compiler can assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arg</CODE>, is at least 16-byte aligned, while:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void *x = __builtin_assume_aligned (arg, 32, 8);
</PRE>
<P class=noindent>means that the compiler can assume for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arg</CODE>, that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(char *) x - 8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 32-byte aligned.</P></BLOCKQUOTE></DIV>