<DIV id=content-header>
<H1 class=title>Playing with ptrace, Part I</H1></DIV>
<DIV id=content-area>
<DIV id=node-6100 class="node node-type-xmlnode">
<DIV class=node-inner>
<DIV id=facebook-like>
<DIV class=fb-like data-show-faces="false" data-width="250" data-send="false" data-href="http://www.linuxjournal.com//article/6100"></DIV></DIV>
<DIV class=issue>
<DIV class=issue-cover><A href="http://www.linuxjournal.com/issue/103"><IMG title="Issue 103" alt="Issue 103" src="http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/issues/103/cover103.small.jpg"></A> </DIV>
<P><A href="http://www.linuxjournal.com/issue/103">From Issue #103<BR>November 2002</A></P></DIV>
<DIV class=meta>
<DIV class=submitted>Nov 01, 2002 &nbsp;By&nbsp;<A title="View user profile." href="http://www.linuxjournal.com/user/800841">Pradeep Padala</A> </DIV>
<DIV class="terms terms-inline">&nbsp;in
<UL class="links inline">
<LI class="taxonomy_term_21 first last"><A title="" href="http://www.linuxjournal.com/tag/sysadmin" rel=tag>SysAdmin</A></LI></UL></DIV></DIV>
<DIV class=abstract>Using ptrace allows you to set up system call interception and modification at the user level. </DIV>
<DIV class=content>
<DIV lang=en class=article>
<DIV lang=en class=simplesect>
<DIV class=titlepage><A name=N0x16d4e890.0x16e42f38></A></DIV>
<P>Have you ever wondered how system calls can be intercepted? Have you ever tried fooling the kernel by changing system call arguments? Have you ever wondered how debuggers stop a running process and let you take control of the process? </P>
<P>If you are thinking of using complex kernel programming to accomplish tasks, think again. Linux provides an elegant mechanism to achieve all of these things: the ptrace (Process Trace) system call. <SPAN class=bold><B>ptrace</B></SPAN> provides a mechanism by which a parent process may observe and control the execution of another process. It can examine and change its core image and registers and is used primarily to implement breakpoint debugging and system call tracing.</P>
<P>In this article, we learn how to intercept a system call and change its arguments. In Part II of the article we will study advanced techniques&#8212;setting breakpoints and injecting code into a running program. We will peek into the child process' registers and data segment and modify the contents. We will also describe a way to inject code so the process can be stopped and execute arbitrary instructions.</P></DIV>
<DIV lang=en class=simplesect>
<DIV class=titlepage><A name=N0x16d4e890.0x16e43148></A>Basics</DIV>
<P>Operating systems offer services through a standard mechanism called system calls. They provide a standard API for accessing the underlying hardware and low-level services, such as the filesystems. When a process wants to invoke a system call, it puts the arguments to system calls in registers and calls soft interrupt 0x80. This soft interrupt is like a gate to the kernel mode, and the kernel will execute the system call after examining the arguments.</P>
<P>On the i386 architecture (all the code in this article is i386-specific), the system call number is put in the register %eax. The arguments to this system call are put into registers %ebx, %ecx, %edx, %esi and %edi, in that order. For example, the call:</P><PRE class=programlisting>write(2, "Hello", 5)
</PRE>
<P>roughly would translate into </P><PRE class=programlisting>movl   $4, %eax
movl   $2, %ebx
movl   $hello,%ecx
movl   $5, %edx
int    $0x80
</PRE>where $hello points to a literal string &#8220;Hello&#8221;. 
<P></P>
<P>So where does ptrace come into picture? Before executing the system call, the kernel checks whether the process is being traced. If it is, the kernel stops the process and gives control to the tracking process so it can examine and modify the traced process' registers.</P>
<P>Let's clarify this explanation with an example of how the process works:</P><PRE class=programlisting>#include &lt;sys/ptrace.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;unistd.h&gt;
#include &lt;linux/user.h&gt;   /* For constants
                                   ORIG_EAX etc */
int main()
{   pid_t child;
    long orig_eax;
    child = fork();
    if(child == 0) {
        ptrace(PTRACE_TRACEME, 0, NULL, NULL);
        execl("/bin/ls", "ls", NULL);
    }
    else {
        wait(NULL);
        orig_eax = ptrace(PTRACE_PEEKUSER,
                          child, 4 * ORIG_EAX,
                          NULL);
        printf("The child made a "
               "system call %ld\n", orig_eax);
        ptrace(PTRACE_CONT, child, NULL, NULL);
    }
    return 0;
}
</PRE>
<P>When run, this program prints: </P><PRE class=programlisting>The child made a system call 11
</PRE>along with the output of ls. System call number 11 is execve, and it's the first system call executed by the child. For reference, system call numbers can be found in /usr/include/asm/unistd.h. 
<P></P>
<P>As you can see in the example, a process forks a child and the child executes the process we want to trace. Before running <B>exec</B>, the child calls ptrace with the first argument, equal to PTRACE_TRACEME. This tells the kernel that the process is being traced, and when the child executes the execve system call, it hands over control to its parent. The parent waits for notification from the kernel with a wait() call. Then the parent can check the arguments of the system call or do other things, such as looking into the registers.</P>
<P>When the system call occurs, the kernel saves the original contents of the eax register, which contains the system call number. We can read this value from child's USER segment by calling ptrace with the first argument PTRACE_PEEKUSER, shown as above.</P>
<P>After we are done examining the system call, the child can continue with a call to ptrace with the first argument PTRACE_CONT, which lets the system call continue.</P></DIV>
<DIV lang=en class=simplesect>
<DIV class=titlepage><A name=N0x16d4e890.0x16e436c8></A>ptrace Parameters</DIV>
<P><SPAN class=bold><B>ptrace</B></SPAN> is called with four arguments:</P><PRE class=programlisting>long ptrace(enum __ptrace_request request,
            pid_t pid,
            void *addr,
            void *data);
</PRE>
<P>The first argument determines the behaviour of ptrace and how other arguments are used. The value of request should be one of PTRACE_TRACEME, PTRACE_PEEKTEXT, PTRACE_PEEKDATA, PTRACE_PEEKUSER, PTRACE_POKETEXT, PTRACE_POKEDATA, PTRACE_POKEUSER, PTRACE_GETREGS, PTRACE_GETFPREGS, PTRACE_SETREGS, PTRACE_SETFPREGS, PTRACE_CONT, PTRACE_SYSCALL, PTRACE_SINGLESTEP, PTRACE_DETACH. The significance of each of these requests will be explained in the rest of the article. </P></DIV></DIV></DIV></DIV></DIV></DIV>