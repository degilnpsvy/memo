<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: long<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_expect</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long exp, long c</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fexpect-3622></A></VAR><BR>
<BLOCKQUOTE>
<P><A name=index-fprofile-arcs-3623></A>You may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_expect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (<SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP>), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.</P>
<P>The return value is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>, which should be an integral expression. The semantics of the built-in are that it is expected that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>==<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>. For example:</P><PRE class=smallexample style="FONT-SIZE: smaller">          if (__builtin_expect (x, 0))
            foo ();
</PRE>
<P class=noindent>indicates that we do not expect to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE>, since we expect<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be zero. Since you are limited to integral expressions for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>, you should use constructions such as</P><PRE class=smallexample style="FONT-SIZE: smaller">          if (__builtin_expect (ptr != NULL, 1))
            foo (*ptr);
</PRE>
<P class=noindent>when testing pointer or floating-point values.</P></BLOCKQUOTE></DIV>