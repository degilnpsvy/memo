<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_types_compatible_p</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>type1, type2</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftypes_005fcompatible_005fp-3618></A></VAR><BR>
<BLOCKQUOTE>
<P>You can use the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_types_compatible_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine whether two types are the same.</P>
<P>This built-in function returns 1 if the unqualified versions of the types<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which are types, not expressions) are compatible, 0 otherwise. The result of this built-in function can be used in integer constant expressions.</P>
<P>This built-in function ignores top level qualifiers (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE>). For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const int</CODE>.</P>
<P>The type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int[]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int[5]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are compatible. On the other hand,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not compatible, even if the size of their types, on the particular architecture are the same. Also, the amount of pointer indirection is taken into account when determining similarity. Consequently,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short **</CODE>. Furthermore, two types that are typedefed are considered compatible if their underlying types are compatible.</P>
<P>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type is not considered to be compatible with another<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type even if both are compatible with the same integer type; this is what the C standard specifies. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum {foo, bar}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum {hot, dog}</CODE>.</P>
<P>You typically use this function in code whose execution varies depending on the arguments' types. For example:</P><PRE class=smallexample style="FONT-SIZE: smaller">          #define foo(x)                                                  \
            ({                                                           \
              typeof (x) tmp = (x);                                       \
              if (__builtin_types_compatible_p (typeof (x), long double)) \
                tmp = foo_long_double (tmp);                              \
              else if (__builtin_types_compatible_p (typeof (x), double)) \
                tmp = foo_double (tmp);                                   \
              else if (__builtin_types_compatible_p (typeof (x), float))  \
                tmp = foo_float (tmp);                                    \
              else                                                        \
                abort ();                                                 \
              tmp;                                                        \
            })
</PRE>
<P><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>This construct is only available for C.</P></BLOCKQUOTE></DIV>