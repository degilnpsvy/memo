<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_constant_p</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>exp</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fconstant_005fp-3621></A></VAR><BR>
<BLOCKQUOTE>
<P>You can use the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine if a value is known to be constant at compile time and hence that GCC can perform constant-folding on expressions involving that value. The argument of the function is the value to test. The function returns the integer 1 if the argument is known to be a compile-time constant and 0 if it is not known to be a compile-time constant. A return of 0 does not indicate that the value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a constant, but merely that GCC cannot prove it is a constant with the specified value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P>You typically use this function in an embedded application where memory is a critical resource. If you have some complex calculation, you may want it to be folded if it involves constants, but need to call a function if it does not. For example:</P><PRE class=smallexample style="FONT-SIZE: smaller">          #define Scale_Value(X)      \
            (__builtin_constant_p (X) \
            ? ((X) * SCALE + OFFSET) : Scale (X))
</PRE>
<P>You may use this built-in function in either a macro or an inline function. However, if you use it in an inlined function and pass an argument of the function as the argument to the built-in, GCC never returns 1 when you call the inline function with a string constant or compound literal (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Compound-Literals.html#Compound-Literals">Compound Literals</A>) and does not return 1 when you pass a constant numeric value to the inline function unless you specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P>You may also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in initializers for static data. For instance, you can write</P><PRE class=smallexample style="FONT-SIZE: smaller">          static const int table[] = {
             __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,
             /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */
          };
</PRE>
<P class=noindent>This is an acceptable initializer even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a constant expression, including the case where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns 1 because<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be folded to a constant but<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains operands that are not otherwise permitted in a static initializer (for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0 &amp;&amp; foo ()</CODE>). GCC must be more conservative about evaluating the built-in in this case, because it has no opportunity to perform optimization.</P>
<P>Previous versions of GCC did not accept this built-in in data initializers. The earliest version where it is completely safe is 3.0.1.</P></BLOCKQUOTE></DIV>