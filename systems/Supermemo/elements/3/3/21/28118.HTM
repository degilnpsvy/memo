<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_complex</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>real, imag</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fcomplex-3620></A></VAR><BR>
<BLOCKQUOTE>
<P>The built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_complex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided for use in implementing the ISO C11 macros<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLXF</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLXL</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>real</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>imag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the same type, a real binary floating-point type, and the result has the corresponding complex type with real and imaginary parts<VAR>real</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>imag</VAR>. Unlike &#8216;<SAMP><VAR>real</VAR><SPAN class=samp><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ I *<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>imag</VAR></SAMP>&#8217;, this works even when infinities, NaNs and negative zeros are involved.</P></BLOCKQUOTE></DIV>