<H3>g_alloca()</H3><PRE class=programlisting>#define             g_alloca(size)</PRE>
<P>Allocates <EM class=parameter><CODE>size</CODE></EM> bytes on the stack; these bytes will be freed when the current stack frame is cleaned up. This macro essentially just wraps the <CODE class=function>alloca()</CODE> function present on most UNIX variants. Thus it provides the same advantages and pitfalls as <CODE class=function>alloca()</CODE>:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>alloca() is very fast, as on most systems it's implemented by just adjusting the stack pointer register.</P>
<LI class=listitem>
<P>It doesn't cause any memory fragmentation, within its scope, separate <CODE class=function>alloca()</CODE> blocks just build up and are released together at function end.</P>
<LI class=listitem>
<P>Allocation sizes have to fit into the current stack frame. For instance in a threaded environment on Linux, the per-thread stack size is limited to 2 Megabytes, so be sparse with <CODE class=function>alloca()</CODE> uses.</P>
<LI class=listitem>
<P>Allocation failure due to insufficient stack space is not indicated with a <A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> return like e.g. with <CODE class=function>malloc()</CODE>. Instead, most systems probably handle it the same way as out of stack space situations from infinite function recursion, i.e. with a segmentation fault.</P>
<LI class=listitem>
<P>Special care has to be taken when mixing <CODE class=function>alloca()</CODE> with GNU C variable sized arrays. Stack space allocated with <CODE class=function>alloca()</CODE> in the same scope as a variable sized array will be freed together with the variable sized array upon exit of that scope, and not upon exit of the enclosing function scope.</P></LI></UL></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>size</P></TD>
<TD class=parameter_description>
<P>number of bytes to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.7></A>
<H4>Returns</H4>
<P>space for <EM class=parameter><CODE>size</CODE></EM> bytes, allocated on the stack</P></DIV>