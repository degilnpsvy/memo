D1.2.60 DWT_EXCCNT, DWT Exception Overhead Count Register</P>
<P>The DWT_EXCCNT characteristics are:<BR>Purpose: Counts the total cycles spent in exception processing.<BR>Usage constraints: Privileged access permitted only. Unprivileged accesses generate a BusFault.<BR>&nbsp; This register is word accessible only. Halfword and byte accesses are UNPREDICTABLE.<BR>Configurations: Present only if the Main Extension is implemented.<BR>&nbsp; This register is RES0 if the Main Extension is not implemented.<BR>&nbsp; Present only if the DWT is implemented.<BR>&nbsp; This register is RES0 if the DWT is not implemented.<BR>&nbsp; Present only if DWT_CTRL.NOPRFCNT == 0.<BR>&nbsp; This register is RES0 if DWT_CTRL.NOPRFCNT == 1.<BR>Attributes: 32-bit read/write register located at 0xE000100C.<BR>&nbsp; This register is not banked between Security states.</P>
<P>The DWT_EXCCNT bit assignments are:</P>
<P>Bits [31:8]<BR>Reserved, RES0.</P>
<P>EXCCNT, bits [7:0]<BR>The exception overhead counter.<BR>Counts one on each cycle when all of the following are true:<BR>&#8226; DWT_CTRL.EXCEVTENA == 1 and DEMCR.TRCENA == 1.<BR>&#8226; No instruction is executed, see DWT_CPICNT.<BR>&#8226; An exception-entry or exception-exit related operation is in progress.<BR>&#8226; Either SecureNoninvasiveDebugAllowed() == TRUE, or NS-Req for the operation is set to Non-secure and NoninvasiveDebugAllowed() == TRUE.<BR>Exception-entry or exception-exit related operations include the stacking of registers on exception entry, lazy state preservation, unstacking of registers on exception exit, and preemption.<BR>Initialized to zero when the counter is disabled and DWT_CTRL.EXCEVTENA is written with 1. An Event Counter packet is emitted on counter overflow.<BR>This field resets to an UNKNOWN value on a Cold reset.