<FONT class=extract>Deprecated GLib functions are annotated to make the compiler emit warnings when they are used (e.g. with gcc, you need to use the -Wdeprecated-declarations option). If these warnings are problematic, they can be turned off by defining the preprocessor symbol </FONT><A title=GLIB_DISABLE_DEPRECATION_WARNINGS class=link href="https://developer.gnome.org/glib/stable/glib-Version-Information.html#GLIB-DISABLE-DEPRECATION-WARNINGS:CAPS"><CODE class=literal><FONT class=extract>GLIB_DISABLE_DEPRECATION_WARNINGS</FONT></CODE></A><FONT class=extract> by using the commandline option <CODE class=literal>-DGLIB_DISABLE_DEPRECATION_WARNINGS</CODE></FONT> 
<P></P>
<P><FONT class=extract>GLib deprecation annotations are versioned; by defining the macros </FONT><A title=GLIB_VERSION_MIN_REQUIRED class=link href="https://developer.gnome.org/glib/stable/glib-Version-Information.html#GLIB-VERSION-MIN-REQUIRED:CAPS"><CODE class=literal><FONT class=extract>GLIB_VERSION_MIN_REQUIRED</FONT></CODE></A><FONT class=extract> and </FONT><A title=GLIB_VERSION_MAX_ALLOWED class=link href="https://developer.gnome.org/glib/stable/glib-Version-Information.html#GLIB-VERSION-MAX-ALLOWED:CAPS"><CODE class=literal><FONT class=extract>GLIB_VERSION_MAX_ALLOWED</FONT></CODE></A><FONT class=extract>, you can specify the range of GLib versions whose API you want to use. APIs that were deprecated before or introduced after this range will trigger compiler warnings.</FONT> </P>
<P><FONT class=extract>The older deprecation mechanism of hiding deprecated interfaces entirely from the compiler by using the preprocessor symbol G_DISABLE_DEPRECATED is still used for deprecated macros, enumeration values, etc. To detect uses of these in your code, use the commandline option <CODE class=literal>-DG_DISABLE_DEPRECATED</CODE>.</FONT>