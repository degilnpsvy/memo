<H3 class=docSection1Title>1.2. Why Is Software Construction Important?</H3>
<P class=docText>Since you're reading this book, you probably agree that improving software quality and developer productivity is important. Many of today's most exciting projects use software extensively. The Internet, movie special effects, medical life-support systems, space programs, aeronautics, high-speed financial analysis, and scientific research are a few examples. These projects and more conventional projects can all benefit from improved practices because many of the fundamentals are the same.</P>
<P class=docText>If you agree that improving software development is important in general, the question for you as a reader of this book becomes, Why is construction an important focus?</P>
<P class=docText><A name=ind3564></A><A name=ind3544></A><A name=ind3541></A><A name=ind3540></A><A name=ind3536></A><A name=ind3535></A><A name=ind3533></A><A name=ind2934></A><A name=ind1444></A>Here's why:</P>
<P class=docText><A name=fp001__title></A><B>Construction is a large part of software development</B> Depending on the size of the project, construction typically takes 30 to 80 percent of the total time spent on a project. Anything that takes up that much project time is bound to affect the success of the project.</P><A name=ch01note01></A>
<DIV class=docNote>
<P class=docNoteTitle>Cross-Reference</P>
<P class=docText>For details on the relationship between project size and the percentage of time consumed by construction, see "<A class=docLink href="file:///D:/BaiduYunDownload/Microsoft.Press.Code.Complete.Second.Edition/0735619670/ch27lev1sec5.html#ch27lev2sec1">Activity Proportions and Size</A>" in <A class=docLink href="file:///D:/BaiduYunDownload/Microsoft.Press.Code.Complete.Second.Edition/0735619670/ch27lev1sec5.html#ch27lev1sec5">Section 27.5</A>.</P></DIV><BR>
<P class=docText><A name=fp002__title></A><B>Construction is the central activity in software development</B> Requirements and architecture are done before construction so that you can do construction effectively. System testing (in the strict sense of independent testing) is done after construction to verify that construction has been done correctly. Construction is at the center of the software-development process.</P>
<P class=docText><A name=fp003__title></A><B>With a focus on construction, the individual programmer's productivity can improve enormously</B> A classic study by Sackman, Erikson, and Grant showed that the productivity of individual programmers varied by a factor of 10 to 20 during construction (1968). Since their study, their results have been confirmed by numerous other studies (Curtis 1981, Mills 1983, Curtis et al. 1986, Card 1987, Valett and McGarry 1989, DeMarco and Lister 1999, Boehm et al. 2000). This book helps all programmers learn techniques that are already used by the best programmers.</P><A name=ch01note02></A>
<DIV class=docNote>
<P class=docNoteTitle>Cross-Reference</P>
<P class=docText>For data on variations among programmers, see "<A class=docLink href="file:///D:/BaiduYunDownload/Microsoft.Press.Code.Complete.Second.Edition/0735619670/ch28lev1sec5.html#ch28lev3sec1">Individual Variation</A>" in <A class=docLink href="file:///D:/BaiduYunDownload/Microsoft.Press.Code.Complete.Second.Edition/0735619670/ch28lev1sec5.html#ch28lev1sec5">Section 28.5</A>.</P></DIV><BR>
<P class=docText><A name=fp004__title></A><B>Construction's product, the source code, is often the only accurate description of the software</B> In many projects, the only documentation available to programmers is the code itself. Requirements specifications and design documents can go out of date, but the source code is always up to date. Consequently, it's imperative that the source code be of the highest possible quality. Consistent application of techniques for source-code improvement makes the difference between a Rube Goldberg contraption and a detailed, correct, and therefore informative program. Such techniques are most effectively applied during construction.</P>
<P class=docText><A name=fp005__title></A><B>Construction is the only activity that's guaranteed to be done</B> <IMG border=0 alt="" src="file:///D:/BaiduYunDownload/Microsoft.Press.Code.Complete.Second.Edition/0735619670/images/0735619670/graphics/keypoint.gif" width=70 height=71> The ideal software project goes through careful requirements development and architectural design before construction begins. The ideal project undergoes comprehensive, statistically controlled system testing after construction. Imperfect, real-world projects, however, often skip requirements and design to jump into construction. They drop testing because they have too many errors to fix and they've run out of time. But no matter how rushed or poorly planned a project is, you can't drop construction; it's where the rubber meets the road. Improving construction is thus a way of improving any software-development effort, no matter how abbreviated.