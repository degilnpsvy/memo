<B><CODE class=systemitem>--disable-gc-friendly</CODE> and <CODE class=systemitem>--enable-gc-friendly</CODE>.&nbsp;</B> By default, and with <CODE class=systemitem>--disable-gc-friendly</CODE> as well, Glib does not clear the memory for certain objects before they are freed. For example, Glib may decide to recycle GList nodes by putting them in a free list. However, memory profiling and debugging tools like <A class=ulink href="http://www.valgrind.org/" target=_top>Valgrind</A> work better if an application does not keep dangling pointers to freed memory (even though these pointers are no longer dereferenced), or invalid pointers inside uninitialized memory. The <CODE class=systemitem>--enable-gc-friendly</CODE> option makes Glib clear memory in these situations: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>When shrinking a GArray, Glib will clear the memory no longer available in the array: shrink an array from 10 bytes to 7, and the last 3 bytes will be cleared. This includes removals of single and multiple elements. </P>
<LI class=listitem>
<P>When growing a GArray, Glib will clear the new chunk of memory. Grow an array from 7 bytes to 10 bytes, and the last 3 bytes will be cleared. </P>
<LI class=listitem>
<P>The above applies to GPtrArray as well. </P>
<LI class=listitem>
<P>When freeing a node from a GHashTable, Glib will first clear the node, which used to have pointers to the key and the value stored at that node. </P>
<LI class=listitem>
<P>When destroying or removing a GTree node, Glib will clear the node, which used to have pointers to the node's value, and the left and right subnodes. </P></LI></UL></DIV>
<P>Since clearing the memory has a cost, <CODE class=systemitem>--disable-gc-friendly</CODE> is the default.