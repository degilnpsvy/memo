B1.5.17 Power management
<P></P>
<P>ARMv7-M supports the use of Wait for Interrupt (WFI) and Wait for Event (WFE) instructions as part of system power management.</P>
<P>Wait for Interrupt provides a mechanism for hardware support of entry to one or more sleep states. Hardwarecan suspend execution until a wakeup event occurs. The levels of power saving, and associated wakeup latency when execution is suspended, are IMPLEMENTATION DEFINED.</P>
<P>Wait for Event provides a mechanism for software to suspend program execution until a wakeup condition occurs, with minimal or no impact on wakeup latency. Wait for Event provides some freedom for hardware to instigate power saving measures. Both WFI and WFE are hint instructions, that might have no effect on program execution. Normally, they are used in software idle loops that resume program execution only after an interrupt or event of interest occurs.</P>
<P>Note<BR>&#8226; Code using WFE and WFI must handle any spurious wakeup event caused by a debug halt or other IMPLEMENTATION DEFINED reason.<BR>&#8226; Applications must be aware that the architecture permits WFE, WFI, and SEV instructions to be implemented as NOPs.</P>
<P>For more information, see:<BR>&#8226; Wait For Event and Send Event on page B1-681<BR>&#8226; Wait For Interrupt on page B1-683.</P>
<P>While execution is suspended after a WFI or WFE, the processor is described as being in a sleep state.</P>
<P>Where a processor implements power management features, the SCR provides control and configuration of those features, see System Control Register, SCR on page B3-718. The following SCR bits control power-management functions:</P>
<P>SEVONPEND<BR>Configures interrupt transitions from inactive to pending state as wakeup events. This configuration means the system can use a masked interrupt as the wakeup event from WFE power-saving.</P>
<P>SLEEPONEXIT<BR>Enables sleep-on-exit operation, if implemented. This configuration means that, on an exception return, if no exception other than the returning exception is active, the processor suspends execution without returning from the exception. Subsequently, when another exception becomes active, the processor tail-chains that exception, see Tail-chaining on page B1-665.</P>
<P>Whether a processor supports sleep-on-exit functionality, and all aspects of sleep-on-exit behavior not specified in this manual, is IMPLEMENTATION DEFINED.</P>
<P>When a processor enters sleep mode because of the sleep-on-exit functionality, the wakeup events are identical to those for WFI.</P>
<P>A processor can exit the suspended state spuriously. ARM recommends that any software that uses the sleep-on-exit feature is written to handle spurious wakeup events and the exception return caused by such an event.</P>
<P>SLEEPDEEP<BR>Selects between different levels of sleep. When this bit is set to 1, it indicates that the wakeup time from sleep state might be longer than it is when the bit set to 0. Typically, the system can use this value to determine whether it can suspend a PLL or other clock generator. The exact behavior is IMPLEMENTATION DEFINED.