B1.5.11 Exceptions on exception entry
<P></P>
<P>During exception entry other exceptions can occur, either because of a fault on an operation involved in exception entry, or because of the arrival of an asynchronous exception, an interrupt, that is of higher priority than the current exception entry sequence.</P>
<P>For implementations that include the FP extension, see also Exceptions while saving FP state on page B1-688.</P>
<P>Late-arriving exceptions</P>
<P>The ARMv7-M architecture does not specify the point during an exception entry at which the processor recognizes the arrival of an asynchronous exception. However, to support very low interrupt latencies, the architecture permits a high priority interrupt that arrives during an exception entry to become active during that exception entry sequence, without causing the entry sequence to repeat.</P>
<P>When the processor takes an asynchronous interrupt during the exception entry sequence, the exception that caused the exception entry sequence is known as the original exception. The exception caused by the interrupt is known as the late-arriving exception.</P>
<P>In this case, the exception entry sequence started by the original exception can be used by the late-arriving exception. The processor takes the original exception after returning from the late-arriving exception. This is referred to as late-arrival preemption.</P>
<P>For a late arrival preemption, the processor enters the handler for the late-arriving exception, which becomes active. The original exception remains in the pending state.</P>
<P>A late-arriving exception can be an interrupt, a fault, or a supervisor call.</P>
<P>It is IMPLEMENTATION DEFINED what conditions, if any, cause late arrival preemption. Late arrival preemption occurs only when the late-arriving exception is of higher priority than the original exception. If an implementation supports late-arriving exceptions, the LateArrival() pseudocode function shows their operation. This function changes the ExceptionType argument used in the ExceptionTaken() function.</P>
<P>// LateArrival()<BR>// =============</P>
<P>LateArrival()</P>
<P>&nbsp;&nbsp;&nbsp; // xEpriority: the lower the value, the higher the priority</P>
<P>&nbsp;&nbsp;&nbsp; integer OEpriority; // original exception group priority<BR>&nbsp;&nbsp;&nbsp; integer LAEpriority; // late-arriving exception group priority<BR>&nbsp;&nbsp;&nbsp; integer OEnumber; // ExceptionNumber for OE<BR>&nbsp;&nbsp;&nbsp; integer LAEnumber; // ExceptionNumber for LAE</P>
<P>&nbsp;&nbsp;&nbsp; if (LAEpriority &lt; OEpriority) then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptionTaken(LAEnumber); // late-arriving exception taken<BR>&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptionTaken(OEnumber); // original exception taken</P>
<P>For the definition of ExceptionTaken() see Exception entry behavior on page B1-643.</P>
<P>Derived exceptions on exception entry</P>
<P>Where an exception entry sequence itself causes a fault, the exception that caused the exception entrysequence is known as the original exception. The fault that is caused by the exception entry sequence is known as the derived exception. The code stream running at the time of the original exception is known as the preempted code, and the execution priority of that code is the preempted priority.</P>
<P>The following derived exceptions can occur during exception entry:</P>
<P>&#8226; A MemManage fault on a write to the stack memory performed as part of the exception entry. This is described as a MSTKERR class of MemManage fault.<BR>&#8226; A BusFault on a write to the stack memory performed as part of the exception entry. This is described as a STKERR class of BusFault.<BR>&#8226; A watchpoint, when halting debug is not enabled. This causes a DebugMonitorFault on exception entry.<BR>&#8226; A BusFault on reading the vector for the original exception. This is always treated as a HardFault.</P>
<P>If the preempted priority is higher than or equal to the priority of the derived exception then:<BR>&#8226; if the derived exception is a DebugMonitorFault, the processor ignores the derived exception<BR>&#8226; otherwise, the processor escalates the derived exception to HardFault.</P>
<P>Note<BR>When the preempted priority is higher than or equal to the priority of the derived exception, the priority of the original exception has no effect on whether the processor ignores a DebugMonitorFault, or escalates the derived exception.</P>
<P>A derived exception is treated similarly to a late arriving exception and an implementation can use late arrival preemption to handle derived exceptions. Late arrival preemption can occur only if the derived exception, after escalation if appropriate, is of higher priority than the original exception, but it is IMPLEMENTATION DEFINED exactly what conditions, if any, lead to late arrival preemption.</P>
<P>If the processor does not use the late-arrival preemption mechanism to handle a derived exception, thederived exception becomes pending, and the processor takes the exception in accordance with the prioritization rules for pending exceptions.</P>
<P>If the processor handles the derived exception using late-arrival preemption, it enters the handler for the derived exception, which becomes active. The original exception remains in the pending state.</P>
<P>The DerivedLateArrival() pseudocode function shows this operation. This function changes the ExceptionType argument used in the ExceptionTaken() function.</P>
<P>DerivedLateArrival() Handles a derived late arriving exception Derived exceptions on exception entry on page B1-663<BR>// DerivedLateArrival()<BR>// ====================<BR>DerivedLateArrival()</P>
<P>// xEpriority: the lower the value, the higher the priority<BR>// PE: the pre-empted exception - before exception entry<BR>// OE: the original exception - exception entry<BR>// DE: the derived exception - fault on exception entry</P>
<P>integer PEpriority; // pre-empted exception group priority<BR>integer OEpriority; // group priority of the original exception<BR>integer DEpriority; // derived exception group priority</P>
<P>integer PEnumber; // ExceptionNumber for PE<BR>integer OEnumber; // ExceptionNumber for OE<BR>integer DEnumber; // ExceptionNumber for DE</P>
<P>boolean DEisDbgMonFault; // DE is a DebugMonitorFault</P>
<P>if DEpriority &gt;= PEpriority &amp;&amp; DEisDbgMonFault then<BR>&nbsp;&nbsp;&nbsp; ExceptionTaken(OEnumber); // ignore the DebugMonitorFault<BR>if DEpriority &gt;= PEpriority &amp;&amp; !DEisDbgMonFault then<BR>&nbsp;&nbsp;&nbsp; DEpriority = -1; // escalate DE to HardFault<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // (incl. BKPT with DebugMonitor disabled)<BR>&nbsp;&nbsp;&nbsp; SetPending(OEnumber); // OE to Pending state<BR>&nbsp;&nbsp;&nbsp; ExceptionTaken(HardFault);<BR>else<BR>&nbsp;&nbsp;&nbsp; if DEpriority &lt; OEpriority then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetPending(OEnumber); // OE to Pending state<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptionTaken(DEnumber); // start execution of the DE<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // tail-chaining IMPLEMENTATION DEFINED<BR>&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp; SetPending(DEnumber); // DE to Pending state<BR>&nbsp;&nbsp;&nbsp; ExceptionTaken(OEnumber); // start execution of the OE</P>
<P>For definitions of ExceptionTaken() and PushStack() see Exception entry behavior on page B1-643.</P>
<P>The ICSR and SHCSR maintain pending state information, see Interrupt Control and State Register, ICSR on page B3-713 and System Handler Control and State Register, SHCSR on page B3-725.</P>
<P>Note<BR>It is IMPLEMENTATION DEFINED whether late-arriving exceptions are supported and can affect derived exceptions. If an implementation supports late-arriving exceptions, then in the late-arrival pseudocode described in Late-arriving exceptions on page B1-662:<BR>&#8226; DE maps to OE<BR>&#8226; the late-arriving exception maps to SE.