B1.5.12 Exceptions on exception return, and tail-chaining exceptions
<P></P>
<P>During exception return, other exceptions can affect behavior, either because of a fault on the operations performed during exception return, or because of an asynchronous exception that is of higher priority than the priority level that the exception return is returning to. The asynchronous exception might be already pending, or might arrive during the exception return.</P>
<P>The Exception Return Link describes the target of the exception return. The target priority is the higher of:<BR>&#8226; the priority of the highest priority active exception, excluding the exception being returned from<BR>&#8226; the boosted priority set by the special-purpose mask registers.</P>
<P>Derived exceptions on exception return</P>
<P>Where an exception return sequence causes a fault exception, the exception caused by the exception return sequence is known as the derived exception.</P>
<P>The following derived exceptions can occur during exception return:<BR>&#8226; A MemManage fault on a read of the stack memory performed as part of the exception return. This is described as a MemManage fault of the MUNSTKERR class.<BR>&#8226; A BusFault on a read of the stack memory performed as part of the exception return. This is described as a BusFault of the UNSTKERR class.<BR>&#8226; A DebugMonitorFault caused by a watchpoint on the exception return.</P>
<P>Note<BR>The ExceptionReturn() pseudocode function handles integrity checks that cause UsageFault exceptions, and therefore the list of derived exceptions does not include this case. An implementation can optimize the handling of these exceptions, using a method similar to tail-chaining.</P>
<P>If the target priority is higher than or equal to the priority of the derived exception, then:<BR>&#8226; if the derived exception is a DebugMonitorFault, the processor ignores the derived exception<BR>&#8226; otherwise, the processor escalates the derived exception to HardFault.</P>
<P>If a derived exception occurs on exception return, the processor uses tail-chaining to enter the handler for the derived exception.</P>
<P>Tail-chaining</P>
<P>Tail-chaining is the optimization of an exception return and an exception entry sequence by removing the load and store of the key context state.</P>
<P>An implementation can use tail-chaining in the following cases:<BR>&#8226; To handle a derived exception.<BR>&#8226; As an optimization to improve interrupt response when there is a pending exception with a higher priority than the target priority. In this case, the processor takes the Pending exception immediately on exception return, and tail-chaining optimizes the exception return and entry sequence.</P>
<P>In the tail-chaining optimization, the processor combines the exception return and exception entry sequences to form the sequence described by the TailChain() pseudocode function, in which ReturningExceptionNumber is the number of the exception being returned from, and ExceptionNumber is the number of the exception being entered by tail-chaining. EXC_RETURN is the EXC_RETURN value that started the original exception return.</P>
<P>// TailChain()<BR>// ===========</P>
<P>TailChain(bits(28) EXC_RETURN)<BR>&nbsp;&nbsp;&nbsp; assert CurrentMode == Mode_Handler;<BR>&nbsp;&nbsp;&nbsp; if !IsOnes(EXC_RETURN&lt;27:4&gt;) then UNPREDICTABLE;</P>
<P>&nbsp;&nbsp;&nbsp; integer ReturningExceptionNumber = UInt(IPSR&lt;8:0&gt;);<BR>&nbsp;&nbsp;&nbsp; LR = 0xF0000000 + EXC_RETURN;<BR>&nbsp;&nbsp;&nbsp; DeActivate(ReturningExceptionNumber);<BR>&nbsp;&nbsp;&nbsp; ExceptionTaken(ExceptionNumber);</P>
<P>For a definition of ExceptionTaken() see Exception entry behavior on page B1-643.</P>
<P>For a definition of DeActivate() see Exception return behavior on page B1-652.</P>
<P>Use of tail-chaining as an optimization for pending exceptions</P>
<P>On an exception return, using tail-chaining to optimize the handling of a pending exception with sufficient priority to be taken immediately after the exception return can change the exception behavior. In particular,many derived exceptions that might occur during the exception return followed by exception entry might not occur during tail-chaining. If this happens, the derived exceptions can occur on return from the tail-chained exception, if the conditions causing them still apply.</P>
<P>Late arrival preemption and tail-chaining during exception returns</P>
<P>The ARMv7-M architecture does not specify the point at which the processor recognizes any asynchronous exception that arrives during an exception. If the processor recognizes a new exception while it is tail-chaining another exception, and the new exception has higher priority than the exception being tail-chained, then the processor can, instead, take the new exception, using late-arrival preemption. It is IMPLEMENTATION DEFINED what conditions, if any, lead to late arrival preemption.</P>
<P>Late-arrival preemption can occur during a tail-chaining optimization of a derived exception on an exception return. The processor marks the derived exception as pending when it takes a new exception because of late-arrival preemption of the derived exception by the new exception.