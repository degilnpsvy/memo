B1.5.13 Exception status and control</P>
<P>The System Control Block in the System Control Space includes register support for managing the exception model, see About the System Control Block on page B3-709. These registers are grouped as follows:<BR>&#8226; general configuration, status and control:<BR>&nbsp;&nbsp; &#8213; the VTOR, see The vector table on page B1-634 and Vector Table Offset Register, VTOR on page B3-716<BR>&nbsp;&nbsp; &#8213; the ICSR, see Interrupt Control and State Register, ICSR on page B3-713<BR>&nbsp;&nbsp; &#8213; the AIRCR, see Application Interrupt and Reset Control Register, AIRCR on page B3-717<BR>&nbsp;&nbsp; &#8213; the SCR, see Power management on page B1-680 and System Control Register, SCR on page B3-718<BR>&nbsp;&nbsp; &#8213; the CCR, see Configuration and Control Register, CCR on page B3-720<BR>&nbsp;&nbsp; &#8213; the SHPRs, see System Handler Priority Register 1, SHPR1 on page B3-723, System Handler Priority Register 2, SHPR2 on page B3-723, and System Handler Priority Register 3, SHPR3 on page B3-724<BR>&nbsp;&nbsp; &#8213; the SHCSR, see System Handler Control and State Register, SHCSR on page B3-725<BR>&nbsp;&nbsp; &#8213; fault handling status and control, see Fault behavior on page B1-669 and Fault status and address information on page B1-673<BR>&nbsp;&nbsp; &#8213; the STIR, see Software Triggered Interrupt Register, STIR on page B3-742<BR>&#8226; SysTick support, see The system timer, SysTick on page B3-744<BR>&#8226; NVIC support, see Nested Vectored Interrupt Controller, NVIC on page B3-750.</P>
<P>Using the ICSR, see Interrupt Control and State Register, ICSR on page B3-713, software can:<BR>&#8226; set the NMI, SysTick and PendSV exceptions to the pending state<BR>&#8226; clear the pending state of the SysTick and PendSV exceptions<BR>&#8226; find status information for any pending or active exceptions.</P>
<P>Using the AIRCR, see Application Interrupt and Reset Control Register, AIRCR on page B3-717, software can:<BR>&#8226; control exception priority grouping, see Priority grouping on page B1-636<BR>&#8226; read the endianness used for data accesses, see Control of endianness in ARMv7-M on page A3-86<BR>&#8226; control reset behavior, see Reset management on page B1-679.</P>
<P>The AIRCR includes a vector key field. The processor ignores any write to the register that does not write the key value 0x05FA to this field.</P>
<P>Using the CCR, see Configuration and Control Register, CCR on page B3-720, software can enable or disable:<BR>&#8226; divide by zero faults, alignment faults and some features of processor operation<BR>&#8226; BusFaults at priority -1 and higher.</P>
<P>Using the SHPRs, software can control the priority of the BusFault, MemManage, UsageFault, Debug Monitor Fault, SVCall, SysTick and PendSV exceptions, see:<BR>&#8226; System Handler Priority Register 1, SHPR1 on page B3-723<BR>&#8226; System Handler Priority Register 2, SHPR2 on page B3-723<BR>&#8226; System Handler Priority Register 3, SHPR3 on page B3-724.</P>
<P>Using the SHCSR, see System Handler Control and State Register, SHCSR on page B3-725, software can:<BR>&#8226; Access the pending and active status of faults and supervisor calls<BR>&#8226; Access the active status of the SysTick and PendSV interrupts<BR>&#8226; Enable or disable the UsageFault, BusFault and MemManage exception handlers. When a fault handler is disabled, the processor escalates the corresponding fault, see Priority escalation on page B1-640.</P>
<P>Note<BR>&#8226; There are no explicit active state bits for reset, NMI or HardFault, the fixed priority exceptions.<BR>&#8226; The debug monitor is enabled in a debug control register, see Debug Exception and Monitor Control Register, DEMCR on page C1-838.<BR>&#8226; SysTick is enabled in a SysTick control register, see SysTick Control and Status Register, SYST_CSR on page B3-746.<BR>&#8226; The active and pending state bits support the save and restore of information on a context switch. In particular, for an explicit software write to the SHCSR:<BR>&nbsp;&nbsp; &#8213; setting an active bit to 1 does not cause an exception entry<BR>&nbsp;&nbsp; &#8213; clearing an active bit to 0 does not cause an exception return<BR>&nbsp;&nbsp; &#8213; the effect of setting a pending bit to 1 for an exception with priority greater than or equal to the execution priority is UNPREDICTABLE.</P>
<P>Writing to the STIR, see Software Triggered Interrupt Register, STIR on page B3-742, software can use an exception number to set the corresponding pending register bit to 1. Only external interrupts can be made pending using this method. The processor ignores any attempt to write an exception number:<BR>&#8226; in the range 0-15<BR>&#8226; that corresponds to an interrupt that it does not support.</P>
<P>Using the NVIC registers, see NVIC register support in the SCS on page B3-752, software can perform the following operations for external interrupts:<BR>&#8226; enable or disable<BR>&#8226; set or clearing the pending state<BR>&#8226; read the active state<BR>&#8226; program the priority.</P>
<P>Note<BR>An interrupt can become pending when it is disabled. Enabling an interrupt means a pending interrupt can become active.