B1.5.19 Wait For Interrupt
<P></P>
<P>In ARMv7-M, Wait For Interrupt is supported through the hint instruction, WFI. For more information, see WFI on page A7-611.<BR>When a processor issues a WFI instruction it can suspend execution and enter a low-power state. It can remain in that state until the processor detects one of the following WFI wakeup events:<BR>&#8226; A reset.<BR>&#8226; An asynchronous exception at a priority that, if PRIMASK was set to 0, would preempt any currently<BR>active exceptions.<BR>Note<BR>The processor ignores the value of PRIMASK in determining whether an asynchronous exception is a WFI wakeup event.<BR>&#8226; If debug is enabled, a debug event.<BR>&#8226; An IMPLEMENTATION DEFINED WFI wakeup event.</P>
<P>When the hardware detects a WFI wakeup event, or earlier if the implementation chooses, the WFI instruction completes. The processor then either:<BR>&#8226; takes a pending exception, if, taking account of the value of PRIMASK, there is a pending exception with sufficient priority to preempt execution<BR>&#8226; resumes execution from the instruction immediately following the WFI instruction.</P>
<P>The exception prioritization rules mean that, if the processor executes a WFI instruction at NMI priority, the only guaranteed ways of forcing that instruction to complete are a reset or Debug state entry.</P>
<P>Note<BR>&#8226; ARM recommends that software always uses the WFI instruction in a loop, and does not assume that the processor either enters low-power state, or remains in low-power state, after any particular execution of the WFI instruction. This is because:<BR>&nbsp;&nbsp; &#8213; the architecture defines WFI as a NOP-compatible hint, that the processor can ignore<BR>&nbsp;&nbsp; &#8213; a processor can exit the low-power state spuriously, or because of debug, or for some IMPLEMENTATION-DEFINED reason.<BR>&#8226; Some implementations of Wait For Interrupt drain down any pending memory activity before suspending execution. This increases the power saving, by increasing the area over which clocks can be stopped. The ARM architecture does not require this operation, and software must not rely on Wait For Interrupt operating in this way.</P>
<P>Using WFI to indicate an idle state on bus interfaces<BR>A common implementation practice is to complete any entry into power-down routines with a WFI instruction. Typically, the WFI instruction:<BR>1. forces the suspension of execution, and of all associated bus activity<BR>2. ceases to execute instructions from the processor.</P>
<P>The control logic required to do this typically tracks the activity of the bus interfaces of the processor. This means it can signal to an external power controller that there is no ongoing bus activity.</P>
<P>The exact nature of this interface is IMPLEMENTATION DEFINED, but the use of Wait For Interrupt as the only architecturally-defined mechanism that completely suspends execution makes it very suitable as the preferred power-down entry mechanism.</P>
<P>Pseudocode details of Wait For Interrupt</P>
<P>The WaitForInterrupt() pseudocode procedure optionally suspends execution until a WFI wakeup event or reset occurs, or until some earlier time if the implementation chooses.</P>
<P>&nbsp;