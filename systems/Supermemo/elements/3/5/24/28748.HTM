/* SCTLR bit meanings. Several bits have been reused in newer<BR>&nbsp;* versions of the architecture; in that case we define constants<BR>&nbsp;* for both old and new bit meanings. Code which tests against those<BR>&nbsp;* bits should probably check or otherwise arrange that the CPU<BR>&nbsp;* is the architectural version it expects.<BR>&nbsp;*/<BR>#define SCTLR_M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 0)<BR>#define SCTLR_A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 1)<BR>#define SCTLR_C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 2)<BR>#define SCTLR_W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 3) /* up to v6; RAO in v7 */<BR>#define SCTLR_SA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 3)<BR>#define SCTLR_P&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 4) /* up to v5; RAO in v6 and v7 */<BR>#define SCTLR_SA0&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 4) /* v8 onward, AArch64 only */<BR>#define SCTLR_D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 5) /* up to v5; RAO in v6 */<BR>#define SCTLR_CP15BEN (1U &lt;&lt; 5) /* v7 onward */<BR>#define SCTLR_L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 6) /* up to v5; RAO in v6 and v7; RAZ in v8 */<BR>#define SCTLR_B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 7) /* up to v6; RAZ in v7 */<BR>#define SCTLR_ITD&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 7) /* v8 onward */<BR>#define SCTLR_S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 8) /* up to v6; RAZ in v7 */<BR>#define SCTLR_SED&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 8) /* v8 onward */<BR>#define SCTLR_R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 9) /* up to v6; RAZ in v7 */<BR>#define SCTLR_UMA&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 9) /* v8 onward, AArch64 only */<BR>#define SCTLR_F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 10) /* up to v6 */<BR>#define SCTLR_SW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 10) /* v7 onward */<BR>#define SCTLR_Z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 11)<BR>#define SCTLR_I&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 12)<BR>#define SCTLR_V&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 13)<BR>#define SCTLR_RR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 14) /* up to v7 */<BR>#define SCTLR_DZE&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 14) /* v8 onward, AArch64 only */<BR>#define SCTLR_L4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 15) /* up to v6; RAZ in v7 */<BR>#define SCTLR_UCT&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 15) /* v8 onward, AArch64 only */<BR>#define SCTLR_DT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 16) /* up to ??, RAO in v6 and v7 */<BR>#define SCTLR_nTWI&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 16) /* v8 onward */<BR>#define SCTLR_HA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 17)<BR>#define SCTLR_BR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 17) /* PMSA only */<BR>#define SCTLR_IT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 18) /* up to ??, RAO in v6 and v7 */<BR>#define SCTLR_nTWE&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 18) /* v8 onward */<BR>#define SCTLR_WXN&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 19)<BR>#define SCTLR_ST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 20) /* up to ??, RAZ in v6 */<BR>#define SCTLR_UWXN&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 20) /* v7 onward */<BR>#define SCTLR_FI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 21)<BR>#define SCTLR_U&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 22)<BR>#define SCTLR_XP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 23) /* up to v6; v7 onward RAO */<BR>#define SCTLR_VE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 24) /* up to v7 */<BR>#define SCTLR_E0E&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 24) /* v8 onward, AArch64 only */<BR>#define SCTLR_EE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 25)<BR>#define SCTLR_L2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 26) /* up to v6, RAZ in v7 */<BR>#define SCTLR_UCI&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 26) /* v8 onward, AArch64 only */<BR>#define SCTLR_NMFI&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 27)<BR>#define SCTLR_TRE&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 28)<BR>#define SCTLR_AFE&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 29)<BR>#define SCTLR_TE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1U &lt;&lt; 30)