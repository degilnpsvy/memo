/**<BR>&nbsp;* vscnprintf - Format a string and place it in a buffer<BR>&nbsp;* @buf: The buffer to place the result into<BR>&nbsp;* @size: The size of the buffer, including the trailing null space<BR>&nbsp;* @fmt: The format string to use<BR>&nbsp;* @args: Arguments for the format string<BR>&nbsp;*<BR>&nbsp;* The return value is the number of characters which have been written into<BR>&nbsp;* the @buf not including the trailing '\0'. If @size is == 0 the function<BR>&nbsp;* returns 0.<BR>&nbsp;*<BR>&nbsp;* If you're not already dealing with a va_list consider using scnprintf().<BR>&nbsp;*<BR>&nbsp;* See the vsnprintf() documentation for format string extensions over C99.<BR>&nbsp;*/<BR>int vscnprintf(char *buf, size_t size, const char *fmt, va_list args)<BR>{<BR><SPAN class=cloze>[...]</SPAN><BR>}<BR>EXPORT_SYMBOL(vscnprintf);