<B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>E3.1.118 FunctionReturn</FONT></SPAN></B>
<P></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// FunctionReturn()</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// ================</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>ExcInfo FunctionReturn()</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>exc = DefaultExcInfo();</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Pull the return address and IPSR off the Secure stack</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>mode = CurrentMode();</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>spName = LookUpSP_with_security_mode(TRUE, mode);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>framePtr = _SP(spName);</FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">!IsAligned(framePtr, 8) <B>then </B>UNPREDICTABLE;</SPAN></FONT></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Only stack locations, not the load order are architected</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>RETPSR_Type newPSR;</FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">exc.fault == NoFault <B>then </B>(exc, newPSR) = Stack(framePtr, 4, spName, mode);</SPAN></FONT></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">exc.fault == NoFault <B>then </B>(exc, newPC) = Stack(framePtr, 0, spName, mode);</SPAN></FONT></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Check the IPSR value that's been unstacked is consistent with the current</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// mode, and being originally called from the Secure state.</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// NOTE: It is IMPLEMENTATION DEFINED whether this check is performed before</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// or after the load of the return address above.</FONT></SPAN></I></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">(exc.fault == NoFault) &amp;&amp;</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>!(((IPSR.Exception == 0&lt;8:0&gt;) &amp;&amp; (newPSR.Exception == 0&lt;8:0&gt;)) ||</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>((IPSR.Exception == 1&lt;8:0&gt;) &amp;&amp; (newPSR.Exception != 0&lt;8:0&gt;))) <B>then</B></FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">HaveMainExt() <B>then</B></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>UFSR_S.INVPC = '1';</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Create the exception. NOTE: If Main Extension not implemented then the fault</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// always escalates to a HardFault</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>exc = CreateException(UsageFault, TRUE, TRUE);</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// The behaviour is UNPREDICTABLE if the IPSR values isn't supported by the PE</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>excNum = UInt(newPSR.Exception);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>validIPSR = excNum <B>IN </B>{0, 1, NMI, HardFault, SVCall, PendSV, SysTick};</FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">!validIPSR &amp;&amp; HaveMainExt() <B>then</B></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>validIPSR = excNum <B>IN </B>{MemManage, BusFault, UsageFault, SecureFault, DebugMonitor};</FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">!validIPSR &amp;&amp; !IsIrqValid(excNum) <B>then </B>UNPREDICTABLE;</SPAN></FONT></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Only consume the function return stack frame and update the XPSR/PC if no</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// faults occured.</FONT></SPAN></I></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">exc.fault == NoFault <B>then</B></SPAN></FONT></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Transition to the Secure state</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>CurrentState = SecurityState_Secure;</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Update stack pointer. NOTE: Stack pointer limit not checked on function</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// return as stack pointer guaranteed to be ascending not descending.</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>_R[spName] = framePtr + 8;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>IPSR.Exception = newPSR.Exception;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>CONTROL_S.SFPA = newPSR.SFPA;</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// IT/ICI bits cleared to prevent Non-secure code interfering with</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// Secure execution</FONT></SPAN></I></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">if </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">HaveMainExt() <B>then</B></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>ITSTATE.IT = Zeros(8);</FONT></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// if EPSR.T == 0, a UsageFault('Invalid State') or a HardFault is taken</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// on the next instruction depending on whether the Main Extension is</FONT></SPAN></I></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>// is implemented or not.</FONT></SPAN></I></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>EPSR.T = newPC&lt;0&gt;;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt"><FONT face=Calibri>BranchTo(newPC&lt;31:1&gt;:'0');</FONT></SPAN></P>
<P><FONT face=Calibri><B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">return </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt">exc;</SPAN></FONT>