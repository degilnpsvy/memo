B8.1 Memory protection unit 
<P></P>
<P>RHPNK <FONT class=extract>In an implementation that includes the Protected Memory System Architecture (PMSA), system address space is protected by a memory protection unit (MPU).</FONT><BR>RTBPJ <FONT class=extract>PMSAv8-M only supports a unified memory model. All enabled regions support instruction and data accesses.</FONT><BR>RHBNG <FONT class=extract>Memory attributes are determined from the default system address map or by using an MPU.</FONT><BR>RMCCL <FONT class=extract>The default memory map can be configured to provide a background region for privileged accesses.</FONT><BR>RBXCN <FONT class=extract>MPU support in ARMv8-M is optional.</FONT><BR>RPBPJ <FONT class=extract>When the MPU is enabled, the PE can be configured to use the default system map when it processes NMI and HardFault exceptions.</FONT><BR>RJVJC <FONT class=extract>When the MPU is disabled or not present, accesses use memory attributes from the default system address map.</FONT><BR>RDBBM <FONT class=extract>The MPU divides the memory into regions.</FONT><BR>RJVCN <FONT class=extract>An individual MPU region is defined by:<BR>Address &gt;= MPU_RBAR.BASE:&#8216;00000&#8217; &amp;&amp; Address &lt;= MPU_RLAR.LIMIT:&#8216;11111&#8217;</FONT><BR>RMNDS <FONT class=extract>The number of supported MPU regions is IMPLEMENTATION DEFINED.</FONT><BR>IWTCL <FONT class=extract>Because the MPU_TYPE register is banked, an implementation can have a different number of MPU regions, including no MPU regions, for each Security state.</FONT><BR>RXGFK <FONT class=extract>All MPU regions are aligned to a multiple of 32 bytes.</FONT><BR>RBPGB <FONT class=extract>The PE can fetch and execute instructions from each MPU region according to the value of MPU_RBAR.XN. The value of MPU_RBAR.XN can be used by privileged software.</FONT><BR>RMNSK <FONT class=extract>Accesses to the Private Peripheral Bus (PPB) always use memory attributes from the default system address map.</FONT><BR>RRPWB <FONT class=extract>Exception vector reads from the Vector Address Table always use the default system address map.</FONT><BR>RCPMW <FONT class=extract>The MPU is restricted in how it can change the default memory map attributes associated with System space, that is, for addresses 0xE0000000 and higher, in the following ways:<BR>&#8226; System space is always XN.<BR>&#8226; The MPU can map system space regions that default to Device-nGnRE to Device-nGnRnE.<BR>&#8226; The effect of remapping a System space region that defaults to Device memory as Normal memory is UNPREDICTABLE.</FONT><BR>RDCHP <FONT class=extract>The following accesses generate a MemManage fault:<BR>&#8226; An access to an address that matches in more than one region.<BR>&#8226; An access that does not match all access conditions for that region.<BR>&#8226; An access that matches a background region or default memory map if the MPU is enabled.<BR>However, privileged accesses are permitted if either:<BR>&#8226; MPU_CTRL PRIVDEFENA ==1.<BR>&#8226; Executing at a priority less than zero when MPU_CTRLHFNMIENA is set.</FONT><BR>RGLNQ <FONT class=extract>A memory access to an address that matches in more than one region, or does not match all access conditions of a region address match, with the MPU enabled, or a background or default memory map match, generates a precise fault.</FONT><BR>RKMTF <FONT class=extract>For data accesses, the MPU memory attribution and privilege checking uses the configuration registers that correspond to the current executing Security state of the PE.</FONT><BR>RRLBR <FONT class=extract>For instruction fetches, the MPU memory attribution and privilege checking uses the configuration registers associated with the address that is fetched.</FONT><BR>RPLJG <FONT class=extract>Setting MPU_CTRL.HFNMIENA to zero disables the MPU if the requested priority for the handler of the HardFault, NMI and exceptions that the MPU is associated with is negative.</FONT><BR>See also:<BR>&#8226; System address map on page B7-170.<BR>&#8226; MPU_CTRL, MPU Control Register on page D1-1029.