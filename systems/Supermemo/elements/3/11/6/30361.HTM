/* Return true if the specified exception level is running in AArch64 state. */<BR>static inline bool arm_el_is_aa64(CPUARMState *env, int el)<BR>{<BR>&nbsp;&nbsp;&nbsp; /* This isn't valid for EL0 (if we're in EL0, is_a64() is what you want,<BR>&nbsp;&nbsp;&nbsp;&nbsp; * and if we're not in EL0 then the state of EL0 isn't well defined.)<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; assert(el &gt;= 1 &amp;&amp; el &lt;= 3);<BR>&nbsp;&nbsp;&nbsp; bool aa64 = arm_feature(env, ARM_FEATURE_AARCH64);</P>
<P>&nbsp;&nbsp;&nbsp; /* The highest exception level is always at the maximum supported<BR>&nbsp;&nbsp;&nbsp;&nbsp; * register width, and then lower levels have a register width controlled<BR>&nbsp;&nbsp;&nbsp;&nbsp; * by bits in the SCR or HCR registers.<BR>&nbsp;&nbsp;&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp; if (el == 3) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return aa64;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (arm_feature(env, ARM_FEATURE_EL3)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aa64 = aa64 &amp;&amp; (env-&gt;cp15.scr_el3 &amp; SCR_RW);<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (el == 2) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return aa64;<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (arm_feature(env, ARM_FEATURE_EL2) &amp;&amp; !arm_is_secure_below_el3(env)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aa64 = aa64 &amp;&amp; (env-&gt;cp15.hcr_el2 &amp; HCR_RW);<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; return aa64;<BR>}