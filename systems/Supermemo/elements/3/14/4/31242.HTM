<H1>fork() and Synchronization</H1>
<DIV class=sect1><A id=_pipes class=anchor></A>
<H2>Pipes</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>Chains of communicating processes can be created by exploiting the <CODE>pipe()</CODE> system call.</DIV>
<UL>
<LI>
<P><CODE>pipe()</CODE> creates an anonymous pipe object and returns a two file descriptors: one for the read-only end, and the other for the write-only end.</P></LI>
<LI>
<P>Anything written to the write-only end of the pipe is immediately available at the read-only end of the pipe.</P></LI>
<LI>
<P>Pipe contents are buffered in memory.</P></LI>
<LI>
<P><STRONG>Why is this useful?</STRONG></P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_ipc_using_code_fork_code_and_code_pipe_code class=anchor></A>
<H2>IPC Using <CODE>fork()</CODE> and <CODE>pipe()</CODE></H2>
<DIV class=sectionbody>
<DIV class="olist arabic">
<OL class=arabic>
<LI>
<P>Before calling <CODE>fork()</CODE> the parent creates a pipe object by calling pipe().</P></LI>
<LI>
<P>Next, it calls <CODE>fork()</CODE>.</P></LI>
<LI>
<P>After <CODE>fork()</CODE> the parent closes its copy of the read-only end and the child closes its copy of the write-only end.</P></LI>
<LI>
<P>Now the parent can pass information to the child.</P></LI></OL></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vcenter">
<DIV class=content><IMG style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/pipes-example.svg" data-pagespeed-url-hash="4022361805"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vcenter">
<DIV class=content><IMG style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/pipes-example-1.svg" data-pagespeed-url-hash="987970941"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vcenter">
<DIV class=content><IMG style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/pipes-example-2.svg" data-pagespeed-url-hash="1282470862"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vcenter">
<DIV class=content><IMG style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/pipes-example-3.svg" data-pagespeed-url-hash="1576970783"></DIV></DIV></DIV></DIV>
<DIV class=listingblock>
<DIV class=content><PRE class=lang-perl><SPAN class=hljs-comment># pipeEnds[0] gets the read end; pipeEnds[1] gets the write end.</SPAN>
<SPAN class=hljs-keyword>int</SPAN> pipeEnds[<SPAN class=hljs-number>2</SPAN>];

<SPAN class=hljs-keyword>pipe</SPAN>(pipeEnds);

<SPAN class=hljs-keyword>int</SPAN> returnCode = <SPAN class=hljs-keyword>fork</SPAN>();

<SPAN class=hljs-keyword>if</SPAN> (returnCode == <SPAN class=hljs-number>0</SPAN>) {

  <SPAN class=hljs-comment># Don't need a loopback.</SPAN>
  <SPAN class=hljs-keyword>close</SPAN>(pipeEnds[<SPAN class=hljs-number>1</SPAN>]);

  <SPAN class=hljs-comment># Read some data from the pipe.</SPAN>
  char data[<SPAN class=hljs-number>14</SPAN>];
  <SPAN class=hljs-keyword>read</SPAN>(pipeEnds[<SPAN class=hljs-number>0</SPAN>], data, <SPAN class=hljs-number>16</SPAN>);
} <SPAN class=hljs-keyword>else</SPAN> {

  <SPAN class=hljs-comment># Don't need a loopback.</SPAN>
  <SPAN class=hljs-keyword>close</SPAN>(pipeEnds[<SPAN class=hljs-number>0</SPAN>]);

  <SPAN class=hljs-comment># Write some data to the pipe.</SPAN>
  <SPAN class=hljs-keyword>write</SPAN>(pipeEnds[<SPAN class=hljs-number>1</SPAN>], <SPAN class=hljs-string>"Hello, sweet child!\n"</SPAN>, <SPAN class=hljs-number>14</SPAN>);
}</PRE></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_issues_with_code_fork_code class=anchor></A>
<H2>Issues with <CODE>fork()</CODE></H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>Copying all that state is expensive!</DIV>
<UL>
<LI>
<P>Especially when the next thing that a process frequently does is start load a new binary which destroys most of the state <CODE>fork()</CODE> has carefully copied!</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title>Several solutions to this problem:</DIV>
<UL>
<LI>
<P><STRONG>Optimize existing semantics</STRONG>: through copy-on-write, a clever memory-management optimization we will discuss in several weeks.</P></LI>
<LI>
<P><STRONG>Change the semantics</STRONG>: <CODE>vfork()</CODE>, which will fail if the child does anything other than immediately load a new executable.</P>
<DIV class=ulist>
<UL>
<LI>
<P>Does not copy the address space!</P></LI></UL></DIV></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title>What if I don&#8217;t want to copy all of my process state?</DIV>
<UL>
<LI>
<P><CODE>fork()</CODE> is now replaced by <CODE>clone()</CODE>, a more flexible primitive that enables more control:</P>
<DIV class=ulist>
<UL>
<LI>
<P>over sharing, including sharing memory, and signal handlers,</P></LI>
<LI>
<P>and over child execution, which begins at a function pointer passed to the system call instead of resuming at the point where <CODE>fork()</CODE> was called.</P></LI></UL></DIV></LI>
<LI>
<P>Try <CODE>man clone</CODE> in your CSE421 VM.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_the_tree_of_life class=anchor></A>
<H2>The Tree of Life</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P><CODE>fork()</CODE> establishes a parent-child relationship between two process at the point when each one is created.</P></LI>
<LI>
<P>The <CODE>pstree</CODE> utility allows you to visualize these relationships.</P></LI></UL></DIV>
<DIV class="imageblock slide expand">
<DIV class=content><IMG style="WIDTH: 80%" alt=pstree src="https://www.ops-class.org/img/slides/figures/pstree.svg" data-pagespeed-url-hash="1180122122"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_fast_forward_synchronization class=anchor></A>
<H2>Fast Forward: Synchronization</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>What you need to know</DIV>
<UL>
<LI>
<P>The OS creates the <EM>illusion of concurrency</EM> by quickly switching the processor(s) between multiple threads</P>
<DIV class=ulist>
<UL>
<LI>
<P>We will back up and discuss how this happens after discussion synchronization</P></LI></UL></DIV></LI>
<LI>
<P><STRONG>Threads</STRONG> are used to abstract and multiplex the CPU</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_pandora_s_concurrency_box class=anchor></A>
<H2>Pandora&#8217;s Concurrency Box</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>The illusion of concurrency is both <STRONG>powerful</STRONG> and <STRONG>useful</STRONG>:</DIV>
<UL>
<LI>
<P>It helps us think about how to structure our applications.</P></LI>
<LI>
<P>It hides latencies caused by slow hardware devices.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title>Unfortunately, concurrency also creates <STRONG>problems</STRONG>:</DIV>
<UL>
<LI>
<P><STRONG>Coordination</STRONG>: how do we enable efficient communication between the multiple threads involved in performing a single task?</P></LI>
<LI>
<P><STRONG>Correctness</STRONG>: how do we ensure that shared state remains consistent when being accessed by multiple threads concurrently? How do we enforce time-based semantics?</P></LI>
<LI>
<P>We will focus on <STRONG>correctness</STRONG> today but return to <STRONG>coordination</STRONG> later.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_patient_0 class=anchor></A>
<H2>Patient 0</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>The <STRONG>operating system</STRONG> itself is one of the most difficult concurrent programs to write. Why?</DIV>
<UL>
<LI>
<P>It is multiplexing access to hardware resources and therefor sharing a great deal of state between multiple processes!</P></LI>
<LI>
<P>It frequently uses many threads to hide hardware delays while servicing devices and application requests.</P></LI>
<LI>
<P><STRONG>Lots of shared state</STRONG> plus <STRONG>lots of threads</STRONG> equals a difficult synchronization problem.</P></LI>
<LI>
<P>Also, if the operating system gets synchronization wrong <STRONG>bad things happen</STRONG>.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_concurrency_v_parallelism class=anchor></A>
<H2>Concurrency v. Parallelism</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>The <A class=external href="https://golang.org/" target=_blank>Go developers</A> have a great description of this distinction. <A class=external href="http://blog.golang.org/concurrency-is-not-parallelism" target=_blank>According to them</A>:</P></DIV>
<DIV class=openblock>
<DIV class=content>
<DIV class=quoteblock>
<BLOCKQUOTE>&#8230;&#8203;when people hear the word concurrency they often think of parallelism, a related but quite distinct concept. In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations. Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.</BLOCKQUOTE></DIV></DIV></DIV>
<DIV class=paragraph>
<P><A class=external href="https://vimeo.com/49718712" target=_blank>Watch the video</A> to find out more.</P></DIV></DIV></DIV>
<DIV class=sect1><A id=_unless_shown_otherwise class=anchor></A>
<H2>Unless Shown Otherwise&#8230;&#8203;</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>Concurrency forces us to relax any assumptions that we may want to make about how any particular thread executes.</P></DIV>
<DIV class="olist arabic">
<DIV class=title>Unless explicitly synchronized, threads may:</DIV>
<OL class=arabic>
<LI>
<P>Be run in <STRONG>any order</STRONG>,</P></LI>
<LI>
<P>Be stopped and restarted at <STRONG>any time</STRONG>,</P></LI>
<LI>
<P>Remain stopped for <STRONG>arbitrary lengths of time</STRONG>.</P></LI></OL></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>Generally these are <STRONG>good things</STRONG>&#8212;the operating system is making choices about how to allocate resources.</P></LI>
<LI>
<P>When accessing shared data these are <STRONG>challenges</STRONG> that force us to program more carefully.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_the_bank_example class=anchor></A>
<H2>The Bank Example</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>Consider the following code snippet.</P></DIV>
<DIV class=listingblock>
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-function><SPAN class=hljs-keyword>void</SPAN> <SPAN class=hljs-title>giveGWATheMoolah</SPAN><SPAN class=hljs-params>(<SPAN class=hljs-keyword>account_t</SPAN> account, <SPAN class=hljs-keyword>int</SPAN> largeAmount)</SPAN> </SPAN>{
  <SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
  gwaHas = gwaHas + largeAmount;
  put_balance(account, gwaHas);
  notifyGWAThatHeIsRich(gwaHas);
  <SPAN class=hljs-keyword>return</SPAN>;
}</CODE></PRE></DIV></DIV>
<DIV class=ulist>
<DIV class=title>Assume I have <STRONG>$1,000</STRONG> and that <STRONG>two</STRONG> of you are trying to make deposits concurrently:</DIV>
<UL>
<LI>
<P>One of you is depositing <STRONG>$1,000</STRONG> (this person gets a B).</P></LI>
<LI>
<P>One of you is depositing <STRONG>$2,000</STRONG> (A- material).</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_things_go_well class=anchor></A>
<H2>Things Go Well</H2>
<DIV class=sectionbody>
<TABLE class="tableblock frame-all grid-all spread">
<COLGROUP>
<COL style="WIDTH: 40%">
<COL style="WIDTH: 40%">
<COL style="WIDTH: 20%"></COLGROUP>
<THEAD>
<TR>
<TH class="tableblock halign-left valign-top">A- Student</TH>
<TH class="tableblock halign-left valign-top">B Student</TH>
<TH class="tableblock halign-center valign-top">Balance</TH></TR></THEAD>
<TBODY>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>$1000</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>2000</SPAN>;
put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><SPAN class=slide>$3000</SPAN></P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>1000</SPAN>;
put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><STRONG class=slide>$4000</STRONG></P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=sect1><A id=_things_go_less_well class=anchor></A>
<H2>Things Go Less Well</H2>
<DIV class=sectionbody>
<TABLE class="tableblock frame-all grid-all spread">
<COLGROUP>
<COL style="WIDTH: 40%">
<COL style="WIDTH: 40%">
<COL style="WIDTH: 20%"></COLGROUP>
<THEAD>
<TR>
<TH class="tableblock halign-left valign-top">A- Student</TH>
<TH class="tableblock halign-left valign-top">B Student</TH>
<TH class="tableblock halign-center valign-top">Balance</TH></TR></THEAD>
<TBODY>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>$1000</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>2000</SPAN>;</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>&nbsp;</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>1000</SPAN>;</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>&nbsp;</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c">put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><SPAN class=slide>$2000</SPAN></P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c">put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><STRONG class=slide>$3000</STRONG></P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=sect1><A id=_things_go_very_badly class=anchor></A>
<H2>Things Go Very Badly</H2>
<DIV class=sectionbody>
<TABLE class="tableblock frame-all grid-all spread">
<COLGROUP>
<COL style="WIDTH: 40%">
<COL style="WIDTH: 40%">
<COL style="WIDTH: 20%"></COLGROUP>
<THEAD>
<TR>
<TH class="tableblock halign-left valign-top">A- Student</TH>
<TH class="tableblock halign-left valign-top">B Student</TH>
<TH class="tableblock halign-center valign-top">Balance</TH></TR></THEAD>
<TBODY>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>$1000</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>2000</SPAN>;</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>&nbsp;</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>int</SPAN> gwaHas = get_balance(account);
gwaHas = gwaHas + $<SPAN class=hljs-number>1000</SPAN>;</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock>&nbsp;</P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c">put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><SPAN class=slide>$3000</SPAN></P></TD></TR>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock>&nbsp;</P></TD>
<TD class="tableblock halign-left valign-top">
<DIV>
<DIV class="listingblock smallest slide">
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c">put_balance(account, gwaHas);</CODE></PRE></DIV></DIV></DIV></TD>
<TD class="tableblock halign-center valign-top">
<P class=tableblock><STRONG class=slide>$2000</STRONG></P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=sect1><A id=_race_conditions class=anchor></A>
<H2>Race Conditions</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>A <STRONG>race condition</STRONG> is "when the output of a process is unexpectedly dependent on timing or other events."</P></DIV>
<DIV class=ulist>
<DIV class=title>Note that the definition of a race depends on what we <STRONG>expected</STRONG> to happen:</DIV>
<UL>
<LI>
<P>We expected me to have <STRONG>$4,000</STRONG> after both deposits. (Otherwise we are not observing the Law of the Conversation of Money, probably important to banks except during bailouts.)</P></LI></UL></DIV></DIV></DIV>