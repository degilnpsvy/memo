B5.3 Endianness</P>
<P>RJJQL Instruction fetches are always little-endian, which means that the PE assumes a little-endian arrangement of instructions in memory.</P>
<P>RMNSB All accesses to the Private Peripheral Bus (PPB) are always little-endian, which means that the PE assumes a little-endian arrangement of the PPB registers.</P>
<P>RTFKG The endianness of data accesses is IMPLEMENTATION DEFINED, as indicated by AIRCR.ENDIANNESS.</P>
<P>RKPCF AIRCR.ENDIANNESS is either:<BR>&#8226; Implemented with a static value.<BR>&#8226; Configured by a hardware input on reset.</P>
<P>RQHWC For data accesses, the following table shows the data element size that endianness applies to, for endianness conversion purposes.<BR>Instruction class(Element size):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Instructions<BR>Load or store byte(Byte): LDR{S}B{T}, LDAB, LDAEXB, STLB, STLEXB, STRB{T}, TBB, LDREXB, STREXB<BR>Load or store halfword(Halfword): LDR{S}H{T}, LDAH, LDAEXH, STLH, STLEXH, and STRH{T}, TBH, LDREXH, STREXH<BR>Load or store word(Word): LDR{T}, LDA, LDAEX, STL, STLEX, and STR{T}, LDREX, STREX, VLDR.F32, VSTR.F32<BR>Load or store two words(Word): LDRD, STRD, VLDR.F64, VSTR.F64<BR>Load or store multiple words(Word): LDM{IA,DB}, STM{IA,DB}, PUSH, POP, LDC, STC, VLDM, VSTM, VPUSH, VPOP, BLX, BLXNS, BX, BXNS, VLLDM, VLSTM.</P>
<P>RXNVS The following instructions change the endianness of data that is loaded or stored:<BR>&nbsp; REV Reverse word (four bytes) register, for transforming 32-bit representations.<BR>&nbsp; REVSH Reverse halfword and sign extend, for transforming signed 16-bit representations.<BR>&nbsp; REV16 Reverse packed halfwords in a register for transforming unsigned 16-bit representations.