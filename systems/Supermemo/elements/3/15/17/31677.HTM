B5.32 Cache maintenance operations 
<P></P>
<P>IMRMG Cache maintenance operations act on particular memory locations.</P>
<P>RJJLL Following a Clean operation, updates made by an observer that controls the cache are made visible to other observers that can access memory at the point to which the operation is performed.</P>
<P>RVRBP The cleaning of a cache entry from a cache can overwrite memory that has been written by another observer only if the entry contains a location that has been written to by an observer in the Shareability domain of that memory location.</P>
<P>RSJFS Following an invalidate operation, updates made visible by observers that access memory at the point to which the invalidate is defined are made visible to an observer that controls the cache.</P>
<P>RPGXK An invalidate operation might result in the loss of updates to the locations affected by the operation that have been written by observers that access the cache.</P>
<P>RTKBD If the address of an entry on which the invalidate operates does not have a Normal cacheable attribute, or if the cache is disabled, then an invalidate operation ensures that this address is not present in the cache.</P>
<P>RJTXK If the address of an entry on which the invalidate operates has the Normal cacheable attribute, the cache invalidate operation cannot ensure that the address is not present in an enabled cache.</P>
<P>RSDVP A clean and invalidate operation behaves as the execution of a clean operation followed immediately by an invalidate operation. Both operations are performed to the same location.</P>
<P>RVKSN The clean operation cleans from the level of cache that is specified through at least the next level of cache away from the PE.</P>
<P>RGFXB The invalidate operation invalidates only at the level specified.</P>
<P>RKVSM For set/way operations and for All (entire cache) operations, the cache maintenance operation is to the next level of caching.</P>
<P>RJTWT For address operations, the cache maintenance operation is to the <FONT class=extract>point of coherency (PoC)</FONT> or to the <FONT class=extract>point of unification (PoU)</FONT> depending on the settings in CLIDR.LoC and CLIDR.LOUU.</P>
<P>RXLHX Data cache maintenance operations affect data caches and unified caches.</P>
<P>RQKMF Instruction cache maintenance operations only affect instruction caches.</P>
<P>RRSVL Cache maintenance operations are memory mapped, 32-bit write-only operations.</P>
<P>RNSHH Cache maintenance operations can have one of the following side-effects:<BR>&#8226; Any location in the cache might be cleaned.<BR>&#8226; Any unlocked location in the cache might be cleaned and invalidated.</P>
<P>RDWMR The ICIMVAU, DCIMVAC, DCCMVAU, DCCMVAC, and DCCIMVAC operations require the physical address in the memory map but it does not have to be cache-line aligned.</P>
<P>RHCTC For DCISW, DCCSW, and DCCISW, the STR operation identifies the cache line to which it applies by specifying the following:<BR>&#8226; The cache set the line belongs to.<BR>&#8226; The way number of the line in the set.<BR>&#8226; The cache level.<BR>The format of the register data for a set/way operation is:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 31-A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L-1<BR>|31 32-A|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp; B| |&nbsp;&nbsp; |L |&nbsp;&nbsp; 4|3 2 1 0|<BR>| Way |&nbsp;&nbsp;&nbsp;&nbsp; SBZ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; Set&nbsp;&nbsp; | SBZ |Level|0|<BR>Where:<BR>A = Log2(ASSOCIATIVITY), rounded up to the next integer if necessary.<BR>B = (L + S).<BR>L = Log2(LINELEN).<BR>S = Log2(NSETS), rounded up to the next integer if necessary. ASSOCIATIVITY, LINELEN (line length, in bytes), and NSETS (number of sets) have their usual meanings and are the values for the cache level being operated on.<BR>&nbsp; The values of A and S are rounded up to the next integer.<BR>Level ((Cache level to operate on)&#8211;1). For example, this field is 0 for operations on an L1 cache, or 1 for operations on an L2 cache.<BR>Set The number of the set to operate on.<BR>Way The number of the way to operate on.<BR>&nbsp; &#8226; If L == 4 then there is no SBZ field between the set and level fields in the register.<BR>&nbsp; &#8226; If A == 0 there is no way field in the register, and register bits[31:B] are SBZ.<BR>&nbsp; &#8226; If the level, set, or way field in the register is larger than the size implemented in the cache, then the effect of the operation is UNPREDICTABLE.</P>
<P>RRSBX After the completion of an instruction cache maintenance operation, a Context synchronization event guarantees that the effects of the cache maintenance operation are visible to all instruction fetches that follow the Context synchronization event.</P>
<P>IDHJQ ARM recommends that, wherever possible, all caches that require maintenance to ensure coherency are included in the caches affected by the architecturally-defined cache maintenance operations.</P>
<P>RLRGS When the Security Extension is implemented, it is IMPLEMENTATION DEFINED whether the DCIMVAC and DCISW operations, when performed from Non-secure state either:<BR>&#8226; Clean any data that might be Secure data before invalidating it.<BR>&#8226; Do not invalidate Secure data.</P>
<P>RVKDF When the Security Extension is implemented, ICIALLU, ICIMVAU, DCCMVAU, DCCMVAC, DCCSW, DCCIMVAC, DCCISW, and BPIALL operations on Secure data might be ignored if the operation was performed from Non-secure state.</P>
<P>IMLLC The following is the sequence of cache cleaning operations for a line of self-modifying code.<BR>; Enter this code with &lt;Rx&gt; containing the new 32-bit instruction and &lt;Ry&gt;;<BR>containing the address of the instruction.<BR>; Use STRH in the first line instead of STR for a 16-bit instruction.<BR>STR &lt;Rx&gt;, [&lt;Ry&gt;] ; Write instruction to memory<BR>DSB ; Ensure write is visible<BR>MOV &lt;Rt&gt;, 0xE000E000 ; Create pointer to base of System Control Space<BR>STR &lt;Ry&gt;, [&lt;Rt&gt;,#0xF64] ; Clean data cache by address to point of unification<BR>DSB ; Ensure visibility of the data cleaned from the cache<BR>STR &lt;Ry&gt;, [&lt;Rt&gt;,#0xF58] ; Invalidate instruction cache by address to PoU<BR>STR &lt;Ry&gt;, [&lt;Rt&gt;,#0xF78] ; Invalidate branch predictor<BR>DSB ; Ensure completion of the invalidations<BR>ISB ; Synchronize fetched instruction stream</P>
<P>RHXMM In a PE with the Security Extension, if the Security attribution of memory is changed, it is IMPLEMENTATION DEFINED whether cache maintenance operations are required to keep the system state valid.</P>
<P>See also:<BR>&#8226; Cache Maintenance Operations on page D1-809.<BR>&#8226; Cache Maintenance Operations (NS alias) on page D1-814.<BR>&#8226; Observability of memory accesses on page B5-125.<BR>&#8226; Cacheability attributes on page B5-134.<BR>&#8226; Out of range values of the Set/Way/Index fields in cache maintenance instructions on page G1-1337.