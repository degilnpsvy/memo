static DEFINE_MUTEX(mutex);<BR>static LIST_HEAD(q);<BR>struct my_data<BR>{<BR>&nbsp;struct kref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refcount;<BR>&nbsp;struct list_head link;<BR>};
<P></P>
<P>static struct my_data *get_entry()<BR>{<BR>&nbsp;struct my_data *entry = NULL;<BR>&nbsp;mutex_lock(&amp;mutex);<BR>&nbsp;if (!list_empty(&amp;q)) {<BR>&nbsp;&nbsp;entry = container_of(q.next, struct my_data, link);<BR>&nbsp;&nbsp;kref_get(&amp;entry-&gt;refcount);<BR>&nbsp;}<BR>&nbsp;mutex_unlock(&amp;mutex);<BR>&nbsp;return entry;<BR>}</P>
<P>static void release_entry(struct kref *ref)<BR>{<BR>&nbsp;struct my_data *entry = container_of(ref, struct my_data, refcount);</P>
<P>&nbsp;list_del(&amp;entry-&gt;link);<BR>&nbsp;kfree(entry);<BR>}</P>
<P>static void put_entry(struct my_data *entry)<BR>{<BR>&nbsp;mutex_lock(&amp;mutex);<BR>&nbsp;kref_put(&amp;entry-&gt;refcount, release_entry);<BR>&nbsp;mutex_unlock(&amp;mutex);<BR>}</P>
<P>The kref_put() return value is useful if you do not want to hold the<BR>lock during the whole release operation.&nbsp; Say you didn't want to call<BR>kfree() with the lock held in the example above (since it is kind of<BR>pointless to do so).&nbsp; You could use kref_put() as follows:</P>
<P>static void release_entry(struct kref *ref)<BR>{<BR>&nbsp;/* All work is done after the return from kref_put(). */<BR>}</P>
<P>static void put_entry(struct my_data *entry)<BR>{<BR>&nbsp;mutex_lock(&amp;mutex);<BR>&nbsp;if (kref_put(&amp;entry-&gt;refcount, release_entry)) {<BR>&nbsp;&nbsp;list_del(&amp;entry-&gt;link);<BR>&nbsp;&nbsp;mutex_unlock(&amp;mutex);<BR>&nbsp;&nbsp;kfree(entry);<BR>&nbsp;} else<BR>&nbsp;&nbsp;mutex_unlock(&amp;mutex);<BR>}