/**<BR>&nbsp;*&nbsp;__srcu_notifier_call_chain - Call functions in an SRCU notifier chain<BR>&nbsp;*&nbsp;@nh: Pointer to head of the SRCU notifier chain<BR>&nbsp;*&nbsp;@val: Value passed unmodified to notifier function<BR>&nbsp;*&nbsp;@v: Pointer passed unmodified to notifier function<BR>&nbsp;*&nbsp;@nr_to_call: See comment for notifier_call_chain.<BR>&nbsp;*&nbsp;@nr_calls: See comment for notifier_call_chain<BR>&nbsp;*<BR>&nbsp;*&nbsp;Calls each function in a notifier chain in turn.&nbsp; The functions<BR>&nbsp;*&nbsp;run in a process context, so they are allowed to block.<BR>&nbsp;*<BR>&nbsp;*&nbsp;If the return value of the notifier can be and'ed<BR>&nbsp;*&nbsp;with %NOTIFY_STOP_MASK then srcu_notifier_call_chain()<BR>&nbsp;*&nbsp;will return immediately, with the return value of<BR>&nbsp;*&nbsp;the notifier function which halted execution.<BR>&nbsp;*&nbsp;Otherwise the return value is the return value<BR>&nbsp;*&nbsp;of the last notifier function called.<BR>&nbsp;*/<BR>int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long val, void *v,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int nr_to_call, int *nr_calls)<BR>{<BR>&nbsp;int ret;<BR>&nbsp;int idx;
<P></P>
<P>&nbsp;idx = srcu_read_lock(&amp;nh-&gt;srcu);<BR>&nbsp;ret = notifier_call_chain(&amp;nh-&gt;head, val, v, nr_to_call, nr_calls);<BR>&nbsp;srcu_read_unlock(&amp;nh-&gt;srcu, idx);<BR>&nbsp;return ret;<BR>}<BR>EXPORT_SYMBOL_GPL(__srcu_notifier_call_chain);