/**<BR>&nbsp;* kref_put - decrement refcount for object.<BR>&nbsp;* @kref: object.<BR>&nbsp;* @release: pointer to the function that will clean up the object when the<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; last reference to the object is released.<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This pointer is required, and it is not acceptable to pass kfree<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in as this function.&nbsp; If the caller does pass kfree to this<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function, you will be publicly mocked mercilessly by the kref<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maintainer, and anyone else who happens to notice it.&nbsp; You have<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; been warned.<BR>&nbsp;*<BR>&nbsp;* Decrement the refcount, and if 0, call release().<BR>&nbsp;* Return <SPAN class=cloze>[...]</SPAN> if the object was removed, otherwise return&nbsp;<SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN><BR>&nbsp;*/<BR>static inline int kref_put(struct kref *kref, void (*release)(struct kref *kref))<BR>{<BR>&nbsp;return kref_sub(kref, 1, release);<BR>}