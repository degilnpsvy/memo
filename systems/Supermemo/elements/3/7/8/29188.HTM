/**<BR>&nbsp;* kref_get_unless_zero - Increment refcount for object unless it is zero.<BR>&nbsp;* @kref: object.<BR>&nbsp;*<BR>&nbsp;* Return non-zero if the increment succeeded. Otherwise return 0.<BR>&nbsp;*<BR>&nbsp;* This function is intended to simplify locking around refcounting for<BR>&nbsp;* objects that can be looked up from a lookup structure, and which are<BR>&nbsp;* removed from that lookup structure in the object destructor.<BR>&nbsp;* Operations on such objects require at least a read lock around<BR>&nbsp;* lookup + kref_get, and a write lock around kref_put + remove from lookup<BR>&nbsp;* structure. Furthermore, RCU implementations become extremely tricky.<BR>&nbsp;* With a lookup followed by a kref_get_unless_zero *with return value check*<BR>&nbsp;* locking in the kref_put path can be deferred to the actual removal from<BR>&nbsp;* the lookup structure and RCU lookups become trivial.<BR>&nbsp;*/<BR>static inline int __must_check kref_get_unless_zero(struct kref *kref)<BR>{<BR>&nbsp;<SPAN class=cloze>[...]</SPAN>;<BR>}