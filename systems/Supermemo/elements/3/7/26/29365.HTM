<H2><SPAN id=Advantages_and_disadvantages class=mw-headline>Advantages and disadvantages</SPAN></H2>
<P>The ability to wait until all readers are done allows RCU readers to use much lighter-weight synchronization&#8212;in some cases, absolutely no synchronization at all. In contrast, in more conventional lock-based schemes, readers must use heavy-weight synchronization in order to prevent an updater from deleting the data structure out from under them. This is because lock-based updaters typically update data items in place, and must therefore exclude readers. In contrast, RCU-based updaters typically take advantage of the fact that <FONT class=clozed>writes to single aligned pointers are atomic on modern CPUs, allowing atomic insertion, removal, and replacement of data items in a linked structure without disrupting readers</FONT>. Concurrent RCU readers can then continue accessing the old versions, and can dispense with the atomic read-modify-write instructions, memory barriers, and cache misses that are so expensive on modern <A title="Symmetric multiprocessing" href="https://en.wikipedia.org/wiki/Symmetric_multiprocessing">SMP</A> computer systems, even in absence of lock contention.<SUP id=cite_ref-17 class=reference><A href="https://en.wikipedia.org/wiki/Read-copy-update#cite_note-17">[14]</A></SUP><SUP id=cite_ref-18 class=reference><A href="https://en.wikipedia.org/wiki/Read-copy-update#cite_note-18">[15]</A></SUP> The lightweight nature of RCU's read-side primitives provides additional advantages beyond excellent performance, scalability, and real-time response. For example, they provide immunity to most deadlock and livelock conditions.<SUP id=cite_ref-19 class=reference><A href="https://en.wikipedia.org/wiki/Read-copy-update#cite_note-19">[note 4]</A></SUP></P>
<P>Of course, RCU also has disadvantages. <FONT class=clozed>For example, RCU is a specialized technique that works best in situations with mostly reads and few updates, but is often less applicable to update-only workloads. For another example, although the fact that RCU readers and updaters may execute concurrently is what enables the lightweight nature of RCU's read-side primitives, some algorithms may not be amenable to read/update concurrency.</FONT></P>
<P>Despite well over a decade of experience with RCU, the exact extent of its applicability is still a research topic.