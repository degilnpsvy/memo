A4.1.1 ARMv7-M and interworking support 
<P></P>
<P>Thumb interworking is held as bit [0] of an interworking address. Interworking addresses are used in the following instructions:<BR>&#8226; BX or BLX<BR>&#8226; an LDR or LDM that loads the PC.</P>
<P>ARMv7-M only supports the Thumb instruction execution state, therefore the value of address bit [0] must be 1 in interworking instructions, otherwise a fault occurs. All instructions ignore bit [0] and write bits [31:1]:&#8217;0&#8217; when updating the PC.</P>
<P>16-bit instructions that update the PC behave as follows:<BR>&#8226; ADD (register) and MOV (register) branch without interworking<BR>Note<BR>&nbsp;&nbsp;&nbsp; ARM deprecates the use of Rd as the PC in the ADD (SP plus register) 16-bit instruction.<BR>&#8226; B branches without interworking<BR>&#8226; CBZ and CBNZ branch without interworking.<BR>&#8226; BLX and BX interwork on the value in Rm<BR>&#8226; POP interworks on the value loaded to the PC<BR>&#8226; BKPT and SVC cause exceptions and are not considered to be interworking instructions.</P>
<P>32-bit instructions that update the PC behave as follows:<BR>&#8226; B branches without interworking<BR>&#8226; BL branches without interworking<BR>&#8226; LDM and LDR support interworking using the value written to the PC<BR>&#8226; TBB and TBH branch without interworking.</P>
<P>For more details, see the description of the BXWritePC() function in Pseudocode details of ARM core register operations on page A2-46.