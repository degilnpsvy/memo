/**<BR>&nbsp;* device_initialize - init device structure.<BR>&nbsp;* @dev: device.<BR>&nbsp;*<BR>&nbsp;* This prepares the device for use by other layers by initializing<BR>&nbsp;* its fields.<BR>&nbsp;* It is the first half of device_register(), if called by<BR>&nbsp;* that function, though it can also be called separately, so one<BR>&nbsp;* may use @dev's fields. In particular, get_device()/put_device()<BR>&nbsp;* may be used for reference counting of @dev after calling this<BR>&nbsp;* function.<BR>&nbsp;*<BR>&nbsp;* All fields in @dev must be initialized by the caller to 0, except<BR>&nbsp;* for those explicitly set to some other value.&nbsp; The simplest<BR>&nbsp;* approach is to use kzalloc() to allocate the structure containing<BR>&nbsp;* @dev.<BR>&nbsp;*<BR>&nbsp;* NOTE: Use <FONT class=clozed>put_device()</FONT> to give up your reference instead of freeing<BR>&nbsp;* @dev directly once you have called this function.<BR>&nbsp;*/<BR>void device_initialize(struct device *dev)<BR>{<BR>&nbsp;<FONT class=clozed>dev-&gt;kobj.kset = devices_kset</FONT>;<BR>&nbsp;<FONT class=clozed>kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype)</FONT>;<BR>&nbsp;<FONT class=clozed>INIT_LIST_HEAD(&amp;dev-&gt;dma_pools)</FONT>;<BR>&nbsp;<FONT class=clozed>mutex_init(&amp;dev-&gt;mutex)</FONT>;<BR>&nbsp;<SPAN class=cloze>[...]lockdep mutex</SPAN>;<BR>&nbsp;spin_lock_init(&amp;dev-&gt;devres_lock);<BR>&nbsp;INIT_LIST_HEAD(&amp;dev-&gt;devres_head);<BR>&nbsp;device_pm_init(dev);<BR>&nbsp;set_dev_node(dev, -1);<BR>}<BR>EXPORT_SYMBOL_GPL(device_initialize);