A7.1.4 Assembler syntax</P>
<P>The Assembly syntax subsection describes the standard UAL syntax for the instruction.</P>
<P>Each syntax description consists of the following elements:<BR>&#8226; One or more syntax prototype lines written in a typewriter font, using the conventions described in Assembler syntax prototype line conventions on page A7-205. Each prototype line documents the mnemonic and (where appropriate) operand parts of a full line of assembler code. When there is more than one such line, each prototype line is annotated to indicate required results of the encoding-specific pseudocode. For each instruction encoding, this information can be used to determine whether any instructions matching that encoding are available when assembling that syntax, and if so, which ones.<BR>&#8226; The line where: followed by descriptions of all of the variable or optional fields of the prototype syntax line.<BR>Some syntax fields are standardized across all or most instructions. These fields are described in Standard assembler syntax fields on page A7-207.<BR>By default, syntax fields that specify registers (such as &lt;Rd&gt;, &lt;Rn&gt;, or &lt;Rt&gt;) are permitted to be any of R0-R12 or LR in Thumb instructions. These require that the encoding-specific pseudocode should set the corresponding integer variable (such as d, n, or t) to the corresponding register number (0-12 for R0-R12, 14 for LR). This can normally be done by setting the corresponding bitfield in the instruction, for example, Rd, Rn, or Rt, to the binary encoding of that number. In the case of 16-bit Thumb encodings, this bitfield is normally of length 3 and so the encoding is only available when one of R0-R7 was specified in the assembler syntax. It is also common for such encodings to use a bitfield name such as Rdn. This indicates that the encoding is only available if &lt;Rd&gt; and &lt;Rn&gt; specify the same register, and that the register number of that register is encoded in the bitfield if they do.<BR>The description of a syntax field that specifies a register sometimes extends or restricts the permitted range of registers or document other differences from the default rules for such fields. Typical extensions are to allow the use of one or both of the SP and the PC, using register numbers 13 and 15 respectively.<BR>Note<BR>The pre-UAL Thumb assembler syntax is incompatible with UAL and is not documented in the instruction sections.</P>
<P><BR>Assembler syntax prototype line conventions</P>
<P>The following conventions are used in assembler syntax prototype lines and their subfields:<BR>&lt; &gt;<BR>Any item bracketed by &lt; and &gt; is a short description of a type of value to be supplied by the user in that position. A longer description of the item is normally supplied by subsequent text. Such items often correspond to a similarly named field in an encoding diagram for an instruction. When the correspondence simply requires the binary encoding of an integer value or register number to be substituted into the instruction encoding, it is not described explicitly. For example, if the assembler syntax for a Thumb instruction contains an item &lt;Rn&gt; and the instruction encoding diagram contains a 4-bit field named Rn, the number of the register specified in the assembler syntax is encoded in binary in the instruction field.<BR>If the correspondence between the assembler syntax item and the instruction encoding is more complex than simple binary encoding of an integer or register number, the item description indicates how it is encoded. This is often done by specifying a required output from the encoding-specific pseudocode, such as add = TRUE. The assembler must only use encodings that produce that output.<BR>{ }<BR>Any item bracketed by { and } is optional. A description of the item and of how its presence or absence is encoded in the instruction is normally supplied by subsequent text.<BR>Many instructions have an optional destination register. Unless otherwise stated, if such a destination register is omitted, it is the same as the immediately following source register in the instruction syntax.<BR>spaces<BR>Single spaces are used for clarity, to separate items. When a space is obligatory in the assembler syntax, two or more consecutive spaces are used.<BR>+/-<BR>This indicates an optional + or - sign. If neither is coded, + is assumed.</P>
<P>All other characters must be encoded precisely as they appear in the assembler syntax. Apart from { and }, the special characters described above do not appear in the basic forms of assembler instructions documented in this manual. The { and } characters need to be encoded in a few places as part of a variable item. When this happens, the description of the variable item indicates how they must be used.