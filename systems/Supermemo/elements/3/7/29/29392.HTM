/**<BR>&nbsp;* subsys_find_device_by_id - find a device with a specific enumeration number<BR>&nbsp;* @subsys: subsystem<BR>&nbsp;* @id: index 'id' in struct device<BR>&nbsp;* @hint: device to check first<BR>&nbsp;*<BR>&nbsp;* Check the hint's next object and if it is a match return it directly,<BR>&nbsp;* otherwise, fall back to a full list search. Either way a reference for<BR>&nbsp;* the returned object is taken.<BR>&nbsp;*/<BR>struct device *subsys_find_device_by_id(struct bus_type *subsys, unsigned int id,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct device *hint)<BR>{<BR>&nbsp;struct klist_iter i;<BR>&nbsp;struct device *dev; 
<P></P>
<P>&nbsp;if (!subsys)<BR>&nbsp;&nbsp;return NULL;</P>
<P>&nbsp;if (hint) {<BR>&nbsp;&nbsp;klist_iter_init_node(&amp;subsys-&gt;p-&gt;klist_devices, &amp;i, &amp;hint-&gt;p-&gt;knode_bus);<BR>&nbsp;&nbsp;dev = next_device(&amp;i);<BR>&nbsp;&nbsp;if (dev &amp;&amp; dev-&gt;id == id &amp;&amp; get_device(dev)) {<BR>&nbsp;&nbsp;&nbsp;klist_iter_exit(&amp;i);<BR>&nbsp;&nbsp;&nbsp;return dev;<BR>&nbsp;&nbsp;}<BR>&nbsp;&nbsp;klist_iter_exit(&amp;i);<BR>&nbsp;}</P>
<P><FONT class=clozed>&nbsp;klist_iter_init_node(&amp;subsys-&gt;p-&gt;klist_devices, &amp;i, NULL);<BR>&nbsp;while ((dev = next_device(&amp;i))) {<BR>&nbsp;&nbsp;if (dev-&gt;id == id &amp;&amp; get_device(dev)) {<BR>&nbsp;&nbsp;&nbsp;klist_iter_exit(&amp;i);<BR>&nbsp;&nbsp;&nbsp;return dev;<BR>&nbsp;&nbsp;}<BR>&nbsp;}<BR>&nbsp;klist_iter_exit(&amp;i);</FONT><BR>&nbsp;return NULL;<BR>}<BR>EXPORT_SYMBOL_GPL(subsys_find_device_by_id);