static inline TCGv_i32 load_cpu_offset(int offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; TCGv_i32 tmp = tcg_temp_new_i32();<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ld_i32(tmp, cpu_env, offset);<BR>&nbsp;&nbsp;&nbsp; return tmp;<BR>}</P>
<P>#define load_cpu_field(name) load_cpu_offset(offsetof(CPUARMState, name))</P>
<P>static inline void store_cpu_offset(TCGv_i32 var, int offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_st_i32(var, cpu_env, offset);<BR>&nbsp;&nbsp;&nbsp; tcg_temp_free_i32(var);<BR>}</P>
<P>#define store_cpu_field(var, name) \<BR>&nbsp;&nbsp;&nbsp; store_cpu_offset(var, offsetof(CPUARMState, name))</P>
<P>/* Set a variable to the value of a CPU register.&nbsp; */<BR>static void load_reg_var(DisasContext *s, TCGv_i32 var, int reg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (reg == 15) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t addr;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* normally, since we updated PC, we need only to add one insn */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (s-&gt;thumb)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr = (long)s-&gt;pc + 2;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr = (long)s-&gt;pc + 4;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_movi_i32(var, addr);<BR>&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_mov_i32(var, cpu_R[reg]);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>/* Create a new temporary and set it to the value of a CPU register.&nbsp; */<BR>static inline TCGv_i32 load_reg(DisasContext *s, int reg)<BR>{<BR>&nbsp;&nbsp;&nbsp; TCGv_i32 tmp = tcg_temp_new_i32();<BR>&nbsp;&nbsp;&nbsp; load_reg_var(s, tmp, reg);<BR>&nbsp;&nbsp;&nbsp; return tmp;<BR>}</P>
<P>/* Set a CPU register.&nbsp; The source must be a temporary and will be<BR>&nbsp;&nbsp; marked as dead.&nbsp; */<BR>static void store_reg(DisasContext *s, int reg, TCGv_i32 var)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (reg == 15) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_andi_i32(var, var, ~1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s-&gt;is_jmp = DISAS_JUMP;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; tcg_gen_mov_i32(cpu_R[reg], var);<BR>&nbsp;&nbsp;&nbsp; tcg_temp_free_i32(var);<BR>}