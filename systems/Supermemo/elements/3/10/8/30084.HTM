/**<BR>&nbsp;* <SPAN class=cloze>[...]</SPAN> - create and wake a thread.<BR>&nbsp;* @threadfn: the function to run until signal_pending(current).<BR>&nbsp;* @data: data ptr for @threadfn.<BR>&nbsp;* @namefmt: printf-style name for the thread.<BR>&nbsp;*<BR>&nbsp;* Description: Convenient wrapper for kthread_create() followed by<BR>&nbsp;* wake_up_process().&nbsp; Returns the kthread or ERR_PTR(-ENOMEM).<BR>&nbsp;*/<BR>#define <SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>(threadfn, data, namefmt, ...)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;struct task_struct *__k&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;= kthread_create(threadfn, data, namefmt, ## __VA_ARGS__); \<BR>&nbsp;if (!IS_ERR(__k))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;wake_up_process(__k);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;__k;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>})