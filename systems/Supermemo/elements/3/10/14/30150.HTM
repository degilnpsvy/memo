static inline TCGv_i32 QEMU_ARTIFICIAL MAKE_TCGV_I32(intptr_t i)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (TCGv_i32)i;<BR>}</P>
<P>static inline TCGv_i64 QEMU_ARTIFICIAL MAKE_TCGV_I64(intptr_t i)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (TCGv_i64)i;<BR>}</P>
<P>static inline TCGv_ptr QEMU_ARTIFICIAL MAKE_TCGV_PTR(intptr_t i)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (TCGv_ptr)i;<BR>}</P>
<P>static inline intptr_t QEMU_ARTIFICIAL GET_TCGV_I32(TCGv_i32 t)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (intptr_t)t;<BR>}</P>
<P>static inline intptr_t QEMU_ARTIFICIAL GET_TCGV_I64(TCGv_i64 t)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (intptr_t)t;<BR>}</P>
<P>static inline intptr_t QEMU_ARTIFICIAL GET_TCGV_PTR(TCGv_ptr t)<BR>{<BR>&nbsp;&nbsp;&nbsp; return (intptr_t)t;<BR>}</P>
<P>#if TCG_TARGET_REG_BITS == 32<BR>#define TCGV_LOW(t) MAKE_TCGV_I32(GET_TCGV_I64(t))<BR>#define TCGV_HIGH(t) MAKE_TCGV_I32(GET_TCGV_I64(t) + 1)<BR>#endif</P>
<P>#define TCGV_EQUAL_I32(a, b) (GET_TCGV_I32(a) == GET_TCGV_I32(b))<BR>#define TCGV_EQUAL_I64(a, b) (GET_TCGV_I64(a) == GET_TCGV_I64(b))<BR>#define TCGV_EQUAL_PTR(a, b) (GET_TCGV_PTR(a) == GET_TCGV_PTR(b))</P>
<P>/* Dummy definition to avoid compiler warnings.&nbsp; */<BR>#define TCGV_UNUSED_I32(x) x = MAKE_TCGV_I32(-1)<BR>#define TCGV_UNUSED_I64(x) x = MAKE_TCGV_I64(-1)<BR>#define TCGV_UNUSED_PTR(x) x = MAKE_TCGV_PTR(-1)</P>
<P>#define TCGV_IS_UNUSED_I32(x) (GET_TCGV_I32(x) == -1)<BR>#define TCGV_IS_UNUSED_I64(x) (GET_TCGV_I64(x) == -1)<BR>#define TCGV_IS_UNUSED_PTR(x) (GET_TCGV_PTR(x) == -1)