<FONT size=5><FONT color=#080000 face=&#24494;&#36719;&#38597;&#40657;>struct TCGContext {<BR>&nbsp;&nbsp;&nbsp; uint8_t *pool_cur, *pool_end;<BR>&nbsp;&nbsp;&nbsp; TCGPool *pool_first, *pool_current, *pool_first_large;<BR>&nbsp;&nbsp;&nbsp; int nb_labels;<BR>&nbsp;&nbsp;&nbsp; int nb_globals;<BR>&nbsp;&nbsp;&nbsp; int nb_temps;<BR>&nbsp;&nbsp;&nbsp; int nb_indirects;</FONT> </FONT>
<P></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* goto_tb support */<BR>&nbsp;&nbsp;&nbsp; tcg_insn_unit *code_buf;<BR>&nbsp;&nbsp;&nbsp; uint16_t *tb_jmp_reset_offset; /* tb-&gt;jmp_reset_offset */<BR>&nbsp;&nbsp;&nbsp; uint16_t *tb_jmp_insn_offset; /* tb-&gt;jmp_insn_offset if USE_DIRECT_JUMP */<BR>&nbsp;&nbsp;&nbsp; uintptr_t *tb_jmp_target_addr; /* tb-&gt;jmp_target_addr if !USE_DIRECT_JUMP */</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; TCGRegSet reserved_regs;<BR>&nbsp;&nbsp;&nbsp; intptr_t current_frame_offset;<BR>&nbsp;&nbsp;&nbsp; intptr_t frame_start;<BR>&nbsp;&nbsp;&nbsp; intptr_t frame_end;<BR>&nbsp;&nbsp;&nbsp; TCGTemp *frame_temp;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; tcg_insn_unit *code_ptr;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; GHashTable *helpers;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>#ifdef CONFIG_PROFILER<BR>&nbsp;&nbsp;&nbsp; /* profiling info */<BR>&nbsp;&nbsp;&nbsp; int64_t tb_count1;<BR>&nbsp;&nbsp;&nbsp; int64_t tb_count;<BR>&nbsp;&nbsp;&nbsp; int64_t op_count; /* total insn count */<BR>&nbsp;&nbsp;&nbsp; int op_count_max; /* max insn per TB */<BR>&nbsp;&nbsp;&nbsp; int64_t temp_count;<BR>&nbsp;&nbsp;&nbsp; int temp_count_max;<BR>&nbsp;&nbsp;&nbsp; int64_t del_op_count;<BR>&nbsp;&nbsp;&nbsp; int64_t code_in_len;<BR>&nbsp;&nbsp;&nbsp; int64_t code_out_len;<BR>&nbsp;&nbsp;&nbsp; int64_t search_out_len;<BR>&nbsp;&nbsp;&nbsp; int64_t interm_time;<BR>&nbsp;&nbsp;&nbsp; int64_t code_time;<BR>&nbsp;&nbsp;&nbsp; int64_t la_time;<BR>&nbsp;&nbsp;&nbsp; int64_t opt_time;<BR>&nbsp;&nbsp;&nbsp; int64_t restore_count;<BR>&nbsp;&nbsp;&nbsp; int64_t restore_time;<BR>#endif</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>#ifdef CONFIG_DEBUG_TCG<BR>&nbsp;&nbsp;&nbsp; int temps_in_use;<BR>&nbsp;&nbsp;&nbsp; int goto_tb_issue_mask;<BR>#endif</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; int gen_next_op_idx;<BR>&nbsp;&nbsp;&nbsp; int gen_next_parm_idx;</FONT></P>
<P><FONT class=extract color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* Code generation.&nbsp; Note that we specifically do not use tcg_insn_unit<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; here, because there's too much arithmetic throughout that relies<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on addition and subtraction working on bytes.&nbsp; Rely on the GCC<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extension that allows arithmetic on void*.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; int code_gen_max_blocks;<BR>&nbsp;&nbsp;&nbsp; void *code_gen_prologue;<BR>&nbsp;&nbsp;&nbsp; void *code_gen_buffer;<BR>&nbsp;&nbsp;&nbsp; size_t code_gen_buffer_size;<BR>&nbsp;&nbsp;&nbsp; void *code_gen_ptr;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* Threshold to flush the translated code buffer.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; void *code_gen_highwater;</FONT></P>
<P><FONT class=extract color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; TBContext tb_ctx;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* Track which vCPU triggers events */<BR>&nbsp;&nbsp;&nbsp; CPUState *cpu;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* *_trans */<BR>&nbsp;&nbsp;&nbsp; TCGv_env tcg_env;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* *_exec&nbsp; */</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* The TCGBackendData structure is private to tcg-target.inc.c.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; struct TCGBackendData *be;</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; TCGTempSet free_temps[TCG_TYPE_COUNT * 2];<BR>&nbsp;&nbsp;&nbsp; TCGTemp temps[TCG_MAX_TEMPS]; /* globals first, temps after */</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; /* Tells which temporary holds a given register.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It does not take into account fixed registers */<BR>&nbsp;&nbsp;&nbsp; TCGTemp *reg_to_temp[TCG_TARGET_NB_REGS];</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; TCGOp gen_op_buf[OPC_BUF_SIZE];<BR>&nbsp;&nbsp;&nbsp; TCGArg gen_opparam_buf[OPPARAM_BUF_SIZE];</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>&nbsp;&nbsp;&nbsp; uint16_t gen_insn_end_off[TCG_MAX_INSNS];<BR>&nbsp;&nbsp;&nbsp; target_ulong gen_insn_data[TCG_MAX_INSNS][TARGET_INSN_START_WORDS];<BR>};</FONT></P>
<P><FONT color=#080000 size=5 face=&#24494;&#36719;&#38597;&#40657;>extern TCGContext tcg_ctx;</FONT>