<DT>&#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217;, <SMALL class=dots><FONT size=2>...</FONT></SMALL> &#8216;<SAMP><SPAN class=samp>9</SPAN></SAMP>&#8217; 
<DD>An operand that matches the specified operand number is allowed. If a digit is used together with letters within the same alternative, the digit should come last. 
<P>This number is allowed to be more than a single digit. If multiple digits are encountered consecutively, they are interpreted as a single decimal integer. There is scant chance for ambiguity, since to-date it has never been desirable that &#8216;<SAMP><SPAN class=samp>10</SPAN></SAMP>&#8217; be interpreted as matching either operand 1 <EM>or</EM> operand 0. Should this be desired, one can use multiple alternatives instead. </P>
<P><A name=index-matching-constraint-3685></A><A name=index-constraint_002c-matching-3686></A>This is called a <DFN>matching constraint</DFN> and what it really means is that the assembler has only a single operand that fills two roles which <CODE>asm</CODE> distinguishes. For example, an add instruction uses two input operands and an output operand, but on most CISC machines an add instruction really has only two operands, one of them an input-output operand: </P><PRE class=smallexample>          addl #35,r12
</PRE>
<P>Matching constraints are used in these circumstances. More precisely, the two operands that match must include one input-only operand and one output-only operand. Moreover, the digit must be a smaller number than the number of the operand that uses it in the constraint.&nbsp;</P>
<P>Inline ASM Simple Constraints</P></DD>