<DT>&#8216;<SAMP><SPAN class=samp>s</SPAN></SAMP>&#8217; 
<DD>An immediate integer operand whose value is not an explicit integer is allowed. 
<P>This might appear strange; if an insn allows a constant operand with a value not known at compile time, it certainly must allow any known value. So why use &#8216;<SAMP><SPAN class=samp>s</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217;? Sometimes it allows better code to be generated. </P>
<P>For example, on the 68000 in a fullword instruction it is possible to use an immediate operand; but if the immediate value is between &#8722;128 and 127, better code results from loading the value into a register and using the register. This is because the load into the register can be done with a &#8216;<SAMP><SPAN class=samp>moveq</SPAN></SAMP>&#8217; instruction. We arrange for this to happen by defining the letter &#8216;<SAMP><SPAN class=samp>K</SPAN></SAMP>&#8217; to mean &#8220;any integer outside the range &#8722;128 to 127&#8221;, and then specifying &#8216;<SAMP><SPAN class=samp>Ks</SPAN></SAMP>&#8217; in the operand constraints.&nbsp;</P>
<P>Inline ASM Simple Constraints</P></DD>