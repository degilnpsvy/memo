# qemu:accel.c
<P></P>
<P>/*<BR>&nbsp;* QEMU System Emulator, accelerator interfaces<BR>&nbsp;*<BR>&nbsp;* Copyright (c) 2003-2008 Fabrice Bellard<BR>&nbsp;* Copyright (c) 2014 Red Hat Inc.<BR>&nbsp;*<BR>&nbsp;* Permission is hereby granted, free of charge, to any person obtaining a copy<BR>&nbsp;* of this software and associated documentation files (the "Software"), to deal<BR>&nbsp;* in the Software without restriction, including without limitation the rights<BR>&nbsp;* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<BR>&nbsp;* copies of the Software, and to permit persons to whom the Software is<BR>&nbsp;* furnished to do so, subject to the following conditions:<BR>&nbsp;*<BR>&nbsp;* The above copyright notice and this permission notice shall be included in<BR>&nbsp;* all copies or substantial portions of the Software.<BR>&nbsp;*<BR>&nbsp;* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<BR>&nbsp;* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<BR>&nbsp;* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL<BR>&nbsp;* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<BR>&nbsp;* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<BR>&nbsp;* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<BR>&nbsp;* THE SOFTWARE.<BR>&nbsp;*/</P>
<P></P>
<P>#include "qemu/osdep.h"<BR>#include "sysemu/accel.h"<BR>#include "hw/boards.h"<BR>#include "qemu-common.h"<BR>#include "sysemu/arch_init.h"<BR>#include "sysemu/sysemu.h"<BR>#include "sysemu/kvm.h"<BR>#include "sysemu/qtest.h"<BR>#include "hw/xen/xen.h"<BR>#include "qom/object.h"<BR>#include "hw/boards.h"</P>
<P>int tcg_tb_size;<BR>static bool tcg_allowed = true;</P>
<P>static int tcg_init(MachineState *ms)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_exec_init(tcg_tb_size * 1024 * 1024);<BR>&nbsp;&nbsp;&nbsp; return 0;<BR>}</P>
<P>static const TypeInfo accel_type = {<BR>&nbsp;&nbsp;&nbsp; .name = TYPE_ACCEL,<BR>&nbsp;&nbsp;&nbsp; .parent = TYPE_OBJECT,<BR>&nbsp;&nbsp;&nbsp; .class_size = sizeof(AccelClass),<BR>&nbsp;&nbsp;&nbsp; .instance_size = sizeof(AccelState),<BR>};</P>
<P>/* Lookup AccelClass from opt_name. Returns NULL if not found */<BR>static AccelClass *accel_find(const char *opt_name)<BR>{<BR>&nbsp;&nbsp;&nbsp; char *class_name = g_strdup_printf(ACCEL_CLASS_NAME("%s"), opt_name);<BR>&nbsp;&nbsp;&nbsp; AccelClass *ac = ACCEL_CLASS(object_class_by_name(class_name));<BR>&nbsp;&nbsp;&nbsp; g_free(class_name);<BR>&nbsp;&nbsp;&nbsp; return ac;<BR>}</P>
<P>static int accel_init_machine(AccelClass *acc, MachineState *ms)<BR>{<BR>&nbsp;&nbsp;&nbsp; ObjectClass *oc = OBJECT_CLASS(acc);<BR>&nbsp;&nbsp;&nbsp; const char *cname = object_class_get_name(oc);<BR>&nbsp;&nbsp;&nbsp; AccelState *accel = ACCEL(object_new(cname));<BR>&nbsp;&nbsp;&nbsp; int ret;<BR>&nbsp;&nbsp;&nbsp; ms-&gt;accelerator = accel;<BR>&nbsp;&nbsp;&nbsp; *(acc-&gt;allowed) = true;<BR>&nbsp;&nbsp;&nbsp; ret = acc-&gt;init_machine(ms);<BR>&nbsp;&nbsp;&nbsp; if (ret &lt; 0) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ms-&gt;accelerator = NULL;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *(acc-&gt;allowed) = false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object_unref(OBJECT(accel));<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; return ret;<BR>}</P>
<P>int configure_accelerator(MachineState *ms)<BR>{<BR>&nbsp;&nbsp;&nbsp; const char *p;<BR>&nbsp;&nbsp;&nbsp; char buf[10];<BR>&nbsp;&nbsp;&nbsp; int ret;<BR>&nbsp;&nbsp;&nbsp; bool accel_initialised = false;<BR>&nbsp;&nbsp;&nbsp; bool init_failed = false;<BR>&nbsp;&nbsp;&nbsp; AccelClass *acc = NULL;</P>
<P>&nbsp;&nbsp;&nbsp; p = qemu_opt_get(qemu_get_machine_opts(), "accel");<BR>&nbsp;&nbsp;&nbsp; if (p == NULL) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Use the default "accelerator", tcg */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = "tcg";<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; while (!accel_initialised &amp;&amp; *p != '\0') {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (*p == ':') {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = get_opt_name(buf, sizeof(buf), p, ':');<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acc = accel_find(buf);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!acc) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf(stderr, "\"%s\" accelerator not found.\n", buf);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (acc-&gt;available &amp;&amp; !acc-&gt;available()) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%s not supported for this target\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acc-&gt;name);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = accel_init_machine(acc, ms);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ret &lt; 0) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; init_failed = true;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf(stderr, "failed to initialize %s: %s\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acc-&gt;name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strerror(-ret));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; accel_initialised = true;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (!accel_initialised) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!init_failed) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf(stderr, "No accelerator found!\n");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit(1);<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; if (init_failed) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf(stderr, "Back to %s accelerator.\n", acc-&gt;name);<BR>&nbsp;&nbsp;&nbsp; }</P>
<P>&nbsp;&nbsp;&nbsp; return !accel_initialised;<BR>}</P>
<P><BR>static void tcg_accel_class_init(ObjectClass *oc, void *data)<BR>{<BR>&nbsp;&nbsp;&nbsp; AccelClass *ac = ACCEL_CLASS(oc);<BR>&nbsp;&nbsp;&nbsp; ac-&gt;name = "tcg";<BR>&nbsp;&nbsp;&nbsp; ac-&gt;init_machine = tcg_init;<BR>&nbsp;&nbsp;&nbsp; ac-&gt;allowed = &amp;tcg_allowed;<BR>}</P>
<P>#define TYPE_TCG_ACCEL ACCEL_CLASS_NAME("tcg")</P>
<P>static const TypeInfo tcg_accel_type = {<BR>&nbsp;&nbsp;&nbsp; .name = TYPE_TCG_ACCEL,<BR>&nbsp;&nbsp;&nbsp; .parent = TYPE_ACCEL,<BR>&nbsp;&nbsp;&nbsp; .class_init = tcg_accel_class_init,<BR>};</P>
<P>static void register_accel_types(void)<BR>{<BR>&nbsp;&nbsp;&nbsp; type_register_static(&amp;accel_type);<BR>&nbsp;&nbsp;&nbsp; type_register_static(&amp;tcg_accel_type);<BR>}</P>
<P>type_init(register_accel_types);