/* size changing ops */<BR>DEF(ext_i32_i64, 1, 1, 0, IMPL64)<BR>DEF(extu_i32_i64, 1, 1, 0, IMPL64)<BR>DEF(extrl_i64_i32, 1, 1, 0,<BR>&nbsp;&nbsp;&nbsp; IMPL(TCG_TARGET_HAS_extrl_i64_i32)<BR>&nbsp;&nbsp;&nbsp; | (TCG_TARGET_REG_BITS == 32 ? TCG_OPF_NOT_PRESENT : 0))<BR>DEF(extrh_i64_i32, 1, 1, 0,<BR>&nbsp;&nbsp;&nbsp; IMPL(TCG_TARGET_HAS_extrh_i64_i32)<BR>&nbsp;&nbsp;&nbsp; | (TCG_TARGET_REG_BITS == 32 ? TCG_OPF_NOT_PRESENT : 0))</P>
<P>DEF(brcond_i64, 0, 2, 2, TCG_OPF_BB_END | IMPL64)<BR>DEF(ext8s_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext8s_i64))<BR>DEF(ext16s_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext16s_i64))<BR>DEF(ext32s_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext32s_i64))<BR>DEF(ext8u_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext8u_i64))<BR>DEF(ext16u_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext16u_i64))<BR>DEF(ext32u_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_ext32u_i64))<BR>DEF(bswap16_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_bswap16_i64))<BR>DEF(bswap32_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_bswap32_i64))<BR>DEF(bswap64_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_bswap64_i64))<BR>DEF(not_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_not_i64))<BR>DEF(neg_i64, 1, 1, 0, IMPL64 | IMPL(TCG_TARGET_HAS_neg_i64))<BR>DEF(andc_i64, 1, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_andc_i64))<BR>DEF(orc_i64, 1, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_orc_i64))<BR>DEF(eqv_i64, 1, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_eqv_i64))<BR>DEF(nand_i64, 1, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_nand_i64))<BR>DEF(nor_i64, 1, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_nor_i64))</P>
<P>DEF(add2_i64, 2, 4, 0, IMPL64 | IMPL(TCG_TARGET_HAS_add2_i64))<BR>DEF(sub2_i64, 2, 4, 0, IMPL64 | IMPL(TCG_TARGET_HAS_sub2_i64))<BR>DEF(mulu2_i64, 2, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_mulu2_i64))<BR>DEF(muls2_i64, 2, 2, 0, IMPL64 | IMPL(TCG_TARGET_HAS_muls2_i64))<BR>DEF(muluh_i64, 1, 2, 0, IMPL(TCG_TARGET_HAS_muluh_i64))<BR>DEF(mulsh_i64, 1, 2, 0, IMPL(TCG_TARGET_HAS_mulsh_i64))