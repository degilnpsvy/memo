7.1 Codebase</P>
<P>&nbsp;</P>
<P>Start of Execution:<BR>The major C files in the / that are important for the study are ; /vl.c, /cpus.c, /exec.c, /cpu-exec.c. The &#8216;main&#8217; function where the execution starts is defined in /vl.c. The functions in this file sets up a virtual machine environment as per the given virtual machine specification such as size of ram, available devices, number of CPUs etc. From the main function, after the virtual machine is set up, execution branches out through files such as /cpus.c, /exec.c, /cpu-exec.c.</P>
<P></P>
<P>Emulated Hardware:<BR>The code that emulates all virtual hardware in the virtual machine can be found in /hw/. QEMU emulates a considerable number of hardware but detailed understanding of how the hardware are emulated is not necessary in this study.</P>
<P>Guest (Target) Specific:<BR>The processor architectures currently emulated in QEMU are; Alpha, ARM, Cris, i386, M68K, PPC, Sparc, Mips, MicroBlaze, S390X and SH4. The code specific to these architectures necessary to convert TBs to TCG ops are available in /target-xyz/ where xyz can any of the above given architecture names. Therefore the code specific to i386 can be found in /target-i386/. This part can be called as the frontend of TCG.</P>
<P>Host (TCG) Specific:<BR>The host specific code for generating the host code from the TCG ops are placed in /tcg/ . Inside TCG one can find /xyz/ where xyz can be i386 ,sparc etc which contain the code that converts TCG ops to architecture specific code. This part can be called as the backend of TCG.</P>
<P>Summary:<BR>/vl.c : The main emulator loop, the virtual machine is setup and CPUs are executed.<BR>/target-xyz/translate.c : The extracted guest code (guest specific ISA) is converted into architecture independent TCG ops<BR>/tcg/tcg.c : The main code for TCG.<BR>/tcg/*/tcg-target.c : Code that converts the TCG ops to host code (host specific ISA).<BR>/cpu-exec.c : Function cpu-exec() in /cpu-exec.c finds the next translation block (TB), if not found calls are made to generate the next TB and finally to execute the generated code.