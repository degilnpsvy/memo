#&nbsp;qemu:tcg/tcg-op.h</P>
<P>/* QEMU specific operations.&nbsp; */</P>
<P></P>
<P>#ifndef TARGET_LONG_BITS<BR>#error must include QEMU headers<BR>#endif</P>
<P>#if TARGET_INSN_START_WORDS == 1<BR># if TARGET_LONG_BITS &lt;= TCG_TARGET_REG_BITS<BR>static inline void tcg_gen_insn_start(target_ulong pc)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op1(&amp;tcg_ctx, INDEX_op_insn_start, pc);<BR>}<BR># else<BR>static inline void tcg_gen_insn_start(target_ulong pc)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op2(&amp;tcg_ctx, INDEX_op_insn_start,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)pc, (uint32_t)(pc &gt;&gt; 32));<BR>}<BR># endif<BR>#elif TARGET_INSN_START_WORDS == 2<BR># if TARGET_LONG_BITS &lt;= TCG_TARGET_REG_BITS<BR>static inline void tcg_gen_insn_start(target_ulong pc, target_ulong a1)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op2(&amp;tcg_ctx, INDEX_op_insn_start, pc, a1);<BR>}<BR># else<BR>static inline void tcg_gen_insn_start(target_ulong pc, target_ulong a1)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op4(&amp;tcg_ctx, INDEX_op_insn_start,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)pc, (uint32_t)(pc &gt;&gt; 32),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)a1, (uint32_t)(a1 &gt;&gt; 32));<BR>}<BR># endif<BR>#elif TARGET_INSN_START_WORDS == 3<BR># if TARGET_LONG_BITS &lt;= TCG_TARGET_REG_BITS<BR>static inline void tcg_gen_insn_start(target_ulong pc, target_ulong a1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target_ulong a2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3(&amp;tcg_ctx, INDEX_op_insn_start, pc, a1, a2);<BR>}<BR># else<BR>static inline void tcg_gen_insn_start(target_ulong pc, target_ulong a1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target_ulong a2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op6(&amp;tcg_ctx, INDEX_op_insn_start,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)pc, (uint32_t)(pc &gt;&gt; 32),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)a1, (uint32_t)(a1 &gt;&gt; 32),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint32_t)a2, (uint32_t)(a2 &gt;&gt; 32));<BR>}<BR># endif<BR>#else<BR># error "Unhandled number of operands to insn_start"<BR>#endif</P>
<P>static inline void tcg_gen_exit_tb(uintptr_t val)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op1i(INDEX_op_exit_tb, val);<BR>}</P>
<P>void tcg_gen_goto_tb(unsigned idx);</P>
<P>#if TARGET_LONG_BITS == 32<BR>#define TCGv TCGv_i32<BR>#define tcg_temp_new() tcg_temp_new_i32()<BR>#define tcg_global_reg_new tcg_global_reg_new_i32<BR>#define tcg_global_mem_new tcg_global_mem_new_i32<BR>#define tcg_temp_local_new() tcg_temp_local_new_i32()<BR>#define tcg_temp_free tcg_temp_free_i32<BR>#define TCGV_UNUSED(x) TCGV_UNUSED_I32(x)<BR>#define TCGV_IS_UNUSED(x) TCGV_IS_UNUSED_I32(x)<BR>#define TCGV_EQUAL(a, b) TCGV_EQUAL_I32(a, b)<BR>#define tcg_gen_qemu_ld_tl tcg_gen_qemu_ld_i32<BR>#define tcg_gen_qemu_st_tl tcg_gen_qemu_st_i32<BR>#else<BR>#define TCGv TCGv_i64<BR>#define tcg_temp_new() tcg_temp_new_i64()<BR>#define tcg_global_reg_new tcg_global_reg_new_i64<BR>#define tcg_global_mem_new tcg_global_mem_new_i64<BR>#define tcg_temp_local_new() tcg_temp_local_new_i64()<BR>#define tcg_temp_free tcg_temp_free_i64<BR>#define TCGV_UNUSED(x) TCGV_UNUSED_I64(x)<BR>#define TCGV_IS_UNUSED(x) TCGV_IS_UNUSED_I64(x)<BR>#define TCGV_EQUAL(a, b) TCGV_EQUAL_I64(a, b)<BR>#define tcg_gen_qemu_ld_tl tcg_gen_qemu_ld_i64<BR>#define tcg_gen_qemu_st_tl tcg_gen_qemu_st_i64<BR>#endif</P>
<P>void tcg_gen_qemu_ld_i32(TCGv_i32, TCGv, TCGArg, TCGMemOp);<BR>void tcg_gen_qemu_st_i32(TCGv_i32, TCGv, TCGArg, TCGMemOp);<BR>void tcg_gen_qemu_ld_i64(TCGv_i64, TCGv, TCGArg, TCGMemOp);<BR>void tcg_gen_qemu_st_i64(TCGv_i64, TCGv, TCGArg, TCGMemOp);</P>
<P>static inline void tcg_gen_qemu_ld8u(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_UB);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld8s(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_SB);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld16u(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_TEUW);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld16s(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_TESW);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld32u(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_TEUL);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld32s(TCGv ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_tl(ret, addr, mem_index, MO_TESL);<BR>}</P>
<P>static inline void tcg_gen_qemu_ld64(TCGv_i64 ret, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_ld_i64(ret, addr, mem_index, MO_TEQ);<BR>}</P>
<P>static inline void tcg_gen_qemu_st8(TCGv arg, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_st_tl(arg, addr, mem_index, MO_UB);<BR>}</P>
<P>static inline void tcg_gen_qemu_st16(TCGv arg, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_st_tl(arg, addr, mem_index, MO_TEUW);<BR>}</P>
<P>static inline void tcg_gen_qemu_st32(TCGv arg, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_st_tl(arg, addr, mem_index, MO_TEUL);<BR>}</P>
<P>static inline void tcg_gen_qemu_st64(TCGv_i64 arg, TCGv addr, int mem_index)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_qemu_st_i64(arg, addr, mem_index, MO_TEQ);<BR>}