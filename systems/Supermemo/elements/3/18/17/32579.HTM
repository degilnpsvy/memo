#&nbsp;qemu:tcg/tcg-op.h</P>
<P>/* Helper calls. */</P>
<P></P>
<P>/* 32 bit ops */</P>
<P>void tcg_gen_addi_i32(TCGv_i32 ret, TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_subfi_i32(TCGv_i32 ret, int32_t arg1, TCGv_i32 arg2);<BR>void tcg_gen_subi_i32(TCGv_i32 ret, TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_andi_i32(TCGv_i32 ret, TCGv_i32 arg1, uint32_t arg2);<BR>void tcg_gen_ori_i32(TCGv_i32 ret, TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_xori_i32(TCGv_i32 ret, TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_shli_i32(TCGv_i32 ret, TCGv_i32 arg1, unsigned arg2);<BR>void tcg_gen_shri_i32(TCGv_i32 ret, TCGv_i32 arg1, unsigned arg2);<BR>void tcg_gen_sari_i32(TCGv_i32 ret, TCGv_i32 arg1, unsigned arg2);<BR>void tcg_gen_muli_i32(TCGv_i32 ret, TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_div_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_rem_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_divu_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_remu_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_andc_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_eqv_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_nand_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_nor_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_orc_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_rotl_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_rotli_i32(TCGv_i32 ret, TCGv_i32 arg1, unsigned arg2);<BR>void tcg_gen_rotr_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_rotri_i32(TCGv_i32 ret, TCGv_i32 arg1, unsigned arg2);<BR>void tcg_gen_deposit_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int ofs, unsigned int len);<BR>void tcg_gen_brcond_i32(TCGCond cond, TCGv_i32 arg1, TCGv_i32 arg2, TCGLabel *);<BR>void tcg_gen_brcondi_i32(TCGCond cond, TCGv_i32 arg1, int32_t arg2, TCGLabel *);<BR>void tcg_gen_setcond_i32(TCGCond cond, TCGv_i32 ret,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_setcondi_i32(TCGCond cond, TCGv_i32 ret,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i32 arg1, int32_t arg2);<BR>void tcg_gen_movcond_i32(TCGCond cond, TCGv_i32 ret, TCGv_i32 c1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i32 c2, TCGv_i32 v1, TCGv_i32 v2);<BR>void tcg_gen_add2_i32(TCGv_i32 rl, TCGv_i32 rh, TCGv_i32 al,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i32 ah, TCGv_i32 bl, TCGv_i32 bh);<BR>void tcg_gen_sub2_i32(TCGv_i32 rl, TCGv_i32 rh, TCGv_i32 al,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i32 ah, TCGv_i32 bl, TCGv_i32 bh);<BR>void tcg_gen_mulu2_i32(TCGv_i32 rl, TCGv_i32 rh, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_muls2_i32(TCGv_i32 rl, TCGv_i32 rh, TCGv_i32 arg1, TCGv_i32 arg2);<BR>void tcg_gen_ext8s_i32(TCGv_i32 ret, TCGv_i32 arg);<BR>void tcg_gen_ext16s_i32(TCGv_i32 ret, TCGv_i32 arg);<BR>void tcg_gen_ext8u_i32(TCGv_i32 ret, TCGv_i32 arg);<BR>void tcg_gen_ext16u_i32(TCGv_i32 ret, TCGv_i32 arg);<BR>void tcg_gen_bswap16_i32(TCGv_i32 ret, TCGv_i32 arg);<BR>void tcg_gen_bswap32_i32(TCGv_i32 ret, TCGv_i32 arg);</P>
<P>static inline void tcg_gen_discard_i32(TCGv_i32 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op1_i32(INDEX_op_discard, arg);<BR>}</P>
<P>static inline void tcg_gen_mov_i32(TCGv_i32 ret, TCGv_i32 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (!TCGV_EQUAL_I32(ret, arg)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op2_i32(INDEX_op_mov_i32, ret, arg);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>static inline void tcg_gen_movi_i32(TCGv_i32 ret, int32_t arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op2i_i32(INDEX_op_movi_i32, ret, arg);<BR>}</P>
<P>static inline void tcg_gen_ld8u_i32(TCGv_i32 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_ld8u_i32, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld8s_i32(TCGv_i32 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_ld8s_i32, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld16u_i32(TCGv_i32 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_ld16u_i32, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld16s_i32(TCGv_i32 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_ld16s_i32, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld_i32(TCGv_i32 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_ld_i32, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st8_i32(TCGv_i32 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_st8_i32, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st16_i32(TCGv_i32 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_st16_i32, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st_i32(TCGv_i32 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i32(INDEX_op_st_i32, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_add_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_add_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_sub_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_sub_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_and_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_and_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_or_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_or_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_xor_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_xor_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_shl_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_shl_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_shr_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_shr_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_sar_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_sar_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_mul_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i32(INDEX_op_mul_i32, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_neg_i32(TCGv_i32 ret, TCGv_i32 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (TCG_TARGET_HAS_neg_i32) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op2_i32(INDEX_op_neg_i32, ret, arg);<BR>&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_subfi_i32(ret, 0, arg);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>static inline void tcg_gen_not_i32(TCGv_i32 ret, TCGv_i32 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (TCG_TARGET_HAS_not_i32) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op2_i32(INDEX_op_not_i32, ret, arg);<BR>&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_xori_i32(ret, arg, -1);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>/* 64 bit ops */</P>
<P>void tcg_gen_addi_i64(TCGv_i64 ret, TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_subfi_i64(TCGv_i64 ret, int64_t arg1, TCGv_i64 arg2);<BR>void tcg_gen_subi_i64(TCGv_i64 ret, TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_andi_i64(TCGv_i64 ret, TCGv_i64 arg1, uint64_t arg2);<BR>void tcg_gen_ori_i64(TCGv_i64 ret, TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_xori_i64(TCGv_i64 ret, TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_shli_i64(TCGv_i64 ret, TCGv_i64 arg1, unsigned arg2);<BR>void tcg_gen_shri_i64(TCGv_i64 ret, TCGv_i64 arg1, unsigned arg2);<BR>void tcg_gen_sari_i64(TCGv_i64 ret, TCGv_i64 arg1, unsigned arg2);<BR>void tcg_gen_muli_i64(TCGv_i64 ret, TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_div_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_rem_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_divu_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_remu_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_andc_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_eqv_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_nand_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_nor_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_orc_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_rotl_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_rotli_i64(TCGv_i64 ret, TCGv_i64 arg1, unsigned arg2);<BR>void tcg_gen_rotr_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_rotri_i64(TCGv_i64 ret, TCGv_i64 arg1, unsigned arg2);<BR>void tcg_gen_deposit_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int ofs, unsigned int len);<BR>void tcg_gen_brcond_i64(TCGCond cond, TCGv_i64 arg1, TCGv_i64 arg2, TCGLabel *);<BR>void tcg_gen_brcondi_i64(TCGCond cond, TCGv_i64 arg1, int64_t arg2, TCGLabel *);<BR>void tcg_gen_setcond_i64(TCGCond cond, TCGv_i64 ret,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_setcondi_i64(TCGCond cond, TCGv_i64 ret,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i64 arg1, int64_t arg2);<BR>void tcg_gen_movcond_i64(TCGCond cond, TCGv_i64 ret, TCGv_i64 c1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i64 c2, TCGv_i64 v1, TCGv_i64 v2);<BR>void tcg_gen_add2_i64(TCGv_i64 rl, TCGv_i64 rh, TCGv_i64 al,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i64 ah, TCGv_i64 bl, TCGv_i64 bh);<BR>void tcg_gen_sub2_i64(TCGv_i64 rl, TCGv_i64 rh, TCGv_i64 al,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGv_i64 ah, TCGv_i64 bl, TCGv_i64 bh);<BR>void tcg_gen_mulu2_i64(TCGv_i64 rl, TCGv_i64 rh, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_muls2_i64(TCGv_i64 rl, TCGv_i64 rh, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_not_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext8s_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext16s_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext32s_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext8u_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext16u_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_ext32u_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_bswap16_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_bswap32_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_bswap64_i64(TCGv_i64 ret, TCGv_i64 arg);</P>
<P>#if TCG_TARGET_REG_BITS == 64<BR>static inline void tcg_gen_discard_i64(TCGv_i64 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op1_i64(INDEX_op_discard, arg);<BR>}</P>
<P>static inline void tcg_gen_mov_i64(TCGv_i64 ret, TCGv_i64 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (!TCGV_EQUAL_I64(ret, arg)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op2_i64(INDEX_op_mov_i64, ret, arg);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>static inline void tcg_gen_movi_i64(TCGv_i64 ret, int64_t arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op2i_i64(INDEX_op_movi_i64, ret, arg);<BR>}</P>
<P>static inline void tcg_gen_ld8u_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld8u_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld8s_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld8s_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld16u_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld16u_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld16s_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld16s_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld32u_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld32u_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld32s_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld32s_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_ld_i64(TCGv_i64 ret, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_ld_i64, ret, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st8_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_st8_i64, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st16_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_st16_i64, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st32_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_st32_i64, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_ldst_op_i64(INDEX_op_st_i64, arg1, arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_add_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_add_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_sub_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_and_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_and_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_or_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_or_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_xor_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_xor_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_shl_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_shl_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_shr_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_shr_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_sar_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_sar_i64, ret, arg1, arg2);<BR>}</P>
<P>static inline void tcg_gen_mul_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_op3_i64(INDEX_op_mul_i64, ret, arg1, arg2);<BR>}<BR>#else /* TCG_TARGET_REG_BITS == 32 */<BR>static inline void tcg_gen_st8_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_st8_i32(TCGV_LOW(arg1), arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st16_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_st16_i32(TCGV_LOW(arg1), arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_st32_i64(TCGv_i64 arg1, TCGv_ptr arg2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_target_long offset)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_st_i32(TCGV_LOW(arg1), arg2, offset);<BR>}</P>
<P>static inline void tcg_gen_add_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_add2_i32(TCGV_LOW(ret), TCGV_HIGH(ret), TCGV_LOW(arg1),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));<BR>}</P>
<P>static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_sub2_i32(TCGV_LOW(ret), TCGV_HIGH(ret), TCGV_LOW(arg1),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));<BR>}</P>
<P>void tcg_gen_discard_i64(TCGv_i64 arg);<BR>void tcg_gen_mov_i64(TCGv_i64 ret, TCGv_i64 arg);<BR>void tcg_gen_movi_i64(TCGv_i64 ret, int64_t arg);<BR>void tcg_gen_ld8u_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld8s_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld16u_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld16s_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld32u_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld32s_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_ld_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_st_i64(TCGv_i64 arg1, TCGv_ptr arg2, tcg_target_long offset);<BR>void tcg_gen_and_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_or_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_xor_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_shl_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_shr_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_sar_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>void tcg_gen_mul_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);<BR>#endif /* TCG_TARGET_REG_BITS */</P>
<P>static inline void tcg_gen_neg_i64(TCGv_i64 ret, TCGv_i64 arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; if (TCG_TARGET_HAS_neg_i64) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op2_i64(INDEX_op_neg_i64, ret, arg);<BR>&nbsp;&nbsp;&nbsp; } else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_subfi_i64(ret, 0, arg);<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P>/* Size changing operations.&nbsp; */</P>
<P>void tcg_gen_extu_i32_i64(TCGv_i64 ret, TCGv_i32 arg);<BR>void tcg_gen_ext_i32_i64(TCGv_i64 ret, TCGv_i32 arg);<BR>void tcg_gen_concat_i32_i64(TCGv_i64 dest, TCGv_i32 low, TCGv_i32 high);<BR>void tcg_gen_extrl_i64_i32(TCGv_i32 ret, TCGv_i64 arg);<BR>void tcg_gen_extrh_i64_i32(TCGv_i32 ret, TCGv_i64 arg);<BR>void tcg_gen_extr_i64_i32(TCGv_i32 lo, TCGv_i32 hi, TCGv_i64 arg);<BR>void tcg_gen_extr32_i64(TCGv_i64 lo, TCGv_i64 hi, TCGv_i64 arg);</P>
<P>static inline void tcg_gen_concat32_i64(TCGv_i64 ret, TCGv_i64 lo, TCGv_i64 hi)<BR>{<BR>&nbsp;&nbsp;&nbsp; tcg_gen_deposit_i64(ret, lo, hi, 32, 32);<BR>}