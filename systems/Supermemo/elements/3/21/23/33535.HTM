# qemu:tcg/tci/README 
<P></P>
<P>TCG Interpreter (TCI) - Copyright (c) 2011 Stefan Weil.</P>
<P></P>
<P>This file is released under the BSD license.</P>
<P><FONT class=extract>1) Introduction</FONT></P>
<P><FONT class=extract>TCG (Tiny Code Generator) is a code generator which translates<BR>code fragments ("basic blocks") from target code (any of the<BR>targets supported by QEMU) to a code representation which<BR>can be run on a host.</FONT></P>
<P><FONT class=extract>QEMU can create native code for some hosts (arm, i386, ia64, ppc, ppc64,<BR>s390, sparc, x86_64). For others, unofficial host support was written.</FONT></P>
<P><FONT class=extract>By adding a code generator for a virtual machine and using an<BR>interpreter for the generated bytecode, it is possible to<BR>support (almost) any host.</FONT></P>
<P><FONT class=extract>This is what TCI (Tiny Code Interpreter) does.</FONT></P>
<P><FONT class=extract>2) Implementation</FONT></P>
<P><FONT class=extract>Like each TCG host frontend, TCI implements the code generator in<BR>tcg-target.inc.c, tcg-target.h. Both files are in directory tcg/tci.</FONT></P>
<P><FONT class=extract>The additional file tcg/tci.c adds the interpreter.</FONT></P>
<P><FONT class=extract>The bytecode consists of opcodes (same numeric values as those used by<BR>TCG), command length and arguments of variable size and number.</FONT></P>
<P>3) Usage</P>
<P>For hosts without native TCG, the interpreter TCI must be enabled by</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; configure --enable-tcg-interpreter</P>
<P>If configure is called without --enable-tcg-interpreter, it will<BR>suggest using this option. Setting it automatically would need<BR>additional code in configure which must be fixed when new native TCG<BR>implementations are added.</P>
<P>System emulation should work on any 32 or 64 bit host.<BR>User mode emulation might work. Maybe a new linker script (*.ld)<BR>is needed. Byte order might be wrong (on big endian hosts)<BR>and need fixes in configure.</P>
<P>For hosts with native TCG, the interpreter TCI can be enabled by</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; configure --enable-tcg-interpreter</P>
<P>The only difference from running QEMU with TCI to running without TCI<BR>should be speed. Especially during development of TCI, it was very<BR>useful to compare runs with and without TCI. Create /tmp/qemu.log by</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; qemu-system-i386 -d in_asm,op_opt,cpu -D /tmp/qemu.log -singlestep</P>
<P>once with interpreter and once without interpreter and compare the resulting<BR>qemu.log files. This is also useful to see the effects of additional<BR>registers or additional opcodes (it is easy to modify the virtual machine).<BR>It can also be used to verify native TCGs.</P>
<P>Hosts with native TCG can also enable TCI by claiming to be unsupported:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; configure --cpu=unknown --enable-tcg-interpreter</P>
<P>configure then no longer uses the native linker script (*.ld) for<BR>user mode emulation.</P>
<P><BR>4) Status</P>
<P>TCI needs special implementation for 32 and 64 bit host, 32 and 64 bit target,<BR>host and target with same or different endianness.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | host (le)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; host (be)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 64<BR>------------+------------------------------------------------------------<BR>target (le) | s0, u0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s1, u1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?<BR>32 bit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>target (le) | sc, uc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s1, u1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?<BR>64 bit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>target (be) | sc, u0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sc, uc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?<BR>32 bit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>target (be) | sc, uc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sc, uc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s?, u?<BR>64 bit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</P>
<P>System emulation<BR>s? = untested<BR>sc = compiles<BR>s0 = bios works<BR>s1 = grub works<BR>s2 = Linux boots</P>
<P>Linux user mode emulation<BR>u? = untested<BR>uc = compiles<BR>u0 = static hello works<BR>u1 = linux-user-test works</P>
<P>5) Todo list</P>
<P>* TCI is not widely tested. It was written and tested on a x86_64 host<BR>&nbsp; running i386 and x86_64 system emulation and Linux user mode.<BR>&nbsp; A cross compiled QEMU for i386 host also works with the same basic tests.<BR>&nbsp; A cross compiled QEMU for mipsel host works, too. It is terribly slow<BR>&nbsp; because I run it in a mips malta emulation, so it is an interpreted<BR>&nbsp; emulation in an emulation.<BR>&nbsp; A cross compiled QEMU for arm host works (tested with pc bios).<BR>&nbsp; A cross compiled QEMU for ppc host works at least partially:<BR>&nbsp; i386-linux-user/qemu-i386 can run a simple hello-world program<BR>&nbsp; (tested in a ppc emulation).</P>
<P>* Some TCG opcodes are either missing in the code generator and/or<BR>&nbsp; in the interpreter. These opcodes raise a runtime exception, so it is<BR>&nbsp; possible to see where code must be added.</P>
<P>* The pseudo code is not optimized and still ugly. For hosts with special<BR>&nbsp; alignment requirements, it needs some fixes (maybe aligned bytecode<BR>&nbsp; would also improve speed for hosts which support byte alignment).</P>
<P>* A better disassembler for the pseudo code would be nice (a very primitive<BR>&nbsp; disassembler is included in tcg-target.inc.c).</P>
<P>* It might be useful to have a runtime option which selects the native TCG<BR>&nbsp; or TCI, so QEMU would have to include two TCGs. Today, selecting TCI<BR>&nbsp; is a configure option, so you need two compilations of QEMU.