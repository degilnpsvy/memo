REGPARM
<P></P>
<P>&#35843;&#29992;&#21327;&#35758;&#65288;Calling Convention&#65289;<BR>&#20174;&#20195;&#30721;&#30340;&#35282;&#24230;&#30475;&#65292;&#35843;&#29992;&#21327;&#35758;&#36890;&#24120;&#20986;&#29616;&#22312;&#20989;&#25968;&#22768;&#26126;&#20013;&#12290;&#20197;&#19979;&#38754;&#30340;Windows API&#21407;&#22411;&#20026;&#20363;&#65306;<BR>BOOL WINAPI SetEvent(HANDLE hEvent);<BR>&#22312;&#20989;&#25968;&#36820;&#22238;&#20540;&#21644;&#20989;&#25968;&#21517;&#20043;&#38388;&#30340;WINAPI&#20415;&#26159;&#36825;&#20010;&#20989;&#25968;&#25152;&#20351;&#29992;&#30340;&#35843;&#29992;&#21327;&#35758;&#12290;&#23427;&#26159;&#20010;&#23439;&#23450;&#20041;&#65292;&#23454;&#38469;&#19978;&#23601;&#26159;&#25152;&#35859;&#30340;&#26631;&#20934;&#35843;&#29992;&#65288;__stdcall__stdcall&#65289;&#65306;<BR>#define WINAPI __stdcall<BR>&#31867;&#20284;&#30340;&#23450;&#20041;&#36824;&#26377;&#65306;<BR>#define PASCAL __pascal<BR>#define WINAPIV __cdecl<BR>&#26368;&#21518;&#19968;&#34892;&#20013;&#30340;__cdecl&#20415;&#26159;&#33879;&#21517;&#30340;C&#35843;&#29992;&#21327;&#35758;&#65292;WINAPIV&#23439;&#20013;&#30340;V&#20195;&#34920;&#21487;&#21464;&#25968;&#37327;&#30340;&#21442;&#25968;&#65292;&#25903;&#25345;&#21487;&#21464;&#25968;&#37327;&#30340;&#21442;&#25968;&#26159;C&#35843;&#29992;&#21327;&#35758;&#30340;&#19968;&#20010;&#37325;&#35201;&#29305;&#33394;&#12290;<BR>&#22312;Linux&#19979;&#65292;&#22914;&#26524;&#20351;&#29992;&#26368;&#24120;&#29992;&#30340;GCC&#32534;&#35793;&#22120;&#65292;&#37027;&#20040;&#24212;&#35813;&#20351;&#29992;&#20989;&#25968;&#23646;&#24615;&#20851;&#38190;&#23383;__attribute__&#26469;&#35828;&#26126;&#35843;&#29992;&#21327;&#35758;&#12290;&#20363;&#22914;&#19979;&#38754;&#20004;&#20010;&#20989;&#25968;&#65292;&#31532;&#19968;&#20010;&#20351;&#29992;&#30340;&#26159;C&#35843;&#29992;&#21327;&#35758;&#65292;&#31532;&#20108;&#20010;&#20351;&#29992;&#30340;&#26159;&#26631;&#20934;&#35843;&#29992;&#21327;&#35758;&#65288;stdcall&#65289;&#12290;<BR>int __attribute__((__cdecl__)) fei2(int a, int b, int c, int d, int e);<BR>int __attribute__((__stdcall__)) pao(int a, int b, int c, int d, int e);<BR>&#26681;&#25454;GCC&#25163;&#20876;&#65292;&#19978;&#38754;&#30340;__stdcall__&#21644;__cdecl__&#20063;&#21487;&#20197;&#20889;&#20026;stdcall&#21644;cdecl&#12290;<BR>&#23545;&#20110;&#21516;&#19968;&#20010;&#35843;&#29992;&#21327;&#35758;&#65288;&#27604;&#22914;cdecl&#65289;&#32780;&#35328;&#65292;&#22312;Linux&#21644;Windows&#19979;&#26377;&#21306;&#21035;&#20040;&#65311;&#31572;&#26696;&#26159;&#35201;&#30475;&#24773;&#20917;&#65292;&#35201;&#30475;GCC&#30340;&#29256;&#26412;&#65292;&#35201;&#30475;&#26159;&#24212;&#29992;&#31243;&#24207;&#36824;&#26159;&#20869;&#26680;&#27169;&#22359;&#65292;&#35201;&#30475;&#32534;&#35793;&#22120;&#21442;&#25968;&#12290;&#19981;&#36807;&#65292;&#36825;&#20960;&#20010;&#26465;&#20214;&#37117;&#19982;&#19968;&#20010;&#20851;&#38190;&#23383;&#26377;&#20851;&#65292;&#36825;&#20010;&#20851;&#38190;&#23383;&#23601;&#26159;regparm&#12290;</P>
<P>REGPARM<BR>GCC&#25163;&#20876;&#20013;&#25551;&#36848;&#22914;&#19979;&#65306;<BR>regparm(number)<BR>On the Intel 386, the regparm attribute causes the compiler to pass arguments number one to number if they are of integral type in registers EAX, EDX, and ECX instead of on the stack. Functions that take a variable number of arguments continue to be passed all of their arguments on the stack.<BR>&#24847;&#24605;&#26159;&#35828;&#65292;&#22312;&#33521;&#29305;&#23572;x86&#19978;regparm&#23646;&#24615;&#21487;&#20197;&#35753;&#32534;&#35793;&#22120;&#20351;&#29992;&#23492;&#23384;&#22120;&#26469;&#20256;&#36882;&#25972;&#25968;&#21442;&#25968;&#65292;&#21487;&#20197;&#25351;&#23450;&#30340;&#20010;&#25968;&#26377;&#25928;&#20540;&#20026;0~3&#65292;&#20351;&#29992;&#30340;&#23492;&#23384;&#22120;&#26159;EAX&#65292;EDX&#21644;ECX&#12290;<BR>int __attribute__((regparm(3))) func1(int a, int b, int c, int d, int e)<BR>{<BR>&nbsp;&nbsp;&nbsp; return a+b+c+d+e;<BR>}</P>
<P>int __attribute__((regparm(1))) func2(int a, int b, int c, int d, int e)<BR>{<BR>&nbsp;&nbsp;&nbsp; return a+b+c+d+e;<BR>}</P>
<P>$ gcc -m32 -c temp.c &amp;&amp; objdump -d ./temp.o</P>
<P>./temp.o:&nbsp;&nbsp;&nbsp;&nbsp; file format elf32-i386</P>
<P><BR>Disassembly of section .text:</P>
<P>00000000 &lt;func1&gt;:<BR>&nbsp;&nbsp; 0:&nbsp;55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;push&nbsp;&nbsp; %ebp<BR>&nbsp;&nbsp; 1:&nbsp;89 e5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %esp,%ebp<BR>&nbsp;&nbsp; 3:&nbsp;83 ec 0c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;sub&nbsp;&nbsp;&nbsp; $0xc,%esp<BR>&nbsp;&nbsp; 6:&nbsp;89 45 fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %eax,-0x4(%ebp)<BR>&nbsp;&nbsp; 9:&nbsp;89 55 f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %edx,-0x8(%ebp)<BR>&nbsp;&nbsp; c:&nbsp;89 4d f4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %ecx,-0xc(%ebp)<BR>&nbsp;&nbsp; f:&nbsp;8b 45 f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; -0x8(%ebp),%eax<BR>&nbsp; 12:&nbsp;8b 55 fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; -0x4(%ebp),%edx<BR>&nbsp; 15:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 17:&nbsp;8b 45 f4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; -0xc(%ebp),%eax<BR>&nbsp; 1a:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 1c:&nbsp;8b 45 08&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0x8(%ebp),%eax<BR>&nbsp; 1f:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 21:&nbsp;8b 45 0c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0xc(%ebp),%eax<BR>&nbsp; 24:&nbsp;01 d0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %edx,%eax<BR>&nbsp; 26:&nbsp;c9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;leave&nbsp; <BR>&nbsp; 27:&nbsp;c3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ret&nbsp;&nbsp;&nbsp; </P>
<P>00000028 &lt;func2&gt;:<BR>&nbsp; 28:&nbsp;55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;push&nbsp;&nbsp; %ebp<BR>&nbsp; 29:&nbsp;89 e5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %esp,%ebp<BR>&nbsp; 2b:&nbsp;83 ec 04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;sub&nbsp;&nbsp;&nbsp; $0x4,%esp<BR>&nbsp; 2e:&nbsp;89 45 fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; %eax,-0x4(%ebp)<BR>&nbsp; 31:&nbsp;8b 45 08&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0x8(%ebp),%eax<BR>&nbsp; 34:&nbsp;8b 55 fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; -0x4(%ebp),%edx<BR>&nbsp; 37:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 39:&nbsp;8b 45 0c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0xc(%ebp),%eax<BR>&nbsp; 3c:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 3e:&nbsp;8b 45 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0x10(%ebp),%eax<BR>&nbsp; 41:&nbsp;01 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %eax,%edx<BR>&nbsp; 43:&nbsp;8b 45 14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;mov&nbsp;&nbsp;&nbsp; 0x14(%ebp),%eax<BR>&nbsp; 46:&nbsp;01 d0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;add&nbsp;&nbsp;&nbsp; %edx,%eax<BR>&nbsp; 48:&nbsp;c9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;leave&nbsp; <BR>&nbsp; 49:&nbsp;c3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ret&nbsp;&nbsp;&nbsp; </P>
<P>&#22312;64&#20301;gcc&#19979;&#25105;&#30340;&#27979;&#35797;&#32467;&#26524;&#20840;&#26159;&#29992;&#23492;&#23384;&#22120;&#20256;&#36882;&#30340;&#12290;</P>
<P>&#20316;&#20026;&#20989;&#25968;&#23646;&#24615;&#30340;regparm&#21482;&#26159;&#36825;&#20010;&#20851;&#38190;&#23383;&#30340;&#19968;&#20010;&#36523;&#20221;&#65292;&#23427;&#36824;&#26377;&#21478;&#19968;&#20010;&#36523;&#20221;&#65292;&#37027;&#23601;&#26159;&#32534;&#35793;&#36873;&#39033;&#12290;&#20854;&#29992;&#27861;&#26159;&#36319;&#22312;-m&#24320;&#20851;&#20043;&#21518;&#65292;&#21487;&#20197;&#20986;&#29616;&#22312;gcc&#30340;&#21629;&#20196;&#34892;&#20013;&#65292;&#27604;&#22914;<BR>gcc &#8211;o dbgee2 testso.c -mregparm=3<BR>&#22312;gcc&#25991;&#31456;&#20013;&#65306;<BR>Control how many registers are used to pass interger arguments. By default, no registers are used to pass arguments, and at most 3 registers can be used.<BR>&#28982;&#32780;&#36825;&#38656;&#35201;&#22914;libc&#31561;&#24211;&#20063;&#29992;&#21516;&#26679;&#30340;&#26041;&#24335;&#32534;&#35793;&#65292;&#29978;&#33267;Linux&#20869;&#26680;&#12290;&#22914;&#26524;&#22312;&#32534;&#35793;&#20869;&#26680;&#26102;&#20351;&#29992;&#20102;regparm&#65292;&#21017;&#20869;&#26680;&#27169;&#22359;&#20063;&#20250;&#40664;&#35748;&#20351;&#29992;regparm&#36873;&#39033;&#12290;&#36827;&#19968;&#27493;&#35762;&#65292;regparm&#26159;&#34987;&#21152;&#20837;&#21040;&#20869;&#26680;&#27169;&#22359;&#30340;version magic&#26426;&#21046;&#20013;&#65292;&#27604;&#22914;&#65292;&#22312;&#19979;&#38754;&#30340;version&#20018;&#20013;&#65292;&#23601;&#21253;&#21547;&#20102;regparm&#65306;<BR>version magic &#8216;2.6.5-1.358custom 686 REGPARM 4KSTACKS gcc-3.3&#8217; should be &#8216;2.6.5-1.358 686 REGPARM 4KSTACKS gcc-3.3&#8217;<BR>&#22240;&#27492;&#65292;&#22914;&#26524;&#20869;&#26680;&#27169;&#22359;&#27809;&#26377;&#20351;&#29992;regparm&#36873;&#39033;&#26469;&#32534;&#35793;&#65292;&#37027;&#20040;&#23601;&#21152;&#36733;&#22833;&#36133;&#12290;<BR>&#28982;&#32780;&#65292;&#36825;&#26679;&#32534;&#20986;&#26469;&#30340;&#20869;&#26680;&#20250;&#21644;&#21508;&#31181;&#39044;&#32534;&#35793;&#30340;&#24211;&#30456;&#20914;&#31361;&#12290;&#22240;&#27492;&#65292;&#22312;&#32534;&#35793;&#20869;&#26680;&#30340;Kconfig&#25991;&#20214;&#20013;&#65292;&#22312;REGPARM&#36873;&#39033;&#30340;&#35828;&#26126;&#20013;&#65292;&#26126;&#30830;&#25552;&#20986;&#20102;&#36825;&#20010;&#35686;&#21578;&#65306;<BR>Compile the kernel with &#8211;mregparm=3. This uses a different ABI and passes the first three arguments of a function call in registers. This will probably break binary only modules.</P>
<P>&#36824;&#26377;&#21478;&#19968;&#20010;&#21103;&#20316;&#29992;&#65292;&#37027;&#23601;&#26159;&#22312;&#27719;&#32534;&#20195;&#30721;&#20013;&#35843;&#29992;C&#20989;&#25968;&#26102;&#65292;&#22914;&#26524;&#27719;&#32534;&#20195;&#30721;&#26159;&#25353;&#29031;&#20256;&#32479;&#30340;&#35843;&#29992;&#21327;&#23450;&#32422;&#23450;&#26469;&#20256;&#36882;&#21442;&#25968;&#65292;&#37027;&#20040;&#19968;&#26086;C&#20989;&#25968;&#34987;&#20351;&#29992;regparm&#35268;&#21017;&#32534;&#35793;&#65292;&#27719;&#32534;&#20989;&#25968;&#21644;C&#20989;&#25968;&#20043;&#38388;&#26412;&#26469;&#30340;&#32422;&#23450;&#23601;&#34987;&#25171;&#20081;&#20102;&#12290;&#20294;&#26159;&#65306;<BR>You can control this behavior for a specific function by using the function attribute &#8216;regparm&#8217;&#12290;<BR>&#20063;&#23601;&#26159;&#35828;&#65292;&#20195;&#30721;&#20013;&#30340;regparm&#23646;&#24615;&#26159;&#20248;&#20808;&#20110;&#32534;&#35793;&#36873;&#39033;&#30340;&#65292;&#25110;&#32773;&#35828;&#65292;&#22914;&#26524;&#20195;&#30721;&#20013;&#25351;&#23450;&#20102;regparm(0)&#65292;&#31105;&#27490;&#20351;&#29992;&#23492;&#23384;&#22120;&#20256;&#36882;&#21442;&#25968;&#21518;&#65292;&#21363;&#20351;&#32534;&#35793;&#36873;&#39033;&#37324;&#20351;&#29992;&#20102;regparm(3)&#65292;&#20063;&#20250;&#25353;&#20195;&#30721;&#30340;&#25551;&#36848;&#26469;&#20570;&#12290;<BR>&#29305;&#21035;&#30340;Linux&#20869;&#26680;&#20013;&#65292;linkage.h&#36824;&#23450;&#20041;&#20102;&#19968;&#20010;&#23439;&#65292;&#21483;asmlinkage&#12290;<BR>9#ifdef CONFIG_X86_32<BR>10#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))<BR>11#endif /* CONFIG_X86_32 */</P>
<P>&nbsp;