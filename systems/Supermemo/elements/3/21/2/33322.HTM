QEMU internals
<P></P>
<P>Needs separate model for timing analysis (if needed).<BR>cpu exec() called each time around main loop. <BR>Program executes until an unchained block is encountered. <BR>Returns to cpu exec() through epilogue.</P>
<P>Guest Code &#8211;&gt; gen_intermediate_code() -&gt; TCG Operations -&gt; tcg_gen_code() -&gt; Host Code</P>
<P>Basic block chaining <BR>&#61607;&nbsp;Returning from code cache is slow.<BR>&#61607;&nbsp;Solution: jump directly between basic blocks! <BR>&#61607;&nbsp;Make space for a jump, follow by a return to the epilogue. <BR>&#61607;&nbsp;Every time a block returns, try to chain it.</P>
<P>Unchain on interrupt <BR>&#61607;&nbsp;Now how do we interrupt the processor? <BR>&#61607;&nbsp;Have another thread unchain the blocks.</P>
<P>Code organization <BR>&#61607;&nbsp;TranslationBlock structure in translate-all.h <BR>&#61607;&nbsp;Translation cache is code gen buffer in exec.c <BR>&#61607;&nbsp;cpu-exec() in cpu-exec.c orchestrates translation and block chaining. <BR>&#61607;&nbsp;target-*/translate.c: guest ISA specific code. <BR>&#61607;&nbsp;tcg-*/*/: host ISA specific code. <BR>&#61607;&nbsp;linux-user/*: Linux usermode specific code. <BR>&#61607;&nbsp;vl.c: Main loop for system emulation. <BR>&#61607;&nbsp;hw/*: Hardware, including video, audio, and boards.