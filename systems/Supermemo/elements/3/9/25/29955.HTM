<B>Matching(Digit) constraints</B> 
<P>In some cases, a single variable may serve as both the input and the output operand. Such cases may be specified in "asm" by using matching constraints. </P>
<P><CODE>asm ("incl %0" :"=a"(var):"<FONT class=clozed>0</FONT>"(var));</CODE> </P>
<P></P>
<P>We saw similar examples in operands subsection also. In this example for matching constraints, the register %eax is used as both the input and the output variable. var input is read to %eax and updated %eax is stored in var again after increment. "0" here specifies the same constraint as the 0th output variable. That is, it specifies that the output instance of var should be stored in %eax only. This constraint can be used: </P>
<P></P>
<UL>
<LI>In cases where input is read from a variable or the variable is modified and modification is written back to the same variable. 
<LI>In cases where separate instances of input and output operands are not necessary.</LI></UL>
<P></P>
<P>The most important effect of using matching restraints is that they lead to the efficient use of available registers.