B2.2.6 Reverse endianness</P>
<P>The following pseudocode describes the operation to reverse endianness:<BR>// BigEndianReverse()<BR>// ==================</P>
<P>bits(8*N) BigEndianReverse (bits(8*N) value, integer N)<BR>&nbsp;&nbsp;&nbsp; assert N == 1 || N == 2 || N == 4;<BR>&nbsp;&nbsp;&nbsp; bits(8*N) result;<BR>&nbsp;&nbsp;&nbsp; case N of<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;7:0&gt; = value&lt;7:0&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when 2<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;15:8&gt; = value&lt;7:0&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;7:0&gt; = value&lt;15:8&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when 4<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;31:24&gt; = value&lt;7:0&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;23:16&gt; = value&lt;15:8&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;15:8&gt; = value&lt;23:16&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&lt;7:0&gt; = value&lt;31:24&gt;;<BR>&nbsp;&nbsp;&nbsp; return result;