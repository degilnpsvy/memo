/**<BR>&nbsp;* struct bus_type - The bus type of the device<BR>&nbsp;*<BR>&nbsp;* @name:&nbsp;The name of the bus.<BR>&nbsp;* @dev_name:&nbsp;Used for subsystems to enumerate devices like ("foo%u", dev-&gt;id).<BR>&nbsp;* @dev_root:&nbsp;<FONT class=clozed>Default device to use as the parent.</FONT><BR>&nbsp;* @dev_attrs:&nbsp;Default attributes of the devices on the bus.<BR>&nbsp;* @bus_groups:&nbsp;Default attributes of the bus.<BR>&nbsp;* @dev_groups:&nbsp;Default attributes of the devices on the bus.<BR>&nbsp;* @drv_groups: Default attributes of the device drivers on the bus.<BR>&nbsp;* @match:&nbsp;<SPAN class=cloze>[...]</SPAN><BR>&nbsp;* @uevent:&nbsp;Called when a device is added, removed, or a few other things<BR>&nbsp;*&nbsp;&nbsp;that generate uevents to add the environment variables.<BR>&nbsp;* @probe:&nbsp;Called when a new device or driver add to this bus, and callback<BR>&nbsp;*&nbsp;&nbsp;the specific driver's probe to initial the matched device.<BR>&nbsp;* @remove:&nbsp;Called when a device removed from this bus.<BR>&nbsp;* @shutdown:&nbsp;Called at shut-down time to quiesce the device.<BR>&nbsp;*<BR>&nbsp;* @online:&nbsp;Called to put the device back online (after offlining it).<BR>&nbsp;* @offline:&nbsp;Called to put the device offline for hot-removal. May fail.<BR>&nbsp;*<BR>&nbsp;* @suspend:&nbsp;Called when a device on this bus wants to go to sleep mode.<BR>&nbsp;* @resume:&nbsp;Called to bring a device on this bus out of sleep mode.<BR>&nbsp;* @pm:&nbsp;&nbsp;Power management operations of this bus, callback the specific<BR>&nbsp;*&nbsp;&nbsp;device driver's pm-ops.<BR>&nbsp;* @iommu_ops:&nbsp; IOMMU specific operations for this bus, used to attach IOMMU<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; driver implementations to a bus and allow the driver to do<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bus-specific setup<BR>&nbsp;* @p:&nbsp;&nbsp;The private data of the driver core, only the driver core can<BR>&nbsp;*&nbsp;&nbsp;touch this.<BR>&nbsp;* @lock_key:&nbsp;Lock class key for use by the lock validator<BR>&nbsp;*<BR>&nbsp;* A bus is a channel between the processor and one or more devices. For the<BR>&nbsp;* purposes of the device model, all devices are connected via a bus, even if<BR>&nbsp;* it is an internal, virtual, "platform" bus. Buses can plug into each other.<BR>&nbsp;* A USB controller is usually a PCI device, for example. The device model<BR>&nbsp;* represents the actual connections between buses and the devices they control.<BR>&nbsp;* A bus is represented by the bus_type structure. It contains the name, the<BR>&nbsp;* default attributes, the bus' methods, PM operations, and the driver core's<BR>&nbsp;* private data.<BR>&nbsp;*/<BR>struct bus_type {<BR>&nbsp;const char&nbsp;&nbsp;*name;<BR>&nbsp;const char&nbsp;&nbsp;*dev_name;<BR>&nbsp;struct device&nbsp;&nbsp;*dev_root;<BR>&nbsp;struct device_attribute&nbsp;*dev_attrs;&nbsp;/* use dev_groups instead */<BR>&nbsp;const struct attribute_group **bus_groups;<BR>&nbsp;const struct attribute_group **dev_groups;<BR>&nbsp;const struct attribute_group **drv_groups; 
<P></P>
<P>&nbsp;int (*match)(struct device *dev, struct device_driver *drv);<BR>&nbsp;int (*uevent)(struct device *dev, struct kobj_uevent_env *env);<BR>&nbsp;int (*probe)(struct device *dev);<BR>&nbsp;int (*remove)(struct device *dev);<BR>&nbsp;void (*shutdown)(struct device *dev);</P>
<P>&nbsp;int (*online)(struct device *dev);<BR>&nbsp;int (*offline)(struct device *dev);</P>
<P>&nbsp;int (*suspend)(struct device *dev, pm_message_t state);<BR>&nbsp;int (*resume)(struct device *dev);</P>
<P>&nbsp;const struct dev_pm_ops *pm;</P>
<P>&nbsp;const struct iommu_ops *iommu_ops;</P>
<P>&nbsp;struct subsys_private *p;<BR>&nbsp;struct lock_class_key lock_key;<BR>};