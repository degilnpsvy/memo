<H3 class=section>6.44 How to Use Inline Assembly Language in C Code</H3>
<P><A name=index-g_t_0040code_007basm_007d-keyword-3641></A><A name=index-assembly-language-in-C-3642></A><A name=index-inline-assembly-language-3643></A><A name=index-mixing-assembly-language-and-C-3644></A>The <CODE>asm</CODE> keyword allows you to embed assembler instructions within C code. GCC provides two forms of inline <CODE>asm</CODE> statements. A <DFN>basic </DFN><CODE>asm</CODE> statement is one with no operands (see <A href="https://gcc.gnu.org/onlinedocs/gcc/Basic-Asm.html#Basic-Asm">Basic Asm</A>), while an <DFN>extended </DFN><CODE>asm</CODE> statement (see <A href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Extended-Asm">Extended Asm</A>) includes one or more operands. The extended form is preferred for mixing C and assembly language within a function, but to include assembly language at top level you must use basic <CODE>asm</CODE>. </P>
<P>You can also use the <CODE>asm</CODE> keyword to override the assembler name for a C symbol, or to place a C variable in a specific register. </P>
<UL class=menu>
<LI><A accessKey=1 href="https://gcc.gnu.org/onlinedocs/gcc/Basic-Asm.html#Basic-Asm">Basic Asm</A>: Inline assembler without operands. </LI>
<LI><A accessKey=2 href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Extended-Asm">Extended Asm</A>: Inline assembler with operands. </LI>
<LI><A accessKey=3 href="https://gcc.gnu.org/onlinedocs/gcc/Constraints.html#Constraints">Constraints</A>: Constraints for <CODE>asm</CODE> operands </LI>
<LI><A accessKey=4 href="https://gcc.gnu.org/onlinedocs/gcc/Asm-Labels.html#Asm-Labels">Asm Labels</A>: Specifying the assembler name to use for a C symbol. </LI>
<LI><A accessKey=5 href="https://gcc.gnu.org/onlinedocs/gcc/Explicit-Register-Variables.html#Explicit-Register-Variables">Explicit Register Variables</A>: Defining variables residing in specified registers. </LI>
<LI><A accessKey=6 href="https://gcc.gnu.org/onlinedocs/gcc/Size-of-an-asm.html#Size-of-an-asm">Size of an asm</A>: How GCC calculates the size of an <CODE>asm</CODE> block. </LI></UL>