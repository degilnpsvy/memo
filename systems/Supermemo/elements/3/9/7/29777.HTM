/**<BR>&nbsp;* struct device_private - structure to hold the private to the driver core portions of the device structure.<BR>&nbsp;*<BR>&nbsp;* @<FONT class=clozed>klist_children</FONT> - klist containing all children of this device<BR>&nbsp;* @<FONT class=clozed>knode_parent</FONT> - node in sibling list<BR>&nbsp;* @<FONT class=clozed>knode_driver</FONT> - node in driver list<BR>&nbsp;* @<SPAN class=cloze>[...]</SPAN> - node in bus list<BR><FONT class=extract>&nbsp;* @deferred_probe - entry in deferred_probe_list which is used to retry the<BR>&nbsp;*&nbsp;binding of drivers which were unable to get all the resources needed by<BR>&nbsp;*&nbsp;the device; typically because it depends on another driver getting<BR>&nbsp;*&nbsp;probed first.</FONT><BR>&nbsp;* @device - pointer back to the struct class that this structure is<BR>&nbsp;* associated with.<BR>&nbsp;*<BR>&nbsp;* Nothing outside of the driver core should ever touch these fields.<BR>&nbsp;*/<BR>struct device_private {<BR><FONT class=clozed>&nbsp;struct klist klist_children;<BR>&nbsp;struct klist_node knode_parent;<BR>&nbsp;struct klist_node knode_driver;<BR>&nbsp;struct klist_node <SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>;<BR>&nbsp;struct list_head deferred_probe;<BR>&nbsp;struct device *device;</FONT><BR>};<BR>#define to_device_private_parent(obj)&nbsp;\<BR>&nbsp;container_of(obj, struct device_private, knode_parent)<BR>#define to_device_private_driver(obj)&nbsp;\<BR>&nbsp;container_of(obj, struct device_private, knode_driver)<BR>#define to_device_private_bus(obj)&nbsp;\<BR>&nbsp;container_of(obj, struct device_private, <SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>) 
<P></P>
<P>extern int device_private_init(struct device *dev);