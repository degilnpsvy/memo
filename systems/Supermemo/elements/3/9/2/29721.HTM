/*<BR>&nbsp;* Copyright (c) 2008 Intel Corporation<BR>&nbsp;* Author: Matthew Wilcox &lt;<A href="mailto:willy@linux.intel.com">willy@linux.intel.com</A>&gt;<BR>&nbsp;*<BR>&nbsp;* Distributed under the terms of the GNU GPL, version 2<BR>&nbsp;*<BR>&nbsp;* Please see kernel/semaphore.c for documentation of these functions<BR>&nbsp;*/<BR>#ifndef __LINUX_SEMAPHORE_H<BR>#define __LINUX_SEMAPHORE_H 
<P></P>
<P>#include &lt;linux/list.h&gt;<BR>#include &lt;linux/spinlock.h&gt;</P>
<P><FONT class=extract>/* Please don't access any members of this structure directly */<BR>struct semaphore {<BR>&nbsp;raw_spinlock_t&nbsp;&nbsp;lock;<BR>&nbsp;unsigned int&nbsp;&nbsp;count;<BR>&nbsp;struct list_head&nbsp;wait_list;<BR>};</FONT></P>
<P><FONT class=extract>#define __SEMAPHORE_INITIALIZER(name, n)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.lock&nbsp;&nbsp;= __RAW_SPIN_LOCK_UNLOCKED((name).lock),&nbsp;\<BR>&nbsp;.count&nbsp;&nbsp;= n,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.wait_list&nbsp;= LIST_HEAD_INIT((name).wait_list),&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define DEFINE_SEMAPHORE(name)&nbsp;\<BR>&nbsp;struct semaphore name = __SEMAPHORE_INITIALIZER(name, 1)</FONT></P>
<P><FONT class=extract>static inline void sema_init(struct semaphore *sem, int val)<BR>{<BR>&nbsp;static struct lock_class_key __key;<BR>&nbsp;*sem = (struct semaphore) __SEMAPHORE_INITIALIZER(*sem, val);<BR>&nbsp;lockdep_init_map(&amp;sem-&gt;lock.dep_map, "semaphore-&gt;lock", &amp;__key, 0);<BR>}</FONT></P>
<P><FONT class=extract>extern void down(struct semaphore *sem);<BR>extern int __must_check down_interruptible(struct semaphore *sem);<BR>extern int __must_check down_killable(struct semaphore *sem);<BR>extern int __must_check down_trylock(struct semaphore *sem);<BR>extern int __must_check down_timeout(struct semaphore *sem, long jiffies);<BR>extern void up(struct semaphore *sem);</FONT></P>
<P>#endif /* __LINUX_SEMAPHORE_H */