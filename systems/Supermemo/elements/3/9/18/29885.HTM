static int __driver_attach(struct device *dev, void *data)<BR>{<BR>&nbsp;struct device_driver *drv = <FONT class=clozed>data</FONT>;<BR>&nbsp;int ret; 
<P></P>
<P>&nbsp;/*<BR>&nbsp; * Lock device and try to bind to it. We drop the error<BR>&nbsp; * here and always return 0, because <SPAN class=cloze>[...]</SPAN><BR>&nbsp; *<BR>&nbsp; * driver_probe_device() will spit a warning if there<BR>&nbsp; * is an error.<BR>&nbsp; */</P>
<P>&nbsp;ret = driver_match_device(drv, dev);<BR>&nbsp;if (ret == 0) {<BR>&nbsp;&nbsp;/* no match */<BR>&nbsp;&nbsp;return 0;<BR>&nbsp;} else if (ret == -EPROBE_DEFER) {<BR>&nbsp;&nbsp;dev_dbg(dev, "Device match requests probe deferral\n");<BR>&nbsp;&nbsp;driver_deferred_probe_add(dev);<BR>&nbsp;} else if (ret &lt; 0) {<BR>&nbsp;&nbsp;dev_dbg(dev, "Bus failed to match device: %d", ret);<BR>&nbsp;&nbsp;return ret;<BR>&nbsp;} /* ret &gt; 0 means positive match */</P>
<P>&nbsp;if (dev-&gt;parent)&nbsp;/* Needed for USB */<BR>&nbsp;&nbsp;device_lock(dev-&gt;parent);<BR>&nbsp;device_lock(dev);<BR>&nbsp;if (!dev-&gt;driver)<BR>&nbsp;&nbsp;driver_probe_device(drv, dev);<BR>&nbsp;device_unlock(dev);<BR>&nbsp;if (dev-&gt;parent)<BR>&nbsp;&nbsp;device_unlock(dev-&gt;parent);</P>
<P>&nbsp;return 0;<BR>}