<H1>Processes and File Handles</H1>
<DIV class=sect1><A id=_process_example_firefox class=anchor></A>
<H2>Process Example: Firefox</H2>
<DIV class=sectionbody>
<DIV class=openblock>
<DIV class=content>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox has multiple threads. What are they doing?</STRONG></DIV>
<UL>
<LI>
<P>Waiting for and processing interface events: mouse clicks, keyboard input, etc.</P></LI>
<LI>
<P>Redrawing the screen as necessary in response to user input, web page loading, etc.</P></LI>
<LI>
<P>Loading web pages&#8212;&#8203;usually multiple parts <EM>in parallel</EM> to speed things up.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox is using memory. For what?</STRONG></DIV>
<UL>
<LI>
<P>Firefox.exe: the executable code of Firefox itself.</P></LI>
<LI>
<P>Shared libraries for web page parsing, security, etc.</P></LI>
<LI>
<P>Stacks storing local variables for running threads.</P></LI>
<LI>
<P>A heap storing dynamically-allocated memory.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox has files open. Why?</STRONG></DIV>
<UL>
<LI>
<P>Configuration files.</P></LI>
<LI>
<P>Fonts.</P></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__top_more_process_information class=anchor></A>
<H2>$ top # more process information</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=top src="https://www.ops-class.org/img/slides/figures/top.svg" data-pagespeed-url-hash="400442260"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_process_example_bash class=anchor></A>
<H2>Process Example: bash</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Let&#8217;s do this for real using standard Linux system utilities.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_finding_bash class=anchor></A>
<H2>Finding bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="finding bash" src="https://www.ops-class.org/img/slides/figures/finding-bash.svg" data-pagespeed-url-hash="2361526433"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P><CODE>ps aux</CODE> gives me all process, then <CODE>grep</CODE> for the one I&#8217;m after.</P></LI>
<LI>
<P>&#8230;&#8203;or, do it all in one shot using <CODE>pgrep</CODE>.</P></LI>
<LI>
<P>&#8230;&#8203;or, if I know it&#8217;s running in my current session a bare <CODE>ps</CODE> will do.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash 3" src="https://www.ops-class.org/img/slides/figures/process-bash-3.svg" data-pagespeed-url-hash="1050313241"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_ps_lf_thread_information_span class=anchor></A>
<H2><SPAN>$ ps -Lf # thread information</SPAN></H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="threads bash" src="https://www.ops-class.org/img/slides/figures/threads-bash.svg" data-pagespeed-url-hash="2275098225"></DIV></DIV>
<DIV class=ulist>
<DIV class=title>What are:</DIV>
<UL>
<LI>
<P><CODE>UID</CODE>: user the process is running as.</P></LI>
<LI>
<P><CODE>PID</CODE>: process ID.</P></LI>
<LI>
<P><CODE>PPID</CODE>: parent process ID.</P></LI>
<LI>
<P><CODE>PRI</CODE>: scheduling priority.</P></LI>
<LI>
<P><CODE>SZ</CODE>: size of the core image of the process (kB).</P></LI>
<LI>
<P><CODE>WCHAN</CODE>: if the process is not running, description of what it is waiting on.</P></LI>
<LI>
<P><CODE>RSS</CODE>: total amount of resident memory is use by the process (kB).</P></LI>
<LI>
<P><CODE>TIME</CODE>: measure of the amount of time that the process has spent running.</P></LI></UL></DIV>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="threads bash" src="https://www.ops-class.org/img/slides/figures/threads-bash.svg" data-pagespeed-url-hash="2275098225"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>If <CODE>bash</CODE> had multiple threads running this view would show them, so <CODE>bash</CODE> does not have multiple threads.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash_2 class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash 2" src="https://www.ops-class.org/img/slides/figures/process-bash-2.svg" data-pagespeed-url-hash="755813320"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__ps_process_information class=anchor></A>
<H2>$ ps # process information</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>I wish we could see a process with multiple threads&#8230;&#8203;</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_ps_lf_thread_information_span_3 class=anchor></A>
<H2><SPAN>$ ps -Lf # thread information</SPAN></H2>
<DIV class=sectionbody>
<DIV class="imageblock expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 90%" alt="ps threads" src="https://www.ops-class.org/img/slides/figures/ps-threads.svg" data-pagespeed-url-hash="2737050932"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__pmap_memory_mappings class=anchor></A>
<H2>$ pmap # memory mappings</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=pmap src="https://www.ops-class.org/img/slides/figures/pmap.svg" data-pagespeed-url-hash="2957592117"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash_3 class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash 1" src="https://www.ops-class.org/img/slides/figures/process-bash-1.svg" data-pagespeed-url-hash="461313399"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__lsof_open_files class=anchor></A>
<H2>$ lsof # open files</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=lsof src="https://www.ops-class.org/img/slides/figures/lsof.svg" data-pagespeed-url-hash="546631231"></DIV></DIV>
<DIV class=ulist>
<DIV class=title>True confessions: I cheated here.</DIV>
<UL>
<LI>
<P><CODE>/home/challen/.bashrc</CODE> was not actually open when I ran this command.</P></LI>
<LI>
<P><CODE>bash</CODE> didn&#8217;t have any interesting files open and I was embarrassed.</P></LI></UL></DIV>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=lsof src="https://www.ops-class.org/img/slides/figures/lsof.svg" data-pagespeed-url-hash="546631231"></DIV></DIV>
<DIV class=ulist>
<DIV class=title>True confessions: I cheated here.</DIV>
<UL>
<LI>
<P><CODE>/home/challen/.bashrc</CODE> was not actually open when I ran this command.</P></LI>
<LI>
<P><CODE>bash</CODE> didn&#8217;t have any interesting files open and I was embarrassed.</P></LI></UL></DIV>
<DIV class=openblock>
<DIV class=content>
<DIV class=paragraph>
<P>Let&#8217;s imagine we caught bash during startup when it is reading its configuration parameters.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash_4 class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash" src="https://www.ops-class.org/img/slides/figures/process-bash.svg" data-pagespeed-url-hash="686166903"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_aside_the_proc_file_system class=anchor></A>
<H2>Aside: the /proc/ file system</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>How do <CODE>top</CODE>, <CODE>ps</CODE>, <CODE>pmap</CODE>, <CODE>lsof</CODE>, and other process examination utilities gather information?</P></LI>
<LI>
<P>Linux reuses the <STRONG>file</STRONG> abstraction for this purpose.</P></LI></UL></DIV>
<DIV class="imageblock slide">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=procfilesystem src="https://www.ops-class.org/img/slides/figures/procfilesystem.svg" data-pagespeed-url-hash="3584625654"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_os_abstraction_cheat_sheet class=anchor></A>
<H2>OS Abstraction Cheat Sheet</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>Threads</STRONG> save processor state.</P></LI>
<LI>
<P><STRONG>Address spaces</STRONG> map the addresses used by processes (virtual addresses) to real memory addresses (physical addresses).</P></LI>
<LI>
<P><STRONG>Files</STRONG> map offsets into a file to blocks on disk.</P></LI>
<LI>
<P><STRONG>File-like objects</STRONG> look like files to a process but are not actually stored on disk and may not completely obey file semantics.</P>
<DIV class=ulist>
<UL>
<LI>
<P>You can&#8217;t seek on a network socket or open certain network-mounted files.</P></LI></UL></DIV></LI>
<LI>
<P><STRONG>Processes</STRONG> organize these other operating system abstractions.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_updated_process_model class=anchor></A>
<H2>Updated Process Model</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>For today&#8217;s material being precise about how processes use files becomes important.</P></LI></UL></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class=ulist>
<UL>
<LI>
<P>So let&#8217;s update our model. Here&#8217;s what we had last time:</P></LI></UL></DIV>
<DIV class="imageblock vbottom expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 50%" alt=process src="https://www.ops-class.org/img/slides/figures/process.svg" data-pagespeed-url-hash="565121858"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class=ulist>
<UL>
<LI>
<P>So let&#8217;s update our model. Here&#8217;s what we had last time:</P></LI>
<LI>
<P>And here&#8217;s today&#8217;s change:</P></LI></UL></DIV>
<DIV class="imageblock expand vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 50%" alt="process updated" src="https://www.ops-class.org/img/slides/figures/process-updated.svg" data-pagespeed-url-hash="1084525908"></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_file_handles class=anchor></A>
<H2>File Handles</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>The <STRONG>file descriptor</STRONG> that processes receive from <CODE>open()</CODE> and pass to other file system system calls is just an int, an index into the process file table.</P></LI>
<LI>
<P>That int refers to a <STRONG>file handle</STRONG> object maintained by the kernel.</P></LI>
<LI>
<P>That file handle object contains a reference a separate <STRONG>file object</STRONG> also maintained by the kernel.</P></LI>
<LI>
<P>Which then is mapped by the file system to blocks on disk.</P></LI>
<LI>
<P>So <STRONG>three</STRONG> levels of indirection:</P>
<DIV class=ulist>
<UL>
<LI>
<P>file descriptor &#8594; file handle.</P></LI>
<LI>
<P>file handle &#8594; file object.</P></LI>
<LI>
<P>file object &#8594; blocks on disk.</P></LI></UL></DIV></LI>
<LI>
<P><STRONG>Why?</STRONG></P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_sharing_file_state class=anchor></A>
<H2>Sharing File State</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>The additional level of indirection allows certain pieces of state to be shared separately.</DIV>
<UL>
<LI>
<P><STRONG>File descriptors</STRONG> are private to each process.</P></LI>
<LI>
<P><STRONG>File handles</STRONG> are private to each process but shared after process creation.</P>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>File handles</STRONG> store the current file <STRONG>offset</STRONG>, or the position in the file that the next read will come from or write will go to. File handles can be <STRONG>deliberately</STRONG> shared between two processes.</P></LI></UL></DIV></LI>
<LI>
<P><STRONG>File objects</STRONG> hold other file state and can be shared <STRONG>transparently</STRONG> between many processes.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_operating_system_design_principles class=anchor></A>
<H2>Operating System Design Principles</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Separate <STRONG class=slide>policy</STRONG> from <STRONG class=slide>mechanism</STRONG>.</P></LI>
<LI>
<P>Facilitate control or sharing by adding a <STRONG class=slide>level of indirection</STRONG>.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_process_creation class=anchor></A>
<H2>Process Creation</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>Where do processes come from?</P></DIV></DIV></DIV>
<DIV class=sect1><A id=__code_fork_code_create_a_new_process class=anchor></A>
<H2><CODE>fork()</CODE> # create a new process</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title><CODE>fork()</CODE> is the UNIX system call that creates a new process.</DIV>
<UL>
<LI>
<P><CODE>fork()</CODE> creates a new process that is a <STRONG>copy</STRONG> of the calling process.</P></LI>
<LI>
<P>After <CODE>fork()</CODE> we refer to the caller as the <STRONG>parent</STRONG> and the newly-created process as the <STRONG>child</STRONG>. This relationship enables certain capabilities.</P></LI></UL></DIV>
<DIV class="imageblock vbottom expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 60%" alt="process updated" src="https://www.ops-class.org/img/slides/figures/process-updated.svg" data-pagespeed-url-hash="1084525908"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__code_fork_code_semantics class=anchor></A>
<H2><CODE>fork()</CODE> Semantics</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Generally <CODE>fork()</CODE> tries to make an <STRONG>exact</STRONG> copy of the calling process.</P>
<DIV class=ulist>
<UL>
<LI>
<P>Recent version of UNIX have relaxed this requirement and there are now many flavors of <CODE>fork()</CODE> that copy different amounts of state and are suitable for different purposes.</P></LI>
<LI>
<P>For the purposes of this class, ignore them.</P></LI></UL></DIV></LI>
<LI>
<P>Threads are a notable exception!</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__code_fork_code_against_threads class=anchor></A>
<H2><CODE>fork()</CODE> Against Threads</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Single-threaded <CODE>fork()</CODE> has reliable semantics because the <STRONG>only thread</STRONG> the processes had is the one that called <CODE>fork()</CODE>.</P>
<DIV class=ulist>
<UL>
<LI>
<P>So nothing else is happening while we complete the system call.</P></LI></UL></DIV></LI>
<LI>
<P>Multi-threaded <CODE>fork()</CODE> creates a host of problems that many systems choose to ignore.</P>
<DIV class=ulist>
<UL>
<LI>
<P>Linux will only copy state for the thread that called <CODE>fork()</CODE>.</P></LI></UL></DIV></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_multi_threaded_code_fork_code class=anchor></A>
<H2>Multi-Threaded <CODE>fork()</CODE></H2>
<DIV class=sectionbody>
<DIV class="olist arabic">
<DIV class=title>There are two major problems with multi-threaded <CODE>fork()</CODE></DIV>
<OL class=arabic>
<LI>
<P>Another thread could be blocked in the middle of doing something (uniprocessor systems), or</P></LI>
<LI>
<P>another thread could be <STRONG>actually</STRONG> doing something (multiprocessor systems).</P></LI></OL></DIV>
<DIV class="openblock slide">
<DIV class=content>
<DIV class=paragraph>
<P>This ends up being a big mess. Let&#8217;s just copy the calling thread.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__code_fork_code class=anchor></A>
<H2><CODE>fork()</CODE></H2>
<DIV class=sectionbody>
<DIV class="olist arabic">
<OL class=arabic>
<LI>
<P><CODE>fork()</CODE> copies one thread&#8212;&#8203;the caller.</P></LI>
<LI>
<P><CODE>fork()</CODE> copies the address space.</P></LI>
<LI>
<P><CODE>fork()</CODE> copies the process file table.</P></LI></OL></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/fork-4.svg" data-pagespeed-url-hash="1525788154"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/fork-3.svg" data-pagespeed-url-hash="1231288233"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/fork-2.svg" data-pagespeed-url-hash="936788312"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/fork-1.svg" data-pagespeed-url-hash="642288391"></DIV></DIV></DIV></DIV>
<DIV class="openblock slide replace">
<DIV class=content>
<DIV class="imageblock vbottom">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=image src="https://www.ops-class.org/img/slides/figures/fork.svg" data-pagespeed-url-hash="3417927815"></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_after_code_fork_code class=anchor></A>
<H2>After <CODE>fork()</CODE></H2>
<DIV class=sectionbody>
<DIV class=listingblock>
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c">returnCode = fork();
<SPAN class=hljs-keyword>if</SPAN> (returnCode == <SPAN class=hljs-number>0</SPAN>) {
  # I am the child.
} <SPAN class=hljs-keyword>else</SPAN> {
  # I am the parent.
}</CODE></PRE></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>The child thread returns executing at the exact same point that its parent called <CODE>fork()</CODE>.</P>
<DIV class=ulist>
<UL>
<LI>
<P>With one exception: <CODE>fork()</CODE> returns <STRONG>twice</STRONG>, the PID to the parent and 0 to the child.</P></LI></UL></DIV></LI>
<LI>
<P>All contents of memory in the parent and child are identical.</P></LI>
<LI>
<P>Both child and parent have the same files open at the same position.</P>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>But, since they are sharing file handles changes to the file offset made by the parent/child will be reflected in the child/parent!</STRONG></P></LI></UL></DIV></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_calm_like_a_code_fork_code_bomb class=anchor></A>
<H2>Calm Like A <CODE>fork()</CODE>bomb</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>What does this code do?</P></DIV>
<DIV class=listingblock>
<DIV class=content><PRE class=highlight><CODE class="language-c lang-c" data-lang="c"><SPAN class=hljs-keyword>while</SPAN> (<SPAN class=hljs-number>1</SPAN>) {
  fork();
}</CODE></PRE></DIV></DIV></DIV></DIV>