<P id=p3>First, there's how you make <TT class="docutils literal">lists</TT>:</P><PRE class="code python literal-block"><SPAN class=name>hairs</SPAN> <SPAN class=operator>=</SPAN> <SPAN class=punctuation>[</SPAN><SPAN class="literal string single">'brown'</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal string single">'blond'</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal string single">'red'</SPAN><SPAN class=punctuation>]</SPAN>
<SPAN class=name>eyes</SPAN> <SPAN class=operator>=</SPAN> <SPAN class=punctuation>[</SPAN><SPAN class="literal string single">'brown'</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal string single">'blue'</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal string single">'green'</SPAN><SPAN class=punctuation>]</SPAN>
<SPAN class=name>weights</SPAN> <SPAN class=operator>=</SPAN> <SPAN class=punctuation>[</SPAN><SPAN class="literal number integer">1</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal number integer">2</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal number integer">3</SPAN><SPAN class=punctuation>,</SPAN> <SPAN class="literal number integer">4</SPAN><SPAN class=punctuation>]</SPAN>
</PRE>
<P id=p4>You start the <TT class="docutils literal">list</TT> with the <TT class="docutils literal">[</TT> (left bracket) which "opens" the <TT class="docutils literal">list</TT>. Then you put each item you want in the list separated by commas, similar to function arguments. Lastly, end the list with a <TT class="docutils literal">]</TT> (right bracket) to indicate that it's over. Python then takes this list and all its contents and assigns them to the variable.