B4.20 Exception entry, context stacking 
<P></P>
<P>RPWWG <FONT class=extract>In a PE without the Security Extension and without the Floating-point Extension (regardless of whether the Main Extension is implemented), on taking an exception, the PE hardware saves state context onto the stack that the SP register points to. The state context that is saved is eight 32-bit words:<BR>&#8226; RETPSR.<BR>&#8226; ReturnAddress.<BR>&#8226; R14. This is the Link Register (LR).<BR>&#8226; R12.<BR>&#8226; R3-R0.<BR></FONT>RPTRL <FONT class=extract>In a PE without the Security Extension but with the Floating-point and Main Extensions, on taking an exception, the PE hardware saves state context onto the stack that the SP register points to. If CONTROL.FPCA is 1 when the exception is taken, then in addition to the state context being saved, there are the following possible modes for the FP context:<BR>&#8226; Stack the FP context.<BR>&#8226; Reserve space on the stack for the FP context. This is called lazy FP context preservation.</FONT></P>
<P>RPLHM <FONT class=extract>In a PE with the Security Extension but without the Floating-point Extension (regardless of whether the Main Extension is implemented), on taking an exception, the PE hardware:<BR>1. Saves state context onto the stack that the SP register points to.<BR>2. If exception entry is to Non-secure state, regardless of whether a higher priority derived or late-arriving exception targeting Secure state occurs, the PE hardware extends the stack frame and also saves additional state context, as shown below:</FONT></P>
<P>RDHPD <FONT class=extract>In a PE with the Security Extension, Floating-point Extension, and Main Extension, on taking an exception from:<BR>Non-secure state<BR>Behavior is the same as a PE without the Security Extension but with the Floating-point Extension.<BR>Secure state when CONTROL.FPCA is 0<BR>Behavior is the same as for a PE with the Security Extension but without the Floating-point Extension.<BR>Secure state when CONTROL.FPCA is 1<BR>The PE hardware:<BR>1. Saves state context onto the stack that the SP register points to.<BR>2. If FPCCR_S.TS is 0 when the exception is taken, the PE hardware either stacks the FP context or reserves space on the stack for the FP context.<BR>If FPPCR_S.TS is 1 when the exception is taken, the PE hardware either stacks both the FP context and additional FP context, or reserves space on the stack for both the FP context and additional FP context.<BR>3. If exception entry is to Non-secure state, including when a higher priority derived or late-arriving exception targeting Secure state occurs, the PE hardware extends the stack frame and also saves the additional state context.</FONT></P>
<P><FONT class=extract>The following figure shows PE stacking behavior when CONTROL.FPCA is 1, FPPCR_S.TS is 1 (and both the FP context and additional FP context is stacked), and exception entry is to Non-secure state:</FONT></P>
<P>RBKVD <FONT class=extract>On an exception, the RETPSR value that is stacked is all of the following:<BR>&#8226; The APSR, IPSR, and EPSR.<BR>&#8226; CONTROL.SFPA, in RETPSR[20].<BR>In addition, on an exception, the PE uses RETPSR.SPREALIGN to indicate whether the PE realigned the stack to make it doubleword-aligned:<BR>1 The PE realigned the stack.<BR>0 The PE did not realign the stack.</FONT><BR>RQDKQ <FONT class=extract>Full descending stacks are used.</FONT><BR>RPWBW <FONT class=extract>In a PE with the Floating-point Extension:<BR>&#8226; Because setting FPCCR.ASPEN to 1 causes the PE to automatically set CONTROL.FPCA to 1 on the execution of a floating-point instruction, setting FPCCR.ASPEN to 1 means that the PE hardware automatically either:<BR>&#8213; Stacks FP context on taking an exception.<BR>&#8213; Uses lazy FP context preservation on taking an exception.<BR>If CONTROL.FPCA is 1, it is FPCCR.LSPEN that determines which of the above the PE hardware performs:<BR>0 The PE hardware automatically stacks FP context on taking an exception. In a PE that also includes the Security Extension, if FPCCR_S.TS is 1, the hardware stacks the additional FP context as well as the FP context.<BR>1 The PE hardware uses lazy FP context preservation on taking an exception, and sets all of :<BR>&#8226; The FPCAR, to point to the reserved S0 stack address.<BR>&#8226; FPCCR.LSPACT to 1.<BR>&#8226; FPCCR.{USER, THREAD, HFREADY, MMRDY, BFRDY, SFRDY, MONRDY, UFRDY}, to record the permissions and fault possibilities to be applied to any subsequent FP context save.<BR>In a PE that also includes the Security Extension, if FPCCR_S.TS is 1, the hardware reserves space on the stack for both the FP context and the additional FP context. Otherwise, the hardware only reserves space on the stack for the FP context.</FONT><BR>RGHDJ <FONT class=extract>Execution of a floating-point instruction while FPCCR.LSPACT == 1 indicates that lazy FP context preservation is active.</FONT><BR>RMBXL <FONT class=extract>If software attempts to execute a floating-point instruction while lazy FP context preservation is active, the access permissions that CPACR and NSACR define are checked against the context that activated lazy FP context preservation, as stored in the FPCCR.<BR>&#8226; If no permission violation is detected, the PE:<BR>1. Saves FP context to the reserved area on the stack, as identified by the FPCAR.<BR>2. Sets FPCCR.LSPACT to 0 to indicate that lazy FP context preservation is no longer active.<BR>3. Processes the floating-point instruction.<BR>&#8226; If a permission violation is detected, the PE generates a NOCP UsageFault and does not save FP context to the reserved area on the stack.<BR>This check is performed regardless of whether the Security Extension is implemented.</FONT><BR>RLGNS <FONT class=extract>In a PE with the Floating-point Extension, when the following conditions are met are on exception entry, the PE generates a Secure NOCP UsageFault and does not allocate space on the stack for FP context:<BR>&#8226; CONTROL.FPCA is 1.<BR>&#8226; NSACR.CP10 is 0.<BR>&#8226; The Background Security state is Non-secure state.</FONT><BR>RKMBN <FONT class=extract>In a PE with the Security Extension and Floating-point Extension, if lazy FP context preservation is activated when FPCCR.LSPACT is already set to 1, the PE generates an LSERR SecureFault.</FONT></P>
<P>See also:<BR>&#8226; Stack pointer on page B4-45.<BR>&#8226; Exception entry, register clearing after context stacking on page B4-69.<BR>&#8226; Integrity signature on page B4-76.<BR>&#8226; PushStack on page E3-1246.