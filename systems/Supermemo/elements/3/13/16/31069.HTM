B4.19 Exception handling</P>
<P>RYFHR An exception that does not cause lockup sets both:<BR>&#8226; The pending bit of its handler, or the pending bit of the HardFault handler, to 1.<BR>&#8226; The associated fault status information.<BR>RULDB When a pending exception has a lower group priority field value than current execution, including taking into account any priority adjustment by AIRCR.PRIS, the pending exception preempts current execution.<BR>RWBND Preemption of current execution causes the following basic sequence:<BR>1. R0-R3, R12, R14, RETPSR, and CONTROL.SFPA are stacked.<BR>2. The return address is determined and stacked.<BR>3. Optional stacking of FP context.<BR>4. Optional stacking of additional state context and additional FP context.<BR>5. LR is set to EXC_RETURN.<BR>6. Optional clearing of registers.<BR>7. The exception to be taken is chosen, and IPSR.Exception is set accordingly. The setting of IPSR.Exception to a nonzero value causes the PE to change to Handler mode.<BR>8. CONTROL.SPSEL is set to 0, to select the main stack.<BR>9. The pending bit of the exception to be taken is set to 0. The active bit of the exception to be taken is set to 1.<BR>10. EPSR.T is set to bit[0] of the exception vector for the exception to be taken.<BR>11. The PC is set to the exception vector for the exception to be taken.<BR>IPSGQ The HandleException, ExceptionEntry, PushStack, ExceptionTaken, and ActivateException pseudocode describes the full exception handling sequence.<BR>RNJVF During exception entry, if it is found that the exception and the exception vector are associated with different Security states an INVEP or INVTRAN SecureFault is generated, unless the exception is associated with Non-secure state and is targeting an SG instruction that is located in memory that is Secure and Non-secure callable.<BR>RQLHB The return address is one of:<BR>&#8226; On return from a synchronous exception, other than an SVCall exception, the address of the instruction that caused the exception.<BR>&#8226; On return from an asynchronous exception, the address of the next instruction in the program order.<BR>&#8226; On return from an SVCall exception, the address of the next instruction in the program order.<BR>RXKDD The least significant bit of the return address from an exception is (ReturnAddress[0]) is RES0.</P>
<P>See also:<BR>&#8226; Priority model on page B4-56.<BR>&#8226; Exception entry, context stacking on page B4-64.<BR>&#8226; Exception entry, register clearing after context stacking on page B4-69.<BR>&#8226; Vector tables on page B4-83.<BR>&#8226; Stack limit checks on page B4-70.<BR>&#8226; Exceptions during exception entry on page B4-77.