B4.28 Exceptions, instruction resume or instruction restart</P>
<P>RPGRC The PE can take an exception during execution of a Load Multiple or Store Multiple instruction, effectively halting the instruction, and resume execution of the instruction after returning from the exception. This is called instruction resume. Instruction resume is supported only when the Main Extension is implemented.<BR>RKRLL The PE can abandon execution of a Load Multiple or Store Multiple instruction to take an exception, and after returning from the exception, restart the Load Multiple or Store Multiple instruction again from the start of the instruction. This is called instruction restart. Instruction restart is supported regardless of whether the Main Extension is implemented.<BR>INDQT Instructions that the PE can halt to use instruction resume are called exception-continuable instructions.<BR>RRJVL The exception-continuable instructions are LDM, LDMDB, STM, STMDB, POP, and PUSH. In a PE with the Floating-point Extension, the floating-point exception-continuable instructions are VLDM, VSTM, VPOP, and VPUSH.<BR>RQVFC When the PE is using instruction resume, EPSR.ICI is set to a non-zero value that is the continuation state of the exception-continuable instruction:<BR>&nbsp; &#8226; For LDM, LDMDB, STM, STMDB, POP, and PUSH instructions, ICI contains the number of the first register in the register list that must be loaded or stored after instruction resume.<BR>&nbsp; &#8226; For the floating-point instructions VLDM, VSTM, VPOP, and VPUSH, ICI contains the number of the lowest numbered doubleword Floating-point Extension register that was not completely loaded or stored before the PE took the exception.<BR>The ICI values shown in the following table are valid EPSR.ICI values:<BR>EPSR[26:25]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EPSR[15:12]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EPSR[11:10]<BR>ICI[7:6] = 0b00&nbsp; ICI[5:2] = reg_num&nbsp; ICI[1:0] = 0b00<BR>ICI[7:6] = 0b00&nbsp; ICI[5:2] = 0b0000&nbsp;&nbsp; ICI[1:0] - 0b00<BR>RXFGN Behavior is UNPREDICTABLE if EPSR.ICI contains a valid EPSR.ICI non-zero value and the register number that it contains is either:<BR>&nbsp; &#8226; Not in the register list of the exception-continuable Load Multiple or Store Multiple instruction.<BR>&nbsp; &#8226; The first register in the register list of the exception-continuable Load Multiple or Store Multiple instruction.<BR>RCGFL The PE generates an INVSTATE UsageFault if EPSR.ICI contains a valid EPSR.ICI non-zero value and the instruction being executed is not a Load Multiple or Store Multiple instruction.<BR>RJXKQ If the PE uses instruction resume during a Load Multiple instruction, then after the exception return, the values of all registers in the register list are UNKNOWN, except for the following:<BR>&nbsp; &#8226; Registers that are marked by EPSR.ICI as already loaded.<BR>&nbsp; &#8226; The base register.<BR>&nbsp; &#8226; The PC.<BR>IJJQX If the PE is using instruction restart, ARM recommends that software does not use Load Multiple or Store Multiple instructions with data in volatile memory.<BR>RNKNQ When a Load Multiple instruction has the PC in its register list, if the PE uses instruction resume or instruction restart during the instruction:<BR>&nbsp; &#8226; If the PC is loaded before generation of the exception, the PE must restore the PC before taking the exception, so that after the exception the PE returns to either:<BR>&nbsp;&nbsp;&nbsp; &#8213; Continue execution of the Load Multiple instruction, if the PE used instruction resume.<BR>&nbsp;&nbsp;&nbsp; &#8213; Restart the Load Multiple instruction, if the PE used instruction restart.<BR>RLSCQ In a PE without the Main Extension, if the PE takes any exception during any Load Multiple or Store Multiple instruction, including PUSH and POP, the PE uses instruction restart and the base register is restored to the original value.<BR>RRFGF In a PE with the Main Extension, if the PE takes an exception during any Load Multiple or Store Multiple instruction, including PUSH and POP:<BR>&nbsp; &#8226; If the instruction is not in an IT block and the exception is an asynchronous exception, the PE uses instruction resume and EPSR.ICI holds the continuation state. The base register is restored to the original value except in the following cases:<BR>&nbsp;&nbsp;&nbsp; Interrupt of an instruction that is using SP as the base register<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The SP that is presented to the exception entry sequence is lower than any element pushed by an STM, or not yet popped by an LDM. For Decrement Before (DB) variants of the instruction, the SP is set to the final value. This is the lowest value in the list.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Increment After (IA) variants of the instruction, the SP is restored to the initial value. This is the lowest value in the list.<BR>&nbsp;&nbsp;&nbsp; Interrupt of an instruction that is not using SP as the base register<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The base register is set to the final value, whether the instruction is a Decrement Before (DB) variant or an Increment After (IA) variant.<BR>&nbsp; &#8226; For all other cases:<BR>&nbsp;&nbsp;&nbsp; &#8213; The PE uses instruction restart and the base register is restored to the original value. If the instruction is not in an IT block, EPSR.ICI is cleared to zero.<BR>RSGWB When a Load Multiple instruction includes its base register in its register list, if the PE takes an exception during the instruction:<BR>&nbsp; &#8226; The base register is restored to the original value, and:<BR>&nbsp;&nbsp;&nbsp; &#8213; If the instruction is in an IT block, the PE uses instruction restart.<BR>&nbsp;&nbsp;&nbsp; &#8213; If the instruction is not in an IT block, and the PE takes the exception after it loads the base register, EPSR.ICI can be set to an IMPLEMENTATION DEFINED value that will load at least the base register and subsequent locations again after returning from the interrupt.<BR>&nbsp;&nbsp;&nbsp; <BR>See also:<BR>&#8226; Exception during a singleword load operation on page B4-92.