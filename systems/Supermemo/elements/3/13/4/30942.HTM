<H1 class=title>Exercise 50: Your First Website</H1>
<P id=p1>These final three exercises will be very hard and you should take your time with them. In this first one you'll build a simple web version of one of your games. Before you attempt this exercise you <EM>must</EM> have completed Exercise 46 successfully and have a working <TT class="docutils literal">pip</TT> installed such that you can install packages and know how to make a skeleton project directory. If you don't remember how to do this, go back to Exercise 46 and do it all over again.</P>
<DIV id=installing-lpthw-web class=section>
<H1>Installing lpthw.web</H1>
<P id=p2>Before creating your first web application, you'll first need to install the "web framework" called <TT class="docutils literal">lpthw.web</TT>. The term "framework" generally means "some package that makes it easier for me to do something." In the world of web applications, people create "web frameworks" to compensate for the difficult problems they've encountered when making their own sites. They share these common solutions in the form of a package you can download to bootstrap your own projects.</P>
<P id=p3>In our case, we'll be using the <TT class="docutils literal">lpthw.web</TT> framework, but there are many, many, <EM>many</EM> others you can choose from. For now, learn <TT class="docutils literal">lpthw.web</TT>, then branch out to another one when you're ready (or just keep using <TT class="docutils literal">lpthw.web</TT> since it's good enough).</P>
<P id=p4>Using <TT class="docutils literal">pip</TT>, install <TT class="docutils literal">lpthw.web</TT>:</P><PRE class="code console literal-block"><SPAN class="generic prompt">$</SPAN> sudo pip install lpthw.web
<SPAN class="generic output">[sudo] password for zedshaw:
Downloading/unpacking lpthw.web
  Running setup.py egg_info for package lpthw.web

Installing collected packages: lpthw.web
  Running setup.py install for lpthw.web

Successfully installed lpthw.web
Cleaning up...</SPAN>
</PRE>
<P id=p5>This will work on Linux and Mac OSX computers, but on Windows just drop the <TT class="docutils literal">sudo</TT> part of the <TT class="docutils literal">pip install</TT> command and it should work. If not, go back to Exercise 46 and make sure you can do it reliably.</P>
<DIV class=warning>
<P id=p6 class="first admonition-title">Warning</P>
<P id=p7 class=last>Other Python programmers will warn you that <TT class="docutils literal">lpthw.web</TT> is just a fork of another web framework called <TT class="docutils literal">web.py</TT> and that <TT class="docutils literal">web.py</TT> has too much "magic." If they say this, point out to them that Google App Engine originally used <TT class="docutils literal">web.py</TT> and not a single Python programmer complained that it had too much magic, because they all worked at Google. If it's good enough for Google, then it's good enough for you to get started. Then, just get back to learning to code and ignore their goal of indoctrination over education.</P></DIV></DIV>
<DIV id=make-a-simple-hello-world-project class=section>
<H1>Make a Simple "Hello World" Project</H1>
<P id=p8>Now you're going to make an initial very simple "Hello World" web application and project directory using <TT class="docutils literal">lpthw.web</TT>. First, make your project directory:</P><PRE class="code console literal-block"><SPAN class="generic prompt">$</SPAN> <SPAN class="name builtin">cd</SPAN> projects
<SPAN class="generic prompt">$</SPAN> mkdir gothonweb
<SPAN class="generic prompt">$</SPAN> <SPAN class="name builtin">cd</SPAN> gothonweb
<SPAN class="generic prompt">$</SPAN> mkdir bin gothonweb tests docs templates
<SPAN class="generic prompt">$</SPAN> touch gothonweb/__init__.py
<SPAN class="generic prompt">$</SPAN> touch tests/__init__.py
</PRE>
<P id=p9>You'll be taking the game from Exercise 43 and making it into a web application, so that's why you're calling it <TT class="docutils literal">gothonweb</TT>. Before you do that, we need to create the most basic <TT class="docutils literal">lpthw.web</TT> application possible. Put the following code into <TT class="docutils literal">bin/app.py</TT>:</P>
<TABLE class=highlighttable>
<TBODY>
<TR></TR></TBODY></TABLE></DIV>
<DIV id=make-a-simple-hello-world-project class=section>
<TABLE class=highlighttable>
<TBODY>
<TR>
<TD class=code>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex50.py-idio.html-1></A><SPAN class=kn>import</SPAN> <SPAN class=nn>web</SPAN>
<A name=python--ex50.py-idio.html-2></A>
<A name=python--ex50.py-idio.html-3></A><SPAN class=n>urls</SPAN> <SPAN class=o>=</SPAN> <SPAN class=p>(</SPAN>
<A name=python--ex50.py-idio.html-4></A>  <SPAN class=s1>'/'</SPAN><SPAN class=p>,</SPAN> <SPAN class=s1>'index'</SPAN>
<A name=python--ex50.py-idio.html-5></A><SPAN class=p>)</SPAN>
<A name=python--ex50.py-idio.html-6></A>
<A name=python--ex50.py-idio.html-7></A><SPAN class=n>app</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>web</SPAN><SPAN class=o>.</SPAN><SPAN class=n>application</SPAN><SPAN class=p>(</SPAN><SPAN class=n>urls</SPAN><SPAN class=p>,</SPAN> <SPAN class=nb>globals</SPAN><SPAN class=p>())</SPAN>
<A name=python--ex50.py-idio.html-8></A>
<A name=python--ex50.py-idio.html-9></A><SPAN class=k>class</SPAN> <SPAN class=nc>index</SPAN><SPAN class=p>:</SPAN>
<A name=python--ex50.py-idio.html-10></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>GET</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex50.py-idio.html-11></A>        <SPAN class=n>greeting</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"Hello World"</SPAN>
<A name=python--ex50.py-idio.html-12></A>        <SPAN class=k>return</SPAN> <SPAN class=n>greeting</SPAN>
<A name=python--ex50.py-idio.html-13></A>
<A name=python--ex50.py-idio.html-14></A><SPAN class=k>if</SPAN> <SPAN class=n>__name__</SPAN> <SPAN class=o>==</SPAN> <SPAN class=s2>"__main__"</SPAN><SPAN class=p>:</SPAN>
<A name=python--ex50.py-idio.html-15></A>    <SPAN class=n>app</SPAN><SPAN class=o>.</SPAN><SPAN class=n>run</SPAN><SPAN class=p>()</SPAN>
</PRE></DIV></TD></TR></TBODY></TABLE>
<P id=p10>Then run the application like this:</P><PRE class="code console literal-block"><SPAN class="generic prompt">$</SPAN> python bin/app.py
<SPAN class="generic output">http://0.0.0.0:8080/</SPAN>
</PRE>
<P id=p11>However, if you did this:</P><PRE class="code console literal-block"><SPAN class="generic prompt">$</SPAN> <SPAN class="name builtin">cd</SPAN> bin/   <SPAN class="comment single"># WRONG! WRONG! WRONG!
</SPAN><SPAN class="generic prompt">$</SPAN><SPAN class="comment single"></SPAN> python app.py  <SPAN class="comment single"># WRONG! WRONG! WRONG!</SPAN>
</PRE>
<P id=p12>Then you are doing it <EM>wrong</EM>. In all Python projects you do not <TT class="docutils literal">cd</TT> into a lower directory to run things. You stay at the top and run everything from there so that all of the system can access all the modules and files. Go reread Exercise 46 to understand a project layout and how to use it if you did this.</P>
<P id=p13>Finally, use your web browser and go to <TT class="docutils literal"><SPAN class=pre>http://localhost:8080/</SPAN></TT> and you should see two things. First, in your browser you'll see <TT class="docutils literal">Hello, world!</TT>. Second, you'll see your Terminal with new output like this:</P><PRE class="code console literal-block"><SPAN class="generic prompt">$</SPAN> python bin/app.py
<SPAN class="generic output">http://0.0.0.0:8080/
127.0.0.1:59542 - - [13/Jun/2011 11:44:43] "HTTP/1.1 GET /" - 200 OK
127.0.0.1:59542 - - [13/Jun/2011 11:44:43] "HTTP/1.1 GET /favicon.ico" - 404 Not Found</SPAN>
</PRE>
<P id=p14>Those are log messages that <TT class="docutils literal">lpthw.web</TT> prints out so you can see that the server is working, and what the browser is doing behind the scenes. The log messages help you debug and figure out when you have problems. For example, it's saying that your browser tried to get <TT class="docutils literal">/favicon.ico</TT> but that file didn't exist so it returned <TT class="docutils literal">404 Not Found</TT> status code.</P>
<P id=p15>I haven't explained the way <EM>any</EM> of this web stuff works yet, because I want to get you setup and ready to roll so that I can explain it better in the next two exercises. To accomplish this, I'll have you break your lpthw.web application in various ways and then restructure it so that you know how it's setup.</P></DIV>
<DIV id=what-s-going-on class=section>
<H1>What's Going On?</H1>
<P id=p16>Here's what's happening when your browser hits your application:</P>
<OL class="arabic simple">
<LI>Your browser makes a network connection to your own computer, which is called <TT class="docutils literal">localhost</TT> and is a standard way of saying "whatever my own computer is called on the network." It also uses port 8080.</LI>
<LI>Once it connects, it makes an HTTP request to the <TT class="docutils literal">bin/app.py</TT> application and asks for the <TT class="docutils literal">/</TT> URL, which is commonly the first URL on any website.</LI>
<LI>Inside <TT class="docutils literal">bin/app.py</TT> you've got a list of URLs and what classes they match. The only one we have is the <TT class="docutils literal"><SPAN class=pre>'/',</SPAN> 'index'</TT> mapping. This means that whenever someone goes to <TT class="docutils literal">/</TT> with a browser, <TT class="docutils literal">lpthw.web</TT> will find the <TT class="docutils literal">class index</TT> and load it to handle the request.</LI>
<LI>Now that <TT class="docutils literal">lpthw.web</TT> has found <TT class="docutils literal">class index</TT> it calls the <TT class="docutils literal">index.GET</TT> method on an instance of that class to actually handle the request. This function runs and simply returns a string for what <TT class="docutils literal">lpthw.web</TT> should send to the browser.</LI>
<LI>Finally, <TT class="docutils literal">lpthw.web</TT> has handled the request and sends this response to the browser, which is what you are seeing.</LI></OL>
<P id=p17>Make sure you really understand this. Draw up a diagram of how this information flows from your browser, to <TT class="docutils literal">lpthw.web</TT>, then to <TT class="docutils literal">index.GET</TT> and back to your browser.</P></DIV>
<DIV id=fixing-errors class=section>
<H1>Fixing Errors</H1>
<P id=p18>First, delete line 11 where you assign the <TT class="docutils literal">greeting</TT> variable, then hit refresh in your browser. You should see an error page now that gives you lots of information on how your application just exploded. You know that the variable <TT class="docutils literal">greeting</TT> is now missing, but <TT class="docutils literal">lpthw.web</TT> gives you this nice error page to track down exactly where. Do each of the following with this page:</P>
<OL class="arabic simple">
<LI>Look at each of the <TT class="docutils literal">Local vars</TT> outputs (click on them) and see if you can follow what variables it's talking about and where they are.</LI>
<LI>Look at the <TT class="docutils literal">Request Information</TT> section and see if it matches anything you're already familiar with. This is information that your web browser is sending to your <TT class="docutils literal">gothonweb</TT> application. You normally don't even know that it's sending this stuff, so now you get to see what it does.</LI>
<LI>Try breaking this simple application in other ways and explore what happens. Don't forget to also look at the logs being printed into your Terminal as <TT class="docutils literal">lpthw.web</TT> will put other stack traces and information there too.</LI></OL></DIV>
<DIV id=create-basic-templates class=section>
<H1>Create Basic Templates</H1>
<P id=p19>You can break your <TT class="docutils literal">lpthw.web</TT> application, but did you notice that "Hello World" isn't a very good HTML page? This is a web application, and as such it needs a proper HTML response. To do that you will create a simple template that says "Hello World" in a big green font.</P>
<P id=p20>The first step is to create a <TT class="docutils literal">templates/index.html</TT> file that looks like this:</P>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex50--gothonweb--templates--index.html-pyg.html-1></A>$def with (greeting)
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-2></A>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-3></A><SPAN class=p>&lt;</SPAN><SPAN class=nt>html</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-4></A>    <SPAN class=p>&lt;</SPAN><SPAN class=nt>head</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-5></A>        <SPAN class=p>&lt;</SPAN><SPAN class=nt>title</SPAN><SPAN class=p>&gt;</SPAN>Gothons Of Planet Percal #25<SPAN class=p>&lt;/</SPAN><SPAN class=nt>title</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-6></A>    <SPAN class=p>&lt;/</SPAN><SPAN class=nt>head</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-7></A><SPAN class=p>&lt;</SPAN><SPAN class=nt>body</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-8></A>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-9></A>$if greeting:
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-10></A>    I just wanted to say <SPAN class=p>&lt;</SPAN><SPAN class=nt>em</SPAN> <SPAN class=na>style</SPAN><SPAN class=o>=</SPAN><SPAN class=s>"color: green; font-size: 2em;"</SPAN><SPAN class=p>&gt;</SPAN>$greeting<SPAN class=p>&lt;/</SPAN><SPAN class=nt>em</SPAN><SPAN class=p>&gt;</SPAN>.
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-11></A>$else:
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-12></A>    <SPAN class=p>&lt;</SPAN><SPAN class=nt>em</SPAN><SPAN class=p>&gt;</SPAN>Hello<SPAN class=p>&lt;/</SPAN><SPAN class=nt>em</SPAN><SPAN class=p>&gt;</SPAN>, world!
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-13></A>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-14></A><SPAN class=p>&lt;/</SPAN><SPAN class=nt>body</SPAN><SPAN class=p>&gt;</SPAN>
<A name=python--ex50--gothonweb--templates--index.html-pyg.html-15></A><SPAN class=p>&lt;/</SPAN><SPAN class=nt>html</SPAN><SPAN class=p>&gt;</SPAN>
</PRE></DIV>
<P id=p21>If you know what HTML is, then this should look fairly familiar. If not, research HTML and try writing a few web pages by hand so you know how it works. This HTML file, however, is a <EM>template</EM>, which means that <TT class="docutils literal">lpthw.web</TT> will fill in "holes" in the text depending on variables you pass in to the template. Every place you see <TT class="docutils literal">$greeting</TT> will be a variable you'll pass to the template that alters its contents.</P>
<P id=p22>To make your <TT class="docutils literal">bin/app.py</TT> do this, you need to add some code to tell <TT class="docutils literal">lpthw.web</TT> where to load the template and to render it. Take that file and change it like this:</P>
<TABLE class=highlighttable>
<TBODY>
<TR></TR></TBODY></TABLE></DIV>
<DIV id=create-basic-templates class=section>
<TABLE class=highlighttable>
<TBODY>
<TR>
<TD class=code>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex50--gothonweb--bin--app.py-idio.html-1></A><SPAN class=kn>import</SPAN> <SPAN class=nn>web</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-2></A>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-3></A><SPAN class=n>urls</SPAN> <SPAN class=o>=</SPAN> <SPAN class=p>(</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-4></A>  <SPAN class=s1>'/'</SPAN><SPAN class=p>,</SPAN> <SPAN class=s1>'Index'</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-5></A><SPAN class=p>)</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-6></A>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-7></A><SPAN class=n>app</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>web</SPAN><SPAN class=o>.</SPAN><SPAN class=n>application</SPAN><SPAN class=p>(</SPAN><SPAN class=n>urls</SPAN><SPAN class=p>,</SPAN> <SPAN class=nb>globals</SPAN><SPAN class=p>())</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-8></A>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-9></A><SPAN class=n>render</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>web</SPAN><SPAN class=o>.</SPAN><SPAN class=n>template</SPAN><SPAN class=o>.</SPAN><SPAN class=n>render</SPAN><SPAN class=p>(</SPAN><SPAN class=s1>'templates/'</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-10></A>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-11></A><SPAN class=k>class</SPAN> <SPAN class=nc>Index</SPAN><SPAN class=p>(</SPAN><SPAN class=nb>object</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-12></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>GET</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-13></A>        <SPAN class=n>greeting</SPAN> <SPAN class=o>=</SPAN> <SPAN class=s2>"Hello World"</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-14></A>        <SPAN class=k>return</SPAN> <SPAN class=n>render</SPAN><SPAN class=o>.</SPAN><SPAN class=n>index</SPAN><SPAN class=p>(</SPAN><SPAN class=n>greeting</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>greeting</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-15></A>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-16></A><SPAN class=k>if</SPAN> <SPAN class=n>__name__</SPAN> <SPAN class=o>==</SPAN> <SPAN class=s2>"__main__"</SPAN><SPAN class=p>:</SPAN>
<A name=python--ex50--gothonweb--bin--app.py-idio.html-17></A>    <SPAN class=n>app</SPAN><SPAN class=o>.</SPAN><SPAN class=n>run</SPAN><SPAN class=p>()</SPAN>
</PRE></DIV></TD></TR></TBODY></TABLE>
<P id=p23>Pay close attention to the new <TT class="docutils literal">render</TT> variable and how I changed the last line of <TT class="docutils literal">index.GET</TT> so it returns <TT class="docutils literal">render.index()</TT> passing in your <TT class="docutils literal">greeting</TT> variable.</P>
<P id=p24>Once you have that in place, reload the web page in your browser and you should see a different message in green. You should also be able to do a <TT class="docutils literal">View Source</TT> on the page in your browser to see that it is valid HTML.</P>
<P id=p25>This may have flown by you very fast, so let me explain how a template works:</P>
<OL class="arabic simple">
<LI>In your <TT class="docutils literal">bin/app.py</TT> you've added a new variable, <TT class="docutils literal">render</TT>, which is a <TT class="docutils literal">web.template.render</TT> object.</LI>
<LI>This <TT class="docutils literal">render</TT> object knows how to load <TT class="docutils literal">.html</TT> files out of the <TT class="docutils literal">templates/</TT> directory because you passed that to it as a parameter.</LI>
<LI>Later in your code, when the browser hits the <TT class="docutils literal">index.GET</TT> like before, instead of just returning the string <TT class="docutils literal">greeting</TT>, you call <TT class="docutils literal">render.index</TT> and pass the greeting to it as a variable.</LI>
<LI>This <TT class="docutils literal">render.index</TT> method is kind of a <EM>magic</EM> function where the <TT class="docutils literal">render</TT> object sees that you're asking for <TT class="docutils literal">index</TT>, goes into the <TT class="docutils literal">templates/</TT> directory, looks for a page named <TT class="docutils literal">index.html</TT>, and then "renders" it, or converts it.</LI>
<LI>In the <TT class="docutils literal">templates/index.html</TT> file you see the beginning definition that says this template takes a <TT class="docutils literal">greeting</TT> parameter, just like a function. Also, just like Python this template is indentation sensitive, so make sure you get them right.</LI>
<LI>Finally, you have the HTML in <TT class="docutils literal">templates/index.html</TT> that looks at the <TT class="docutils literal">greeting</TT> variable and, if it's there, prints one message using the <TT class="docutils literal">$greeting</TT>, or a default message.</LI></OL>
<P id=p26>To get deeper into this, change the greeting variable and the HTML to see what effect it has. Also create another template named <TT class="docutils literal">templates/foo.html</TT> and render that using <TT class="docutils literal">render.foo()</TT> instead of <TT class="docutils literal">render.index()</TT> like before. This will show you how the name of the function you call on <TT class="docutils literal">render</TT> is just matched to an <TT class="docutils literal">.html</TT> file in <TT class="docutils literal">templates/</TT>.</P></DIV>
<DIV id=study-drills class=section>
<H1>Study Drills</H1>
<OL class="arabic simple">
<LI>Read the documentation at <A class="reference external" href="http://webpy.org/"><FONT color=#000080>http://webpy.org/</FONT></A> which is the same as the <TT class="docutils literal">lpthw.web</TT> project.</LI>
<LI>Experiment with everything you can find there, including their example code.</LI>
<LI>Read about HTML5 and CSS3 and make some other .html and .css files for practice.</LI>
<LI>If you have a friend who knows Django and is willing to help you, then consider doing Exercises 50, 51, and 52 in Django instead to see what that's like.</LI></OL></DIV>
<DIV id=common-student-questions class=section>
<H1>Common Student Questions</H1>
<DL class=docutils>
<DT>I can't seem to connect to <TT class="docutils literal"><SPAN class=pre>http://localhost:8080/</SPAN></TT>.</DT>
<DD>Try going to <TT class="docutils literal"><SPAN class=pre>http://127.0.0.1:8080/</SPAN></TT> instead.</DD>
<DT>What is the difference betwee <TT class="docutils literal">lpthw.web</TT> and <TT class="docutils literal">web.py</TT>?</DT>
<DD>No difference. I simply "locked" <TT class="docutils literal">web.py</TT> at a particular version so that it would be consistent for students, then named it <TT class="docutils literal">lpthw.web</TT>. Later versions of <TT class="docutils literal">web.py</TT> might be different from this version.</DD>
<DT>I can't find <TT class="docutils literal">index.html</TT> (or just about anything).</DT>
<DD>You probably are doing <TT class="docutils literal">cd bin/</TT> first and then trying to work with the project. Do not do this. All of the commands and instructions assume you are one directory above <TT class="docutils literal">bin/</TT>, so if you can't type <TT class="docutils literal">python bin/app.py</TT> then you are in the wrong directory.</DD>
<DT>Why do we assign <TT class="docutils literal">greeting=greeting</TT> when we call the template?</DT>
<DD>You are not assigning to <TT class="docutils literal">greeting</TT>. You are setting a named parameter to give to the template. It's sort of an assignment, but it only affects the call to the template function.</DD>
<DT>I can't use port 8080 on my computer.</DT>
<DD>You probably have an anti-virus program installed that is using that port. Try a different port.</DD>
<DT>After installing <TT class="docutils literal">lpthw.web</TT> I get <TT class="docutils literal">ImportError "No module named web"</TT>.</DT>
<DD>You most likely have multiple versions of Python installed and are using the wrong one, or you didn't do the install correctly because of an old version of <TT class="docutils literal">pip</TT>. Try uninstalling <TT class="docutils literal">lpthw.web</TT> and reinstalling it. If that doesn't work make triple sure you're using the right version of Python.</DD></DL></DIV>