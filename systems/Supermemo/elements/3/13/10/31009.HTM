<H2>Basic Try-Catch</H2>
<P>First version is a real simple one. Probably if you are here you know the solution. (this solution was presented also by other authors... my contribution is represented by the second and the third version of the solution).</P>
<P>The general idea is to map <B>TRY</B> statement on <B>if</B> statement. The first time that it is invoked it return 0 and the executed code is the one stated in <B>then</B> branch. <B>CATCH</B> statement is simply the <B>else</B> statement. When the <B>THROW</B> statement is executed it simply calls the <B>longjmp</B> function with the second parameter equals to 1 (or anything not 0).</P><PRE class=code>#include &lt;stdio.h&gt;
#include &lt;setjmp.h&gt;

#define TRY do{ jmp_buf ex_buf__; if( !setjmp(ex_buf__) ){
#define CATCH } else {
#define ETRY } }while(0)
#define THROW longjmp(ex_buf__, 1)

int
main(int argc, char** argv)
{
   TRY
   {
      printf("In Try Statement\n");
      THROW;
      printf("I do not appear\n");
   }
   CATCH
   {
      printf("Got Exception!\n");
   }
   ETRY;

   return 0;
}
</PRE>
<P>In our solution we provide also an <B>ETRY</B> statement that represents the end of <I>try-throw-catch</I> block. This is needed because we include all operations performed by <I>try-throw-catch</I> block in a <B>do...while(0)</B> block. This solution has two main reasons: </P>
<UL>
<LI>all the <B>TRY-ETRY</B> expression is treated as a single statement 
<LI>we can define multiple, not nested, <B>TRY-ETRY</B> statements in the same block (reuse of <B>ex_buf__</B> variable).</LI></UL>
<P></P>
<P>The following represents the compilation and execution steps of the previous example.</P><PRE class=shell>[nids@vultus ttc]% gcc ex1.c
[nids@vultus ttc]% ./a.out
In Try Statement
Got Exception!
[nids@vultus ttc]%</PRE>