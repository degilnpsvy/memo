<H1 class=title>Exercise 36: Designing and Debugging</H1>
<P id=p1>Now that you know <TT class="docutils literal"><SPAN class=pre>if-statements</SPAN></TT>, I'm going to give you some rules for <TT class="docutils literal"><SPAN class=pre>for-loops</SPAN></TT> and <TT class="docutils literal"><SPAN class=pre>while-loops</SPAN></TT> that will keep you out of trouble. I'm also going to give you some tips on debugging so that you can figure out problems with your program. Finally, you will design a little game similar to the last exercise, but with a slight twist.</P>
<DIV id=rules-for-if-statements class=section>
<H1>Rules for If-Statements</H1>
<OL class="arabic simple">
<LI>Every <TT class="docutils literal"><SPAN class=pre>if-statement</SPAN></TT> must have an <TT class="docutils literal">else</TT>.</LI>
<LI>If this <TT class="docutils literal">else</TT> should never run because it doesn't make sense, then you must use a <TT class="docutils literal">die</TT> function in the <TT class="docutils literal">else</TT> that prints out an error message and dies, just like we did in the last exercise. This will find <EM>many</EM> errors.</LI>
<LI>Never nest <TT class="docutils literal"><SPAN class=pre>if-statements</SPAN></TT> more than two deep and always try to do them one deep.</LI>
<LI>Treat <TT class="docutils literal"><SPAN class=pre>if-statements</SPAN></TT> like paragraphs, where each <TT class="docutils literal"><SPAN class=pre>if-elif-else</SPAN></TT> grouping is like a set of sentences. Put blank lines before and after.</LI>
<LI>Your boolean tests should be simple. If they are complex, move their calculations to variables earlier in your function and use a good name for the variable.</LI></OL>
<P id=p2>If you follow these simple rules, you will start writing better code than most programmers. Go back to the last exercise and see if I followed all of these rules. If not, fix my mistakes.</P>
<DIV class=warning>
<P id=p3 class="first admonition-title">Warning</P>
<P id=p4 class=last>Never be a slave to the rules in real life. For training purposes you need to follow these rules to make your mind strong, but in real life sometimes these rules are just stupid. If you think a rule is stupid, try not using it.</P></DIV></DIV>
<DIV id=rules-for-loops class=section>
<H1>Rules for Loops</H1>
<OL class="arabic simple">
<LI>Use a <TT class="docutils literal"><SPAN class=pre>while-loop</SPAN></TT> only to loop forever, and that means probably never. This only applies to Python; other languages are different.</LI>
<LI>Use a <TT class="docutils literal"><SPAN class=pre>for-loop</SPAN></TT> for all other kinds of looping, especially if there is a fixed or limited number of things to loop over.</LI></OL></DIV>
<DIV id=tips-for-debugging class=section>
<H1>Tips for Debugging</H1>
<OL class="arabic simple">
<LI>Do not use a "debugger." A debugger is like doing a full-body scan on a sick person. You do not get any specific useful information, and you find a whole lot of information that doesn't help and is just confusing.</LI>
<LI>The best way to debug a program is to use <TT class="docutils literal">print</TT> to print out the values of variables at points in the program to see where they go wrong.</LI>
<LI>Make sure parts of your programs work as you work on them. Do not write massive files of code before you try to run them. Code a little, run a little, fix a little.</LI></OL></DIV>
<DIV id=homework class=section>
<H1>Homework</H1>
<P id=p5>Now write a similar game to the one that I created in the last exercise. It can be any kind of game you want in the same flavor. Spend a week on it making it as interesting as possible. For Study Drills, use lists, functions, and modules (remember those from Exercise 13?) as much as possible, and find as many new pieces of Python as you can to make the game work.</P>
<P id=p6>Before you start coding you must draw a map for your game. Create the rooms, monsters, and traps that the player must go through on paper before you code.</P>
<P id=p7>Once you have your map, try to code it up. If you find problems with the map then adjust it and make the code match.</P>
<P id=p8>The best way to work on a piece of software is in small chunks like this:</P>
<OL class="arabic simple">
<LI>On a sheet of paper or an index card, write a list of tasks you need to complete to finish the software. This is your to do list.</LI>
<LI>Pick the easiest thing you can do from your list.</LI>
<LI>Write out English comments in your source file as a guide for how you would accomplish this task in your code.</LI>
<LI>Write some of the code under the English comments.</LI>
<LI>Quickly run your script so see if that code worked.</LI>
<LI>Keep working in a cycle of writing some code, running it to test it, and fixing it until it works.</LI>
<LI>Cross this task off your list, then pick your next easiest task and repeat.</LI></OL>
<P id=p9>This process will help you work on software in a methodical and consistent manner. As you work, update your list by removing tasks you don't really need and adding ones you do.</P></DIV>