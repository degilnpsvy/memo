<H1 class=title>Exercise 42: Is-A, Has-A, Objects, and Classes</H1>
<P id=p1>An important concept that you have to understand is the difference between a class and an object. The problem is, there is no real "difference" between a class and an object. They are actually the same thing at different points in time. I will demonstrate by a Zen koan:</P><PRE class=literal-block>What is the difference between a Fish and a Salmon?
</PRE>
<P id=p2>Did that question sort of confuse you? Really sit down and think about it for a minute. I mean, a Fish and a Salmon are different but, wait, they are the same thing, right? A Salmon is a <EM>kind</EM> of Fish, so I mean it's not different. But at the same time, because a Salmon is a particular <EM>type</EM> of Fish so it's actually different from all other Fish. That's what makes it a Salmon and not a Halibut. So a Salmon and a Fish are the same but different. Weird.</P>
<P id=p3>This question is confusing because most people do not think about real things this way, but they intuitively understand them. You do not need to think about the difference between a Fish and a Salmon because you <EM>know</EM> how they are related. You know a Salmon is a <EM>kind</EM> of Fish and that there are other kinds of Fish without having to understand that.</P>
<P id=p4>Let's take it one step further. Let's say you have a bucket full of three Salmon and because you are a nice person, you have decided to name them Frank, Joe, and Mary. Now, think about this question:</P><PRE class=literal-block>What is the difference between Mary and a Salmon?
</PRE>
<P id=p5>Again this is a weird question, but it's a bit easier than the Fish versus Salmon question. You know that Mary is a Salmon, so she's not really different. She's just a specific "instance" of a Salmon. Joe and Frank are also instances of Salmon. What do I mean when I say instance? I mean they were created from some other Salmon and now represent a real thing that has Salmon-like attributes.</P>
<P id=p6>Now for the mind-bending idea: Fish is a class, and Salmon is a class, and Mary is an object. Think about that for a second. Let's break it down slowly and see if you get it.</P>
<P id=p7>A Fish is a class, meaning it's not a <EM>real</EM> thing, but rather a word we attach to instances of things with similar attributes. Got fins? Got gills? Lives in water? Alright it's probably a Fish.</P>
<P id=p8>Someone with a Ph.D. then comes along and says, "No, my young friend, <EM>this</EM> Fish is actually <EM>Salmo salar</EM>, affectionately known as a Salmon." This professor has just clarified the Fish further; and made a new class called "Salmon" that has more specific attributes. Longer nose, reddish flesh, big, lives in the ocean or fresh water, tasty? Probably a Salmon.</P>
<P id=p9>Finally, a cook comes along and tells the Ph.D., "No, you see this Salmon right here, I'll call her Mary and I'm going to make a tasty fillet out of her with a nice sauce." Now you have this <EM>instance</EM> of a Salmon (which also is an instance of a Fish) named Mary turned into something real that is filling your belly. It has become an object.</P>
<P id=p10>There you have it: Mary is a kind of Salmon that is a kind of Fish. object is a class is a class.</P>
<DIV id=how-this-looks-in-code class=section>
<H1>How This Looks in Code</H1>
<P id=p11>This is a weird concept, but to be very honest you only have to worry about it when you make new classes, and when you use a class. I will show you two tricks to help you figure out whether something is a class or object.</P>
<P id=p12>First, you need to learn two catch phrases "is-a" and "has-a." You use the phrase is-a when you talk about objects and classes being related to each other by a class relationship. You use has-a when you talk about objects and classes that are related only because they <EM>reference</EM> each other.</P>
<P id=p13>Now, go through this piece of code and replace each <TT class="docutils literal"><SPAN class=pre>##??</SPAN></TT> comment with a comment that says whether the next line represents an is-a or a has-a relationship and what that relationship is. In the beginning of the code, I've laid out a few examples, so you just have to write the remaining ones.</P>
<P id=p14>Remember, is-a is the relationship between Fish and Salmon, while has-a is the relationship between Salmon and Gills.</P>
<TABLE class=highlighttable>
<TBODY>
<TR></TR></TBODY></TABLE></DIV>
<DIV id=how-this-looks-in-code class=section>
<TABLE class=highlighttable>
<TBODY>
<TR>
<TD class=code>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex42.py-idio.html-1></A><SPAN class=c1>## Animal is-a object (yes, sort of confusing) look at the extra credit</SPAN>
<A name=python--ex42.py-idio.html-2></A><SPAN class=k>class</SPAN> <SPAN class=nc>Animal</SPAN><SPAN class=p>(</SPAN><SPAN class=nb>object</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-3></A>    <SPAN class=k>pass</SPAN>
<A name=python--ex42.py-idio.html-4></A>
<A name=python--ex42.py-idio.html-5></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-6></A><SPAN class=k>class</SPAN> <SPAN class=nc>Dog</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Animal</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-7></A>
<A name=python--ex42.py-idio.html-8></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>__init__</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>name</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-9></A>        <SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-10></A>        <SPAN class=bp>self</SPAN><SPAN class=o>.</SPAN><SPAN class=n>name</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>name</SPAN>
<A name=python--ex42.py-idio.html-11></A>
<A name=python--ex42.py-idio.html-12></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-13></A><SPAN class=k>class</SPAN> <SPAN class=nc>Cat</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Animal</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-14></A>
<A name=python--ex42.py-idio.html-15></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>__init__</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>name</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-16></A>        <SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-17></A>        <SPAN class=bp>self</SPAN><SPAN class=o>.</SPAN><SPAN class=n>name</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>name</SPAN>
<A name=python--ex42.py-idio.html-18></A>
<A name=python--ex42.py-idio.html-19></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-20></A><SPAN class=k>class</SPAN> <SPAN class=nc>Person</SPAN><SPAN class=p>(</SPAN><SPAN class=nb>object</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-21></A>
<A name=python--ex42.py-idio.html-22></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>__init__</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>name</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-23></A>        <SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-24></A>        <SPAN class=bp>self</SPAN><SPAN class=o>.</SPAN><SPAN class=n>name</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>name</SPAN>
<A name=python--ex42.py-idio.html-25></A>
<A name=python--ex42.py-idio.html-26></A>        <SPAN class=c1>## Person has-a pet of some kind</SPAN>
<A name=python--ex42.py-idio.html-27></A>        <SPAN class=bp>self</SPAN><SPAN class=o>.</SPAN><SPAN class=n>pet</SPAN> <SPAN class=o>=</SPAN> <SPAN class=bp>None</SPAN>
<A name=python--ex42.py-idio.html-28></A>
<A name=python--ex42.py-idio.html-29></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-30></A><SPAN class=k>class</SPAN> <SPAN class=nc>Employee</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Person</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-31></A>
<A name=python--ex42.py-idio.html-32></A>    <SPAN class=k>def</SPAN> <SPAN class=nf>__init__</SPAN><SPAN class=p>(</SPAN><SPAN class=bp>self</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>name</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>salary</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-33></A>        <SPAN class=c1>## ?? hmm what is this strange magic?</SPAN>
<A name=python--ex42.py-idio.html-34></A>        <SPAN class=nb>super</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Employee</SPAN><SPAN class=p>,</SPAN> <SPAN class=bp>self</SPAN><SPAN class=p>)</SPAN><SPAN class=o>.</SPAN><SPAN class=n>__init__</SPAN><SPAN class=p>(</SPAN><SPAN class=n>name</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex42.py-idio.html-35></A>        <SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-36></A>        <SPAN class=bp>self</SPAN><SPAN class=o>.</SPAN><SPAN class=n>salary</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>salary</SPAN>
<A name=python--ex42.py-idio.html-37></A>
<A name=python--ex42.py-idio.html-38></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-39></A><SPAN class=k>class</SPAN> <SPAN class=nc>Fish</SPAN><SPAN class=p>(</SPAN><SPAN class=nb>object</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-40></A>    <SPAN class=k>pass</SPAN>
<A name=python--ex42.py-idio.html-41></A>
<A name=python--ex42.py-idio.html-42></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-43></A><SPAN class=k>class</SPAN> <SPAN class=nc>Salmon</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Fish</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-44></A>    <SPAN class=k>pass</SPAN>
<A name=python--ex42.py-idio.html-45></A>
<A name=python--ex42.py-idio.html-46></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-47></A><SPAN class=k>class</SPAN> <SPAN class=nc>Halibut</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Fish</SPAN><SPAN class=p>):</SPAN>
<A name=python--ex42.py-idio.html-48></A>    <SPAN class=k>pass</SPAN>
<A name=python--ex42.py-idio.html-49></A>
<A name=python--ex42.py-idio.html-50></A>
<A name=python--ex42.py-idio.html-51></A><SPAN class=c1>## rover is-a Dog</SPAN>
<A name=python--ex42.py-idio.html-52></A><SPAN class=n>rover</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Dog</SPAN><SPAN class=p>(</SPAN><SPAN class=s2>"Rover"</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex42.py-idio.html-53></A>
<A name=python--ex42.py-idio.html-54></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-55></A><SPAN class=n>satan</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Cat</SPAN><SPAN class=p>(</SPAN><SPAN class=s2>"Satan"</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex42.py-idio.html-56></A>
<A name=python--ex42.py-idio.html-57></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-58></A><SPAN class=n>mary</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Person</SPAN><SPAN class=p>(</SPAN><SPAN class=s2>"Mary"</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex42.py-idio.html-59></A>
<A name=python--ex42.py-idio.html-60></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-61></A><SPAN class=n>mary</SPAN><SPAN class=o>.</SPAN><SPAN class=n>pet</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>satan</SPAN>
<A name=python--ex42.py-idio.html-62></A>
<A name=python--ex42.py-idio.html-63></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-64></A><SPAN class=n>frank</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Employee</SPAN><SPAN class=p>(</SPAN><SPAN class=s2>"Frank"</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi>120000</SPAN><SPAN class=p>)</SPAN>
<A name=python--ex42.py-idio.html-65></A>
<A name=python--ex42.py-idio.html-66></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-67></A><SPAN class=n>frank</SPAN><SPAN class=o>.</SPAN><SPAN class=n>pet</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>rover</SPAN>
<A name=python--ex42.py-idio.html-68></A>
<A name=python--ex42.py-idio.html-69></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-70></A><SPAN class=n>flipper</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Fish</SPAN><SPAN class=p>()</SPAN>
<A name=python--ex42.py-idio.html-71></A>
<A name=python--ex42.py-idio.html-72></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-73></A><SPAN class=n>crouse</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Salmon</SPAN><SPAN class=p>()</SPAN>
<A name=python--ex42.py-idio.html-74></A>
<A name=python--ex42.py-idio.html-75></A><SPAN class=c1>## ??</SPAN>
<A name=python--ex42.py-idio.html-76></A><SPAN class=n>harry</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>Halibut</SPAN><SPAN class=p>()</SPAN>
</PRE></DIV></TD></TR></TBODY></TABLE></DIV>
<DIV id=about-class-name-object class=section>
<H1>About class Name(object)</H1>
<P id=p15>Remember how I was yelling at you to always use <TT class="docutils literal">class Name(object)</TT> and I couldn't tell you why? Now I can tell you, because you just learned about the difference between a class and an object. I couldn't tell you until now because you would have just been confused and couldn't learn to use the technology.</P>
<P id=p16>What happened is Python's original rendition of class was broken in many serious ways. By the time they admitted the fault it was too late, and they had to support it. In order to fix the problem, they needed some "new class" style so that the "old classes" would keep working but you could use the new more correct version.</P>
<P id=p17>This is where "<TT class="docutils literal">class <SPAN class=pre>is-a</SPAN> object</TT>" comes in. They decided that they would use the word "object," lowercased, to be the "class" that you inherit from to make a class. Confusing, right? A class inherits from the class named object to make a class but it's not an object really it's a class, but do not forget to inherit from object.</P>
<P id=p18>Exactly. The choice of one single word meant that I couldn't teach you about this until now. Now you can try to understand the concept of a class that is an object if you like.</P>
<P id=p19>However, I would suggest you do not. Just completely ignore the idea of old style versus new style classes and assume that Python always requires (object) when you make a class. Save your brain power for something important.</P></DIV>
<DIV id=study-drills class=section>
<H1>Study Drills</H1>
<OL class="arabic simple">
<LI>Research why Python added this strange object class, and what that means.</LI>
<LI>Is it possible to use a class like it's an object?</LI>
<LI>Fill out the animals, fish, and people in this exercise with functions that make them do things. See what happens when functions are in a "base class" like <TT class="docutils literal">Animal</TT> versus in say <TT class="docutils literal">Dog</TT>.</LI>
<LI>Find other people's code and work out all the is-a and has-a relationships.</LI>
<LI>Make some new relationships that are lists and dictionaries so you can also have "has-many" relationships.</LI>
<LI>Do you think there's such thing as an "is-many" relationship? Read about "multiple inheritance," then avoid it if you can.</LI></OL></DIV>
<DIV id=common-student-questions class=section>
<H1>Common Student Questions</H1>
<DL class=docutils>
<DT>What are these <TT class="docutils literal">## <SPAN class=pre>??</SPAN></TT> comments for?</DT>
<DD>Those are "fill-in-the-blank" comments that you are supposed to fill in with the right "is-a," "has-a" concepts. Read this exercise again and look at the other comments to see what I mean.</DD>
<DT>What is the point of <TT class="docutils literal">self.pet = None</TT>?</DT>
<DD>That makes sure that the <TT class="docutils literal">self.pet</TT> attribute of that class is set to a default of <TT class="docutils literal">None</TT>.</DD>
<DT>What does <TT class="docutils literal">super(Employee, <SPAN class=pre>self).__init__(name)</SPAN></TT> do?</DT>
<DD>That's how you can run the <TT class="docutils literal">__init__</TT> method of a parent class reliably. Search for "python super" and read the various advice on it being evil and good for you.</DD></DL></DIV>