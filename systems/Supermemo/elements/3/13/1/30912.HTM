<H1 class=title>Exercise 20: Functions and Files</H1>
<P id=p1>Remember your checklist for functions, then do this exercise paying close attention to how functions and files can work together to make useful stuff.</P>
<TABLE class=highlighttable>
<TBODY>
<TR></TR></TBODY></TABLE>
<TABLE class=highlighttable>
<TBODY>
<TR>
<TD class=code>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex20.py-idio.html-1></A><FONT class=extract><SPAN class=kn>from</SPAN> <SPAN class=nn>sys</SPAN> <SPAN class=kn>import</SPAN> <SPAN class=n>argv</SPAN>
</FONT><A name=python--ex20.py-idio.html-2></A>
<A name=python--ex20.py-idio.html-3></A><FONT class=extract><SPAN class=n>script</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>input_file</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>argv</SPAN>
</FONT><A name=python--ex20.py-idio.html-4></A>
<A name=python--ex20.py-idio.html-5></A><FONT class=extract><SPAN class=k>def</SPAN> <SPAN class=nf>print_all</SPAN><SPAN class=p>(</SPAN><SPAN class=n>f</SPAN><SPAN class=p>):</SPAN>
</FONT><A name=python--ex20.py-idio.html-6></A><FONT class=extract>    <SPAN class=k>print</SPAN> <SPAN class=n>f</SPAN><SPAN class=o>.</SPAN><SPAN class=n>read</SPAN><SPAN class=p>()</SPAN>
</FONT><A name=python--ex20.py-idio.html-7></A>
<A name=python--ex20.py-idio.html-8></A><FONT class=extract><SPAN class=k>def</SPAN> <SPAN class=nf>rewind</SPAN><SPAN class=p>(</SPAN><SPAN class=n>f</SPAN><SPAN class=p>):</SPAN>
</FONT><A name=python--ex20.py-idio.html-9></A><FONT class=extract>    <SPAN class=n>f</SPAN><SPAN class=o>.</SPAN><SPAN class=n>seek</SPAN><SPAN class=p>(</SPAN><SPAN class=mi>0</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-10></A>
<A name=python--ex20.py-idio.html-11></A><FONT class=extract><SPAN class=k>def</SPAN> <SPAN class=nf>print_a_line</SPAN><SPAN class=p>(</SPAN><SPAN class=n>line_count</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>):</SPAN>
</FONT><A name=python--ex20.py-idio.html-12></A><FONT class=extract>    <SPAN class=k>print</SPAN> <SPAN class=n>line_count</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>f</SPAN><SPAN class=o>.</SPAN><SPAN class=n>readline</SPAN><SPAN class=p>()</SPAN>
</FONT><A name=python--ex20.py-idio.html-13></A>
<A name=python--ex20.py-idio.html-14></A><FONT class=extract><SPAN class=n>current_file</SPAN> <SPAN class=o>=</SPAN> <SPAN class=nb>open</SPAN><SPAN class=p>(</SPAN><SPAN class=n>input_file</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-15></A>
<A name=python--ex20.py-idio.html-16></A><FONT class=extract><SPAN class=k>print</SPAN> <SPAN class=s2>"First let's print the whole file:</SPAN><SPAN class=se>\n</SPAN><SPAN class=s2>"</SPAN>
</FONT><A name=python--ex20.py-idio.html-17></A>
<A name=python--ex20.py-idio.html-18></A><FONT class=extract><SPAN class=n>print_all</SPAN><SPAN class=p>(</SPAN><SPAN class=n>current_file</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-19></A>
<A name=python--ex20.py-idio.html-20></A><FONT class=extract><SPAN class=k>print</SPAN> <SPAN class=s2>"Now let's rewind, kind of like a tape."</SPAN>
</FONT><A name=python--ex20.py-idio.html-21></A>
<A name=python--ex20.py-idio.html-22></A><FONT class=extract><SPAN class=n>rewind</SPAN><SPAN class=p>(</SPAN><SPAN class=n>current_file</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-23></A>
<A name=python--ex20.py-idio.html-24></A><FONT class=extract><SPAN class=k>print</SPAN> <SPAN class=s2>"Let's print three lines:"</SPAN>
</FONT><A name=python--ex20.py-idio.html-25></A>
<A name=python--ex20.py-idio.html-26></A><FONT class=extract><SPAN class=n>current_line</SPAN> <SPAN class=o>=</SPAN> <SPAN class=mi>1</SPAN>
</FONT><A name=python--ex20.py-idio.html-27></A><FONT class=extract><SPAN class=n>print_a_line</SPAN><SPAN class=p>(</SPAN><SPAN class=n>current_line</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>current_file</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-28></A>
<A name=python--ex20.py-idio.html-29></A><FONT class=extract><SPAN class=n>current_line</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>current_line</SPAN> <SPAN class=o>+</SPAN> <SPAN class=mi>1</SPAN>
</FONT><A name=python--ex20.py-idio.html-30></A><FONT class=extract><SPAN class=n>print_a_line</SPAN><SPAN class=p>(</SPAN><SPAN class=n>current_line</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>current_file</SPAN><SPAN class=p>)</SPAN>
</FONT><A name=python--ex20.py-idio.html-31></A>
<A name=python--ex20.py-idio.html-32></A><FONT class=extract><SPAN class=n>current_line</SPAN> <SPAN class=o>=</SPAN> <SPAN class=n>current_line</SPAN> <SPAN class=o>+</SPAN> <SPAN class=mi>1</SPAN>
</FONT><A name=python--ex20.py-idio.html-33></A><FONT class=extract><SPAN class=n>print_a_line</SPAN><SPAN class=p>(</SPAN><SPAN class=n>current_line</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>current_file</SPAN><SPAN class=p>)</SPAN></FONT>
</PRE></DIV></TD></TR></TBODY></TABLE>
<P id=p2>Pay close attention to how we pass in the current line number each time we run <TT class="docutils literal">print_a_line</TT>.</P>
<DIV id=what-you-should-see class=section>
<H1>What You Should See</H1>
<DIV class=highlight><PRE><SPAN></SPAN><A name=python--ex20.sh-idio-shint-pyg.html-1></A><SPAN class=gp>$</SPAN> python ex20.py test.txt
<A name=python--ex20.sh-idio-shint-pyg.html-2></A><SPAN class=go>First let's print the whole file:</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-3></A>
<A name=python--ex20.sh-idio-shint-pyg.html-4></A><SPAN class=go>This is line 1</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-5></A><SPAN class=go>This is line 2</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-6></A><SPAN class=go>This is line 3</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-7></A>
<A name=python--ex20.sh-idio-shint-pyg.html-8></A><SPAN class=go>Now let's rewind, kind of like a tape.</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-9></A><SPAN class=go>Let's print three lines:</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-10></A><SPAN class=go>1 This is line 1</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-11></A>
<A name=python--ex20.sh-idio-shint-pyg.html-12></A><SPAN class=go>2 This is line 2</SPAN>
<A name=python--ex20.sh-idio-shint-pyg.html-13></A>
<A name=python--ex20.sh-idio-shint-pyg.html-14></A><SPAN class=go>3 This is line 3</SPAN>
</PRE></DIV></DIV>
<DIV id=study-drills class=section>
<H1>Study Drills</H1>
<OL class="arabic simple">
<LI>Write English comments for each line to understand what that line does. 
<LI>Each time <TT class="docutils literal">print_a_line</TT> is run, you are passing in a variable <TT class="docutils literal">current_line</TT>. Write out what <TT class="docutils literal">current_line</TT> is equal to on each function call, and trace how it becomes <TT class="docutils literal">line_count</TT> in <TT class="docutils literal">print_a_line</TT>. 
<LI>Find each place a function is used, and check its <TT class="docutils literal">def</TT> to make sure that you are giving it the right arguments. 
<LI>Research online what the <TT class="docutils literal">seek</TT> function for <TT class="docutils literal">file</TT> does. Try <TT class="docutils literal">pydoc file</TT> and see if you can figure it out from there. Then try <TT class="docutils literal">pydoc file.seek</TT> to see what seek does. 
<LI>Research the shorthand notation <TT class="docutils literal">+=</TT> and rewrite the script to use <TT class="docutils literal">+=</TT> instead.</LI></OL></DIV>
<DIV id=common-student-questions class=section>
<H1>Common Student Questions</H1>
<DL class=docutils>
<DT>What is <TT class="docutils literal">f</TT> in the <TT class="docutils literal">print_all</TT> and other functions? 
<DD>The <TT class="docutils literal">f</TT> is a variable just like you had in other functions in Exercise 18, except this time it's a file. A file in Python is kind of like an old tape drive on a mainframe, or maybe a DVD player. It has a "read head," and you can "seek" this read head around the file to positions, then work with it there. Each time you do <TT class="docutils literal">f.seek(0)</TT> you're moving to the start of the file. Each time you do <TT class="docutils literal">f.readline()</TT> you're reading a line from the file, and moving the read head to right after the <TT class="docutils literal">\n</TT> that ends that line. This will be explained more as you go on. 
<DT>Why does <TT class="docutils literal">seek(0)</TT> not set the <TT class="docutils literal">current_line</TT> to 0? 
<DD>First, the <TT class="docutils literal">seek()</TT> function is dealing in <EM>bytes</EM>, not lines. The code <TT class="docutils literal">seek(0)</TT> moves the file to the 0 byte (first byte) in the file. Second, <TT class="docutils literal">current_line</TT> is just a variable and has no real connection to the file at all. We are manually incrementing it. 
<DT>What is <TT class="docutils literal">+=</TT>? 
<DD>You know how in English I can rewrite "it is" as "it's"? Or I can rewrite "you are" as "you're"? In English this is called a contraction, and this is kind of like a contraction for the two operations <TT class="docutils literal">=</TT> and <TT class="docutils literal">+</TT>. That means <TT class="docutils literal">x = x + y</TT> is the same as <TT class="docutils literal">x += y</TT>. 
<DT>How does <TT class="docutils literal">readline()</TT> know where each line is? 
<DD>Inside <TT class="docutils literal">readline()</TT> is code that scans each byte of the file until it finds a <TT class="docutils literal">\n</TT> character, then stops reading the file to return what it found so far. The file <TT class="docutils literal">f</TT> is responsible for maintaining the current position in the file after each <TT class="docutils literal">readline()</TT> call, so that it will keep reading each line. 
<DT>Why are there empty lines between the lines in the file? 
<DD>The <TT class="docutils literal">readline()</TT> function returns the <TT class="docutils literal">\n</TT> that's in the file at the end of that line. Add a <TT class="docutils literal">,</TT> at the end of your <TT class="docutils literal">print</TT> function calls to avoid adding double <TT class="docutils literal">\n</TT> to every line.</DD></DL></DIV>