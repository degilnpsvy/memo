<H1>The Process Abstraction</H1>
<DIV class=sect1><A id=_operating_system_abstractions class=anchor></A>
<H2>Operating System Abstractions</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>Abstractions <EM>simplify application design</EM> by:</DIV>
<UL>
<LI>
<P><STRONG>hiding undesirable properties</STRONG>,</P></LI>
<LI>
<P><STRONG>adding new capabilities</STRONG>, and</P></LI>
<LI>
<P><STRONG>organizing information</STRONG>.</P></LI></UL></DIV>
<DIV class="openblock slide">
<DIV class=content>
<DIV class=paragraph>
<P>Abstractions provide an <STRONG class=slide>interface</STRONG> to application programmers that separates <STRONG class=slide>policy</STRONG>&#8201;&#8212;&#8201;what the interface commits to accomplishing&#8212;&#8203;from <STRONG class=slide>mechanism</STRONG>&#8201;&#8212;&#8201;how the interface is implemented.</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_example_abstraction_file class=anchor></A>
<H2>Example Abstraction: File</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title>What <STRONG>undesirable properties</STRONG> do files hide?</DIV>
<UL>
<LI>
<P>Disks are slow!</P></LI>
<LI>
<P>Chunks of storage are actually distributed all over the disk.</P></LI>
<LI>
<P>Disk storage may fail!</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title>What <STRONG>new capabilities</STRONG> do files add?</DIV>
<UL>
<LI>
<P>Growth and shrinking.</P></LI>
<LI>
<P>Organization into directories.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title>What <STRONG>information</STRONG> do files help organize?</DIV>
<UL>
<LI>
<P>Ownership and permissions.</P></LI>
<LI>
<P>Access time, modification time, type, etc.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_preview_of_coming_abstractions class=anchor></A>
<H2>Preview of Coming Abstractions</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>Threads</STRONG> abstract the CPU.</P></LI>
<LI>
<P><STRONG>Address spaces</STRONG> abstract memory.</P></LI>
<LI>
<P><STRONG>Files</STRONG> abstract the disk.</P></LI>
<LI>
<P>We will return to these abstractions. We are starting with an organizing principle.</P></LI></UL></DIV>
<TABLE class="tableblock frame-all grid-all spread">
<COLGROUP>
<COL style="WIDTH: 33.33%">
<COL style="WIDTH: 33.33%">
<COL style="WIDTH: 33.33%"></COLGROUP>
<TBODY>
<TR>
<TD class="tableblock halign-left valign-top">
<P class=tableblock><SPAN class=image><IMG title=Thread pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 90%" alt=thread src="https://www.ops-class.org/img/slides/figures/thread.svg" data-pagespeed-url-hash="1719104883"></SPAN></P></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock><SPAN class=image><IMG title="Address Space" pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 90%" alt=addressspace src="https://www.ops-class.org/img/slides/figures/addressspace.svg" data-pagespeed-url-hash="3813741599"></SPAN></P></TD>
<TD class="tableblock halign-left valign-top">
<P class=tableblock><SPAN class=image><IMG title=File pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 90%" alt=file src="https://www.ops-class.org/img/slides/figures/file.svg" data-pagespeed-url-hash="1092468441"></SPAN></P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=sect1><A id=_the_process class=anchor></A>
<H2>The Process</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<DIV class=title><STRONG>Processes are the most fundamental operating system abstraction.</STRONG></DIV>
<UL>
<LI>
<P>Processes organize information about other abstractions and represent a single thing that the computer is "doing."</P></LI>
<LI>
<P>You know processes as <SPAN>app(lication)s</SPAN>.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_organizing_information class=anchor></A>
<H2>Organizing Information</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>Unlike threads, address spaces and files, processes are <STRONG>not tied to a hardware component</STRONG>. Instead, they contain other abstractions.</P></DIV>
<DIV class=ulist>
<DIV class=title>Processes contain:</DIV>
<UL>
<LI>
<P>one or more <STRONG>threads</STRONG>,</P></LI>
<LI>
<P>an <STRONG>address space</STRONG>, and</P></LI>
<LI>
<P>zero or more open <STRONG>file handles</STRONG> representing <STRONG>files</STRONG>.</P></LI></UL></DIV>
<DIV class="imageblock expand hascaption">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 50%" alt=process src="https://www.ops-class.org/img/slides/figures/process.svg" data-pagespeed-url-hash="565121858"></DIV>
<DIV class=title>Figure 2. The Process</DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_process_as_protection_boundary class=anchor></A>
<H2>Process as Protection Boundary</H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P>The operating system is responsible for isolating processes from each other.</P></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>What you do in your own process is your own business <STRONG>but it shouldn&#8217;t be able to crash the machine or effect other processes</STRONG>&#8212;or at least processes started by other users.</P></LI>
<LI>
<P>Thus: safe intra-process communication is <STRONG>your</STRONG> problem; safe inter-process communication is an <STRONG>operating system</STRONG> problem.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_intra_process_communication_easy class=anchor></A>
<H2>Intra-Process Communication: Easy</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=intraprocess src="https://www.ops-class.org/img/slides/figures/intraprocess.svg" data-pagespeed-url-hash="2790243590"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>Communication between multiple threads in a process is usually accomplished using <STRONG>shared memory</STRONG>.</P></LI>
<LI>
<P>Threads within a process also share open file handles and both static and dynamically-allocated global variables.</P></LI>
<LI>
<P>Thread stacks and thus thread local variables are typically private.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_small_intra_process_communication_easy_maybe_span class=anchor></A>
<H2><SPAN>Intra-Process Communication: Easy&#8230;&#8203; Maybe</SPAN></H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=intraprocess src="https://www.ops-class.org/img/slides/figures/intraprocess.svg" data-pagespeed-url-hash="2790243590"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>Sharing data requires synchronization mechanisms to ensure consistency.</STRONG></P></LI>
<LI>
<P>We will return to this later.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_small_inter_process_communication_harder_span class=anchor></A>
<H2><SPAN>Inter-Process Communication: Harder</SPAN></H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=interprocess src="https://www.ops-class.org/img/slides/figures/interprocess.svg" data-pagespeed-url-hash="3913762036"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>A variety of mechanism exist to enable inter-process communication (IPC), including shared files or sockets, exit codes, signals, pipes and shared memory.</P></LI>
<LI>
<P>All require coordination between the communicating processes.</P></LI>
<LI>
<P>Most have semantics limiting the degree to which processes can interfere with each other.</P>
<DIV class=ulist>
<UL>
<LI>
<P>A process can&#8217;t just send a SIGKILL to any other process running on the machine!</P></LI></UL></DIV></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__wait_ipc_return_codes class=anchor></A>
<H2>$ wait # IPC: return codes</H2>
<DIV class=sectionbody>
<DIV class="imageblock expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 80%" alt=returncode src="https://www.ops-class.org/img/slides/figures/returncode.svg" data-pagespeed-url-hash="2454349350"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>Simplest and most-limited form of IPC.</P></LI>
<LI>
<P>Allows processes to return a single int to the process that created them.</P></LI>
<LI>
<P>0 typically indicates success; non-0, failure.</P></LI>
<LI>
<P>Analogous to older computers that would transform a set of punch cards into a "result."</P></LI>
<LI>
<P><CODE>bash</CODE> exposes return codes as <CODE>$?</CODE>:</P></LI></UL></DIV>
<DIV class="openblock slide">
<DIV class=content>
<DIV class="imageblock expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 80%" alt="returncode bash" src="https://www.ops-class.org/img/slides/figures/returncode-bash.svg" data-pagespeed-url-hash="2307202019"></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_p_pes_ipc_pipes_span class=anchor></A>
<H2><SPAN>$ p | pes # IPC: pipes</SPAN></H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=pipes src="https://www.ops-class.org/img/slides/figures/pipes.svg" data-pagespeed-url-hash="3517073600"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>Pipes create a producer-consumer buffer between two processes.</P></LI>
<LI>
<P>Allows the output from one process to be used as the input to another.</P></LI>
<LI>
<P>The operating system manages a queue for each pipe to accommodate different input and output rates.</P></LI>
<LI>
<P>Facilitates the canonical chaining together of small UNIX utilities to do more sophisticated processing.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_kill_9_ubshuttle_ipc_signals_span class=anchor></A>
<H2><SPAN>$ kill -9 ubshuttle # IPC: signals</SPAN></H2>
<DIV class=sectionbody>
<DIV class=paragraph>
<P><SPAN class=image><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=signals src="https://www.ops-class.org/img/slides/figures/signals.svg" data-pagespeed-url-hash="2299378602"></SPAN></P></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>Signals are a limited form of asynchronous communication between processes.</P></LI>
<LI>
<P>Processes can register a <STRONG>signal handler</STRONG> to run when a signal is received.</P></LI>
<LI>
<P>Users can send signals to processes owned by them; the super-user can send a signal to any process.</P></LI>
<LI>
<P>Processes can ignore most signals.</P>
<DIV class=ulist>
<UL>
<LI>
<P><CODE>SIGKILL</CODE> is a notable exception; used for non-graceful termination.</P></LI>
<LI>
<P><CODE>SIGTERM</CODE> is used for graceful shutdown and sent by Control-C.</P></LI></UL></DIV></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_we_will_return_to_ipc class=anchor></A>
<H2>We Will Return to IPC</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P><STRONG>return codes</STRONG>&#8201;&#8212;&#8201;we will discuss again when we learn about <CODE>wait()</CODE> and <CODE>_exit()</CODE>.</P>
<DIV class=ulist>
<UL>
<LI>
<P>You will implement return codes for ASST2.</P></LI></UL></DIV></LI>
<LI>
<P><STRONG>pipes</STRONG>&#8201;&#8212;&#8201;we will discuss again when we learn about <CODE>fork()</CODE>.</P></LI>
<LI>
<P><STRONG>signals</STRONG>&#8201;&#8212;&#8201;are difficult to use and implement and not something we will return to.</P></LI>
<LI>
<P><STRONG>shared memory</STRONG>&#8201;&#8212;&#8201;we will discuss again when we learn about address spaces and virtual memory.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_processes_v_threads class=anchor></A>
<H2>Processes v. Threads</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Potential confusing due to overlapping terminology&#8212;&#8203;we can describe both a <STRONG>process</STRONG> and a <STRONG>thread</STRONG> as running.</P></LI>
<LI>
<P>Terminology can be helpful for remembering the distinction:</P>
<DIV class=ulist>
<UL>
<LI>
<P>A computing <STRONG>process</STRONG> requires multiple resources: the CPU, memory, files, etc.</P></LI>
<LI>
<P>A <STRONG>thread</STRONG> of execution abstracts CPU state.</P></LI></UL></DIV></LI>
<LI>
<P>Processes <EM>contain</EM> threads; threads <EM>belong</EM> to a process.</P>
<DIV class=ulist>
<UL>
<LI>
<P>Only one exception: the kernel may have threads of execution not associated with any user process</P></LI>
<LI>
<P>(Except the kernel process, which is a process, remember?)</P></LI></UL></DIV></LI>
<LI>
<P>A process is considered to be running when one or more of its threads are running.</P></LI>
<LI>
<P>Different operating systems use different terminology, but share common ideas.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_process_example_firefox class=anchor></A>
<H2>Process Example: Firefox</H2>
<DIV class=sectionbody>
<DIV class=openblock>
<DIV class=content>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox has multiple threads. What are they doing?</STRONG></DIV>
<UL>
<LI>
<P>Waiting for and processing interface events: mouse clicks, keyboard input, etc.</P></LI>
<LI>
<P>Redrawing the screen as necessary in response to user input, web page loading, etc.</P></LI>
<LI>
<P>Loading web pages&#8212;&#8203;usually multiple parts <EM>in parallel</EM> to speed things up.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox is using memory. For what?</STRONG></DIV>
<UL>
<LI>
<P>Firefox.exe: the executable code of Firefox itself.</P></LI>
<LI>
<P>Shared libraries for web page parsing, security, etc.</P></LI>
<LI>
<P>Stacks storing local variables for running threads.</P></LI>
<LI>
<P>A heap storing dynamically-allocated memory.</P></LI></UL></DIV>
<DIV class=ulist>
<DIV class=title><STRONG>Firefox has files open. Why?</STRONG></DIV>
<UL>
<LI>
<P>Configuration files.</P></LI>
<LI>
<P>Fonts.</P></LI></UL></DIV></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__top_more_process_information class=anchor></A>
<H2>$ top # more process information</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt=top src="https://www.ops-class.org/img/slides/figures/top.svg" data-pagespeed-url-hash="400442260"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=_process_example_bash class=anchor></A>
<H2>Process Example: bash</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>Let&#8217;s do this for real using standard Linux system utilities.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_finding_bash class=anchor></A>
<H2>Finding bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="finding bash" src="https://www.ops-class.org/img/slides/figures/finding-bash.svg" data-pagespeed-url-hash="2361526433"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P><CODE>ps aux</CODE> gives me all process, then <CODE>grep</CODE> for the one I&#8217;m after.</P></LI>
<LI>
<P>&#8230;&#8203;or, do it all in one shot using <CODE>pgrep</CODE>.</P></LI>
<LI>
<P>&#8230;&#8203;or, if I know it&#8217;s running in my current session a bare <CODE>ps</CODE> will do.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash 3" src="https://www.ops-class.org/img/slides/figures/process-bash-3.svg" data-pagespeed-url-hash="1050313241"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_ps_lf_thread_information_span class=anchor></A>
<H2><SPAN>$ ps -Lf # thread information</SPAN></H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="threads bash" src="https://www.ops-class.org/img/slides/figures/threads-bash.svg" data-pagespeed-url-hash="2275098225"></DIV></DIV>
<DIV class=ulist>
<DIV class=title>What are:</DIV>
<UL>
<LI>
<P><CODE>UID</CODE>: user the process is running as.</P></LI>
<LI>
<P><CODE>PID</CODE>: process ID.</P></LI>
<LI>
<P><CODE>PPID</CODE>: parent process ID.</P></LI>
<LI>
<P><CODE>PRI</CODE>: scheduling priority.</P></LI>
<LI>
<P><CODE>SZ</CODE>: size of the core image of the process (kB).</P></LI>
<LI>
<P><CODE>WCHAN</CODE>: if the process is not running, description of what it is waiting on.</P></LI>
<LI>
<P><CODE>RSS</CODE>: total amount of resident memory is use by the process (kB).</P></LI>
<LI>
<P><CODE>TIME</CODE>: measure of the amount of time that the process has spent running.</P></LI></UL></DIV>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="threads bash" src="https://www.ops-class.org/img/slides/figures/threads-bash.svg" data-pagespeed-url-hash="2275098225"></DIV></DIV>
<DIV class=ulist>
<UL>
<LI>
<P>If <CODE>bash</CODE> had multiple threads running this view would show them, so <CODE>bash</CODE> does not have multiple threads.</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=_bash_2 class=anchor></A>
<H2>bash</H2>
<DIV class=sectionbody>
<DIV class=imageblock>
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 100%" alt="process bash 2" src="https://www.ops-class.org/img/slides/figures/process-bash-2.svg" data-pagespeed-url-hash="755813320"></DIV></DIV></DIV></DIV>
<DIV class=sect1><A id=__ps_process_information class=anchor></A>
<H2>$ ps # process information</H2>
<DIV class=sectionbody>
<DIV class=ulist>
<UL>
<LI>
<P>I wish we could see a process with multiple threads&#8230;&#8203;</P></LI></UL></DIV></DIV></DIV>
<DIV class=sect1><A id=__span_class_spelling_exception_ps_lf_thread_information_span_3 class=anchor></A>
<H2><SPAN>$ ps -Lf # thread information</SPAN></H2>
<DIV class=sectionbody>
<DIV class="imageblock expand">
<DIV class=content><IMG pagespeed.CriticalImages.checkImageForCriticality(this); style="WIDTH: 90%" alt="ps threads" src="https://www.ops-class.org/img/slides/figures/ps-threads.svg" data-pagespeed-url-hash="2737050932"></DIV></DIV></DIV></DIV>