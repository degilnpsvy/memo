<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Boilerplate code</H2></DIV></DIV></DIV>
<P>In your code, the first step is to <CODE class=function>#include</CODE> the needed headers: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Copyright information</SPAN>
<SPAN class=comment> */</SPAN>

<SPAN class="gtkdoc ppc">#include</SPAN> <SPAN class="gtkdoc pps">"viewer-file.h"</SPAN><SPAN class="gtkdoc ppc"></SPAN>

<SPAN class=comment>/* Private structure definition. */</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> <SPAN class="gtkdoc opt">{</SPAN>
  gchar <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=comment>/* stuff */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> ViewerFilePrivate<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class=comment>/* </SPAN>
<SPAN class=comment> * forward definitions</SPAN>
<SPAN class=comment> */</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>If the class is being declared as final using <CODE class=function>G_DECLARE_FINAL_TYPE</CODE>, its instance structure should be defined in the C file: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFile
<SPAN class="gtkdoc opt">{</SPAN>
  GObject parent_instance<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* Other members, including private data. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Call the <CODE class=function>G_DEFINE_TYPE</CODE> macro (or <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE> if your class needs private data &#8212; final types do <SPAN class=emphasis><EM>not</EM></SPAN> need private data) using the name of the type, the prefix of the functions and the parent GType to reduce the amount of boilerplate needed. This macro will: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>implement the <CODE class=function>viewer_file_get_type</CODE> function</LI>
<LI class=listitem>define a parent class pointer accessible from the whole .c file</LI>
<LI class=listitem>add private instance data to the type (if using <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE>)</LI></UL></DIV>
<P></P>
<P>If the class has been declared as final using <CODE class=function>G_DECLARE_FINAL_TYPE</CODE> (see <A title="Boilerplate header code" class=xref href="https://developer.gnome.org/gobject/stable/howto-gobject.html#howto-gobject-header">the section called &#8220;Boilerplate header code&#8221;</A>), private data should be placed in the instance structure, <SPAN class=type>ViewerFile</SPAN>, and <CODE class=function>G_DEFINE_TYPE</CODE> should be used instead of <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE>. The instance structure for a final class is not exposed publicly, and is not embedded in the instance structures of any derived classes (because the class is final); so its size can vary without causing incompatibilities for code which uses the class. Conversely, private data for derivable classes <SPAN class=emphasis><EM>must</EM></SPAN> be included in a private structure, and <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE> must be used. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS">G_DEFINE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>or </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_TYPE_WITH_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>It is also possible to use the <CODE class=function>G_DEFINE_TYPE_WITH_CODE</CODE> macro to control the <CODE class=function>get_type</CODE> function implementation &#8212; for instance, to add a call to the <CODE class=function>G_IMPLEMENT_INTERFACE</CODE> macro to implement an interface.