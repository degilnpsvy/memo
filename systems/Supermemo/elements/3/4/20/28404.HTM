<H1 lang=en id=firstHeading class=firstHeading style='OVERFLOW: visible; FONT-SIZE: 1.8em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(162,169,177) 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>Closure (computer programming)</H1>
<DIV id=bodyContent class=mw-body-content style="FONT-SIZE: 0.87em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(34,34,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; Z-INDEX: 0; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px">
<DIV id=siteSub style="FONT-SIZE: 12px; DISPLAY: block">From Wikipedia, the free encyclopedia</DIV>
<DIV id=contentSub style="FONT-SIZE: 11px; WIDTH: auto; COLOR: rgb(84,84,84); MARGIN: 0px 0px 1.4em 1em; LINE-HEIGHT: 1.2em"></DIV>
<DIV id=jump-to-nav class=mw-jump style="OVERFLOW: hidden; MARGIN-BOTTOM: 1.4em; HEIGHT: 0px; ZOOM: 1; MARGIN-TOP: -1.4em; user-select: none"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#mw-head"></A><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#p-search"></A></DIV>
<DIV lang=en id=mw-content-text class=mw-content-ltr style="DIRECTION: ltr" dir=ltr>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">For other uses, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (mathematics)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(mathematics)">Closure (mathematics)</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (disambiguation)" class="mw-redirect mw-disambig" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(disambiguation)">Closure (disambiguation)</A>.</DIV>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em; MARGIN-TOP: -0.5em">Not to be confused with the programming language<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Clojure style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Clojure">Clojure</A>.</DIV>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Programming language" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Programming_language">programming languages</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>closures</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(also<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lexical closures</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>function closures</B>) are techniques for implementing<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lexically scoped" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lexically_scoped">lexically scoped</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">name binding</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in languages with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Operational semantics" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Operational_semantics">Operationally</A>, a closure is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Record (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Record_(computer_science)">record</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>storing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_(computer_science)">function</A><SUP id=cite_ref-1 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-1">[a]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>together with an environment:<SUP id=cite_ref-2 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-2">[1]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>a mapping associating each<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Free variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Free_variable">free variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the function (variables that are used locally, but defined in an enclosing scope) with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Value (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Value_(computer_science)">value</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Reference (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Reference_(computer_science)">reference</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to which the name was bound when the closure was created.<SUP id=cite_ref-3 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-3">[b]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>A closure&#8212;unlike a plain function&#8212;allows the function to access those<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>captured variables</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>through the closure's copies of their values or references, even when the function is invoked outside their scope.</P>
<P style="MARGIN: 0.5em 0px"><B>Example.</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>The following program fragment defines a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Higher-order function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Higher-order_function">higher-order function</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">startAt</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Parameter (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Parameter_(computer_science)">parameter</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Nested function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Nested_function">nested function</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT>. The nested function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT>, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in the lexical scope of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT>, even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not local to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT>. The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">startAt</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a closure containing a copy of the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a copy of the reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>from this invocation</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">startAt</TT>, and the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT>, which adds the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">y</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT>:</P><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250)"><B>function</B> startAt(x)
   <B>function</B> incrementBy(y)
       <B>return</B> x + y
   <B>return</B> incrementBy

<B>variable</B> closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">1</SUB> = startAt(1)
<B>variable</B> closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUB> = startAt(5)
</PRE>
<P style="MARGIN: 0.5em 0px">Note that, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">startAt</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a function, the variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">1</SUB></TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUB></TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>are of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function type" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_type">function type</A>. Invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">1</SUB>(3) (Meaning y=3)</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">4</TT>, while invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUB>(3) (Meaning y=3)</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">8</TT>. While<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">1</SUB></TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">closure<SUB style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUB></TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to the same function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">incrementBy</TT>, the associated environments differ, and invoking the closures will bind the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to two distinct variables with different values in the two invocations, thus evaluating the function to different results.</P>
<P style="MARGIN: 0.5em 0px"></P>
<DIV id=toc class=toc style="FONT-SIZE: 13px; BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; ZOOM: 1; PADDING-BOTTOM: 7px; PADDING-TOP: 7px; PADDING-LEFT: 7px; BORDER-LEFT: rgb(162,169,177) 1px solid; DISPLAY: table; PADDING-RIGHT: 7px; BACKGROUND-COLOR: rgb(248,249,250)">
<DIV id=toctitle style="DIRECTION: ltr; TEXT-ALIGN: center">
<H2 style="OVERFLOW: hidden; FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: sans-serif; BORDER-RIGHT: 0px; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; BORDER-LEFT: 0px; DISPLAY: inline; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px">Contents</H2><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctoggle style="FONT-SIZE: 12px; user-select: none">&nbsp;[<A role=button tabIndex=0 id=togglelink style="CURSOR: pointer; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)">hide</A>]&nbsp;</SPAN></DIV>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-1 tocsection-1" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#History_and_etymology"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">History and etymology</SPAN></A></LI>
<LI class="toclevel-1 tocsection-2" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Anonymous_functions"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Anonymous functions</SPAN></A></LI>
<LI class="toclevel-1 tocsection-3" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Applications"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Applications</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-4" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#First-class_functions"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">First-class functions</SPAN></A></LI>
<LI class="toclevel-2 tocsection-5" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#State_representation"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">State representation</SPAN></A></LI>
<LI class="toclevel-2 tocsection-6" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Other_uses"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3.3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Other uses</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-7" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Implementation_and_theory"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Implementation and theory</SPAN></A></LI>
<LI class="toclevel-1 tocsection-8" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Differences_in_semantics"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Differences in semantics</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-9" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Lexical_environment"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">5.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Lexical environment</SPAN></A></LI>
<LI class="toclevel-2 tocsection-10" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Closure_leaving"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">5.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Closure leaving</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-11" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Closure-like_constructs"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Closure-like constructs</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-12" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Callbacks_.28C.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Callbacks (C)</SPAN></A></LI>
<LI class="toclevel-2 tocsection-13" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Local_classes_and_lambda_functions_.28Java.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Local classes and lambda functions (Java)</SPAN></A></LI>
<LI class="toclevel-2 tocsection-14" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Blocks_.28C.2C_C.2B.2B.2C_Objective-C_2.0.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Blocks (C, C++, Objective-C 2.0)</SPAN></A></LI>
<LI class="toclevel-2 tocsection-15" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Delegates_.28C.23.2C_D.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Delegates (C#, D)</SPAN></A></LI>
<LI class="toclevel-2 tocsection-16" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Function_objects_.28C.2B.2B.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Function objects (C++)</SPAN></A></LI>
<LI class="toclevel-2 tocsection-17" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Inline_agents_.28Eiffel.29"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.6</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Inline agents (Eiffel)</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-18" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#See_also"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">7</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">See also</SPAN></A></LI>
<LI class="toclevel-1 tocsection-19" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Notes"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">8</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Notes</SPAN></A></LI>
<LI class="toclevel-1 tocsection-20" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#References"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">References</SPAN></A></LI>
<LI class="toclevel-1 tocsection-21" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#External_links"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">10</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">External links</SPAN></A></LI></UL></DIV>
<P style="MARGIN: 0.5em 0px"></P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=History_and_etymology class=mw-headline>History and etymology</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: History and etymology" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=1">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">The concept of closures was developed in the 1960s for the mechanical evaluation of expressions in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=&#923;-calculus class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/%CE%9B-calculus">&#955;-calculus</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and was first<SUP class="noprint Inline-Template Template-Fact" style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Citation needed" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><SPAN title="This claim needs references to reliable sources. (February 2015)">citation needed</SPAN></A></I>]</SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>fully implemented in 1970 as a language feature in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Rpal class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Rpal">PAL</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>programming language to support lexically scoped<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</A>.<SUP id=cite_ref-4 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-4">[2]</A></SUP><SUP class="noprint Inline-Template" style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title=Wikipedia:Verifiability style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wikipedia:Verifiability"><SPAN title="only claims PAL has first-class functions and does not mention closures explicitly (May 2015)">not in citation given</SPAN></A></I>]</SUP></P>
<P style="MARGIN: 0.5em 0px"><A title="Peter J. Landin" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Peter_J._Landin">Peter J. Landin</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined the term<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>closure</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in 1964 as having an<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>environment part</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>control part</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>as used by his<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="SECD machine" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/SECD_machine">SECD machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for evaluating expressions.<SUP id=cite_ref-5 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-5">[3]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Joel Moses" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Joel_Moses">Joel Moses</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>credits Landin with introducing the term<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>closure</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function">lambda expression</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose open bindings (free variables) have been closed by (or bound in) the lexical environment, resulting in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>closed expression</I>, or closure.<SUP id=cite_ref-6 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-6">[4]</A></SUP><SUP id=cite_ref-7 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-7">[5]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>This usage was subsequently adopted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Gerald Jay Sussman" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Gerald_Jay_Sussman">Sussman</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Guy L. Steele, Jr." class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Guy_L._Steele,_Jr.">Steele</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>when they defined<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in 1975,<SUP id=cite_ref-8 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-8">[6]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>a lexically scoped variant of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=LISP class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/LISP">LISP</A>, and became widespread.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Anonymous_functions class=mw-headline>Anonymous functions</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Anonymous functions" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=2">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Further information:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function">Anonymous function</A></DIV>
<P style="MARGIN: 0.5em 0px">The term<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>closure</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is often mistakenly used to mean<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function</A>. This is probably because many programmers learn about both concepts at the same time, in the form of small helper functions that are anonymous closures. An anonymous function is a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Literal (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Literal_(computer_programming)">literal</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>without a name, while a closure is an instance of a function, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Value (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Value_(computer_science)">value</A>, whose non-local variables have been bound either to values or to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(computer_science)">storage locations</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(depending on the language; see the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#Lexical_environment">lexical environment</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>section below).</P>
<P style="MARGIN: 0.5em 0px">For example, in the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Python (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Python_(programming_language)">Python</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>code:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>):</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">g</SPAN><SPAN class=p>(</SPAN><SPAN class=n>y</SPAN><SPAN class=p>):</SPAN>
        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>y</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>g</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">h</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>):</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>:</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>y</SPAN>

<SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>)</SPAN>
<SPAN class=n>b</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>h</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>)</SPAN>
<SPAN class=n>f</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>)(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">5</SPAN><SPAN class=p>)</SPAN>
<SPAN class=n>h</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>)(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">5</SPAN><SPAN class=p>)</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are closures&#8212;or rather, variables with a closure as value&#8212;in both cases produced by returning a nested function with a free variable from an enclosing function, so that the free variable binds to the parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the enclosing function. However, in the first case the nested function has a name,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">g</CODE>, while in the second case the nested function is anonymous. The closures need not be assigned to a variable, and can be used directly, as in the last lines&#8212;the original name (if any) used in defining them is irrelevant. This usage may be deemed an "anonymous closure".</P>
<P style="MARGIN: 0.5em 0px">Note especially that the nested function definitions are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>themselves</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>closures: they have a free variable, which is not yet bound. Only once the enclosing function is evaluated with a value for the parameter is the free variable of the nested function bound, creating a closure, which is then returned from the enclosing function.</P>
<P style="MARGIN: 0.5em 0px">Lastly, a closure is only distinct from a function with free variables when outside of the scope of the non-local variables, otherwise the defining environment and the execution environment coincide and there is nothing to distinguish these (static and dynamic binding can't be distinguished because the names resolve to the same values). For example, in the below program, functions with a free variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(bound to the non-local variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with global scope) are executed in the same environment where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined, so it is immaterial whether these are actually closures:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN>
<SPAN class=n>l</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=p>]</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>(</SPAN><SPAN class=n>y</SPAN><SPAN class=p>):</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>y</SPAN>

<SPAN class=nb style="COLOR: rgb(0,128,0)">map</SPAN><SPAN class=p>(</SPAN><SPAN class=n>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>l</SPAN><SPAN class=p>)</SPAN>
<SPAN class=nb style="COLOR: rgb(0,128,0)">map</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>:</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>l</SPAN><SPAN class=p>)</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">This is most often achieved by a function return, since the function must be defined<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>within</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the scope of the non-local variables, in which case typically its own scope will be smaller.</P>
<P style="MARGIN: 0.5em 0px">This can also be achieved by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable shadowing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_shadowing">variable shadowing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which reduces the scope of the non-local variable), though this is less common in practice, as it is less useful and shadowing is discouraged. In this example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be seen to be a closure because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the body of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the global namespace, not the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>local to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">g</CODE>:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>(</SPAN><SPAN class=n>y</SPAN><SPAN class=p>):</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>y</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">g</SPAN><SPAN class=p>(</SPAN><SPAN class=n>z</SPAN><SPAN class=p>):</SPAN>
    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># local x shadows global x</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>(</SPAN><SPAN class=n>z</SPAN><SPAN class=p>)</SPAN>

<SPAN class=n>g</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>)</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># evaluates to 1, not 2</SPAN>
</PRE></DIV>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Applications class=mw-headline>Applications</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Applications" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=3">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">The use of closures is associated with languages where functions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class object" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_object">first-class objects</A>, in which functions can be returned as results from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Higher-order function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Higher-order_function">higher-order functions</A>, or passed as arguments to other function calls; if functions with free variables are first-class, then returning one creates a closure. This includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Functional programming languages" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Functional_programming_languages">functional programming languages</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lisp (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ML (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ML_(programming_language)">ML</A>, as well as many modern<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Garbage collection (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">garbage-collected</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>imperative languages, such as Python. Closures are also frequently used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Callback (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Callback_(computer_programming)">callbacks</A>, particularly for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Event handler" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Event_handler">event handlers</A>, such as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=JavaScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</A>, where they are used for interactions with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dynamic web page" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dynamic_web_page">dynamic web page</A>. Traditional imperative languages such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Algol (programming language)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Algol_(programming_language)">Algol</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pascal (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>either do not support nested functions (C) or do not support calling nested functions after the enclosing function has exited (GNU C, Pascal), thus avoiding the need to use closures.</P>
<P style="MARGIN: 0.5em 0px">Closures are used to implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Continuation-passing style" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Continuation-passing_style">continuation-passing style</A>, and in this manner,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Information hiding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Information_hiding">hide state</A>. Constructs such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object_(computer_science)">objects</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Control structure" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Control_structure">control structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>can thus be implemented with closures. In some languages, a closure may occur when a function is defined within another function, and the inner function refers to local variables of the outer function. At<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Run time (program lifecycle phase)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)">run-time</A>, when the outer function executes, a closure is formed, consisting of the inner function&#8217;s code and references (the upvalues) to any variables of the outer function required by the closure.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=First-class_functions class=mw-headline>First-class functions</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: First-class functions" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=4">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Further information:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_function">First-class function</A></DIV>
<P style="MARGIN: 0.5em 0px">Closures typically appear in languages in which functions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class object" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_object">first-class values</A>&#8212;in other words, such languages enable functions to be passed as arguments, returned from function calls, bound to variable names, etc., just like simpler types such as strings and integers. For example, consider the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>function:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; Return a list of all books with at least THRESHOLD copies sold.</SPAN>
<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">best-selling-books</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">threshold</SPAN><SPAN class=p>)</SPAN>
  <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">filter</SPAN>
    <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">book</SPAN><SPAN class=p>)</SPAN>
      <SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">&gt;= </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">book-sales</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">book</SPAN><SPAN class=p>)</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">threshold</SPAN><SPAN class=p>))</SPAN>
    <SPAN class=nv style="COLOR: rgb(25,23,124)">book-list</SPAN><SPAN class=p>))</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">In this example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lambda (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lambda_(programming)">lambda expression</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">(lambda (book) (&gt;= (book-sales book) threshold))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears within the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">best-selling-books</CODE>. When the lambda expression is evaluated, Scheme creates a closure consisting of the code for the lambda expression and a reference to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">threshold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable, which is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Free variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Free_variable">free variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>inside the lambda expression.</P>
<P style="MARGIN: 0.5em 0px">The closure is then passed to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, which calls it repeatedly to determine which books are to be added to the result list and which are to be discarded. Because the closure itself has a reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">threshold</CODE>, it can use that variable each time<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls it. The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself might be defined in a completely separate file.</P>
<P style="MARGIN: 0.5em 0px">Here is the same example rewritten in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=JavaScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</A>, another popular language with support for closures:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// Return a list of all books with at least 'threshold' copies sold.</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>bestSellingBooks</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>threshold</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=nx>bookList</SPAN><SPAN class=p>.</SPAN><SPAN class=nx>filter</SPAN><SPAN class=p>(</SPAN>
      <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=p>(</SPAN><SPAN class=nx>book</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=nx>book</SPAN><SPAN class=p>.</SPAN><SPAN class=nx>sales</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&gt;=</SPAN> <SPAN class=nx>threshold</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>}</SPAN>
    <SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">function</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is used here instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">lambda</CODE>, and an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">Array.filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method<SUP id=cite_ref-9 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-9">[7]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of a global<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, but otherwise the structure and the effect of the code are the same.</P>
<P style="MARGIN: 0.5em 0px">A function may create a closure and return it, as in the following example:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// Return a function that approximates the derivative of f</SPAN>
<SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// using an interval of dx, which should be appropriately small.</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>derivative</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=nx>dx</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=p>(</SPAN><SPAN class=nx>x</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=p>(</SPAN><SPAN class=nx>f</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=nx>dx</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">-</SPAN> <SPAN class=nx>f</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>x</SPAN><SPAN class=p>))</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">/</SPAN> <SPAN class=nx>dx</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=p>};</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Because the closure in this case outlives the execution of the function that creates it, the variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">dx</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>live on after the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">derivative</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, even though execution has left their scope and they are no longer visible. In languages without closures, the lifetime of an automatic local variable coincides with the execution of the stack frame where that variable is declared. In languages with closures, variables must continue to exist as long as any existing closures have references to them. This is most commonly implemented using some form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Garbage collection (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">garbage collection</A>.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=State_representation class=mw-headline>State representation</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: State representation" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=5">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">A closure can be used to associate a function with a set of "private" variables, which persist over several invocations of the function. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scope (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(programming)">scope</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the variable encompasses only the closed-over function, so it cannot be accessed from other program code.</P>
<P style="MARGIN: 0.5em 0px">In stateful languages, closures can thus be used to implement paradigms for state representation and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Information hiding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Information_hiding">information hiding</A>, since the closure's upvalues (its closed-over variables) are of indefinite<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)#Scope_and_extent">extent</A>, so a value established in one invocation remains available in the next. Closures used in this way no longer have<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Referential transparency (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Referential_transparency_(computer_science)">referential transparency</A>, and are thus no longer<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pure function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pure_function">pure functions</A>; nevertheless, they are commonly used in impure functional languages such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A>.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Other_uses class=mw-headline>Other uses</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Other uses" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=6">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Closures have many uses:</P>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">Because closures delay evaluation&#8212;i.e., they do not "do" anything until they are called&#8212;they can be used to define control structures. For example, all of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Smalltalk style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</A>'s standard control structures, including branches (if/then/else) and loops (while and for), are defined using objects whose methods accept closures. Users can easily define their own control structures also.</LI>
<LI style="MARGIN-BOTTOM: 0.1em">In languages which implement assignment, multiple functions can be produced that close over the same environment, enabling them to communicate privately by altering that environment. In Scheme:</LI></UL>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">foo</SPAN> <SPAN class=no style="COLOR: rgb(136,0,0)">#f</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">bar</SPAN> <SPAN class=no style="COLOR: rgb(136,0,0)">#f</SPAN><SPAN class=p>)</SPAN>

<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">let </SPAN><SPAN class=p>((</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">secret-message</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"none"</SPAN><SPAN class=p>))</SPAN>
  <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">set! </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">foo</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">msg</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">set! </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">secret-message</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">msg</SPAN><SPAN class=p>)))</SPAN>
  <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">set! </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">bar</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>()</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">secret-message</SPAN><SPAN class=p>)))</SPAN>

<SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">display </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN><SPAN class=p>))</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; prints "none"</SPAN>
<SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">newline</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"meet me by the docks at midnight"</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">display </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN><SPAN class=p>))</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; prints "meet me by the docks at midnight"</SPAN>
</PRE></DIV>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">Closures can be used to implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object-oriented programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object-oriented_programming">object</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>systems.<SUP id=cite_ref-10 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-10">[8]</A></SUP></LI></UL>
<P style="MARGIN: 0.5em 0px">Note: Some speakers call any data structure that binds a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scope (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(programming)#Lexical_scoping">lexical</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment a closure, but the term usually refers specifically to functions.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Implementation_and_theory class=mw-headline>Implementation and theory</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Implementation and theory" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=7">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Closures are typically implemented with a special<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Data structure" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Data_structure">data structure</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>that contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function pointer" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_pointer">pointer to the function code</A>, plus a representation of the function's lexical environment (i.e., the set of available variables) at the time when the closure was created. The referencing environment<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">binds</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>the non-local names to the corresponding variables in the lexical environment at the time the closure is created, additionally extending their lifetime to at least as long as the lifetime of the closure itself. When the closure is<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>entered</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>at a later time, possibly with a different lexical environment, the function is executed with its non-local variables referring to the ones captured by the closure, not the current environment.</P>
<P style="MARGIN: 0.5em 0px">A language implementation cannot easily support full closures if its run-time memory model allocates all<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Automatic variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Automatic_variable">automatic variables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a linear<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Stack-based memory allocation" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation">stack</A>. In such languages, a function's automatic local variables are deallocated when the function returns. However, a closure requires that the free variables it references survive the enclosing function's execution. Therefore, those variables must be allocated so that they persist until no longer needed, typically via<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Heap allocation" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Heap_allocation">heap allocation</A>, rather than on the stack, and their lifetime must be managed so they survive until all closures referencing them have are no longer in use.</P>
<P style="MARGIN: 0.5em 0px">This explains why, typically, languages that natively support closures also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Garbage collection (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">garbage collection</A>. The alternatives are manual memory management of non-local variables (explicitly allocating on the heap and freeing when done), or, if using stack allocation, for the language to accept that certain use cases will lead to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Undefined behaviour" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Undefined_behaviour">undefined behaviour</A>, due to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dangling pointer" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dangling_pointer">dangling pointers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to freed automatic variables, as in lambda expressions in C++11<SUP id=cite_ref-11 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-11">[9]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or nested functions in GNU C.<SUP id=cite_ref-12 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-12">[10]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Funarg problem" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Funarg_problem">funarg problem</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or "functional argument" problem) describes the difficulty of implementing functions as first class objects in a stack-based programming language such as C or C++. Similarly in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="D (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/D_(programming_language)">D</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>version 1, it is assumed that the programmer knows what to do with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Delegation (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Delegation_(programming)">delegates</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and automatic local variables, as their references will be invalid after return from its definition scope (automatic local variables are on the stack) &#8211; this still permits many useful functional patterns, but for complex cases needs explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Heap allocation" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Heap_allocation">heap allocation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for variables. D version 2 solved this by detecting which variables must be stored on the heap, and performs automatic allocation. Because D uses garbage collection, in both versions, there is no need to track usage of variables as they are passed.</P>
<P style="MARGIN: 0.5em 0px">In strict functional languages with immutable data (<I>e.g.</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Erlang (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</A>), it is very easy to implement automatic memory management (garbage collection), as there are no possible cycles in variables' references. For example, in Erlang, all arguments and variables are allocated on the heap, but references to them are additionally stored on the stack. After a function returns, references are still valid. Heap cleaning is done by incremental garbage collector.</P>
<P style="MARGIN: 0.5em 0px">In ML, local variables are lexically scoped, and hence define a stack-like model, but since they are bound to values and not to objects, an implementation is free to copy these values into the closure's data structure in a way that is invisible to the programmer.</P>
<P style="MARGIN: 0.5em 0px"><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A>, which has an<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=ALGOL style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</A>-like lexical scope system with dynamic variables and garbage collection, lacks a stack programming model and does not suffer from the limitations of stack-based languages. Closures are expressed naturally in Scheme. The lambda form encloses the code, and the free variables of its environment persist within the program as long as they can possibly be accessed, and so they can be used as freely as any other Scheme expression.<SUP class="noprint Inline-Template Template-Fact" style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Citation needed" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><SPAN title="This claim needs references to reliable sources. (December 2014)">citation needed</SPAN></A></I>]</SUP></P>
<P style="MARGIN: 0.5em 0px">Closures are closely related to Actors in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Actor model" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Actor_model">Actor model</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of concurrent computation where the values in the function's lexical environment are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>acquaintances</I>. An important issue for closures in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Concurrent programming" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Concurrent_programming">concurrent programming</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>languages is whether the variables in a closure can be updated and, if so, how these updates can be synchronized. Actors provide one solution.<SUP id=cite_ref-13 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-13">[11]</A></SUP></P>
<P style="MARGIN: 0.5em 0px">Closures are closely related to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function object" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_object">function objects</A>; the transformation from the former to the latter is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Defunctionalization style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Defunctionalization">defunctionalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lambda lifting" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lambda_lifting">lambda lifting</A>; see also<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure conversion" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_conversion">closure conversion</A>.<SUP class="noprint Inline-Template Template-Fact" style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Citation needed" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><SPAN title="This claim needs references to reliable sources. (September 2011)">citation needed</SPAN></A></I>]</SUP></P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Differences_in_semantics class=mw-headline>Differences in semantics</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Differences in semantics" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=8">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Lexical_environment class=mw-headline>Lexical environment</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Lexical environment" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=9">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">As different languages do not always have a common definition of the lexical environment, their definitions of closure may vary also. The commonly held minimalist definition of the lexical environment defines it as a set of all<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">bindings of variables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the scope, and that is also what closures in any language have to capture. However the meaning of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)">variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>binding also differs. In imperative languages, variables bind to relative locations in memory that can store values. Although the relative location of a binding does not change at runtime, the value in the bound location can. In such languages, since closure captures the binding, any operation on the variable, whether done from the closure or not, are performed on the same relative memory location. This is often called capturing the variable "by reference". Here is an example illustrating the concept in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=ECMAScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ECMAScript">ECMAScript</A>, which is one such language:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// ECMAScript</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=nx>g</SPAN><SPAN class=p>;</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>foo</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>x</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=nx>f</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">++</SPAN><SPAN class=nx>x</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>};</SPAN>
  <SPAN class=nx>g</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">--</SPAN><SPAN class=nx>x</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>};</SPAN>
  <SPAN class=nx>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=s1 style="COLOR: rgb(186,33,33)">'inside foo, call to f(): '</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=nx>f</SPAN><SPAN class=p>());</SPAN>
<SPAN class=p>}</SPAN>
<SPAN class=nx>foo</SPAN><SPAN class=p>();</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// 2</SPAN>
<SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=s1 style="COLOR: rgb(186,33,33)">'call to g(): '</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=nx>g</SPAN><SPAN class=p>());</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// 1</SPAN>
<SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=s1 style="COLOR: rgb(186,33,33)">'call to f(): '</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=nx>f</SPAN><SPAN class=p>());</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// 2</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Note how function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the closures referred to by variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">g</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>all use the same relative memory location signified by local variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE>.</P>
<P style="MARGIN: 0.5em 0px">On the other hand, many functional languages, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ML (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ML_(programming_language)">ML</A>, bind variables directly to values. In this case, since there is no way to change the value of the variable once it is bound, there is no need to share the state between closures&#8212;they just use the same values. This is often called capturing the variable "by value". Java's local and anonymous classes also fall into this category&#8212;they require captured local variables to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">final</CODE>, which also means there is no need to share state.</P>
<P style="MARGIN: 0.5em 0px">Some languages enable you to choose between capturing the value of a variable or its location. For example, in C++11, captured variables are either declared with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">[&amp;]</CODE>, which means captured by reference, or with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">[=]</CODE>, which means captured by value.</P>
<P style="MARGIN: 0.5em 0px">Yet another subset,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lazy evaluation" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>functional languages such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Haskell (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</A>, bind variables to results of future computations rather than values. Consider this example in Haskell:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">-- Haskell</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">::</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">Fractional</SPAN> <SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=&gt;</SPAN> <SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">-&gt;</SPAN> <SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">-&gt;</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">-&gt;</SPAN> <SPAN class=n>a</SPAN><SPAN class=p>)</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN> <SPAN class=n>x</SPAN> <SPAN class=n>y</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">\</SPAN><SPAN class=n>z</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">-&gt;</SPAN> <SPAN class=n>z</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>r</SPAN><SPAN class=p>)</SPAN>
          <SPAN class=kr style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">where</SPAN> <SPAN class=n>r</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">/</SPAN> <SPAN class=n>y</SPAN>

<SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">::</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">Fractional</SPAN> <SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=&gt;</SPAN> <SPAN class=n>a</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">-&gt;</SPAN> <SPAN class=n>a</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=</SPAN> <SPAN class=n>foo</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN>

<SPAN class=nf style="COLOR: rgb(0,0,255)">main</SPAN> <SPAN class=ow style="FONT-WEIGHT: bold; COLOR: rgb(170,34,255)">=</SPAN> <SPAN class=n>print</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>f</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">123</SPAN><SPAN class=p>)</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">The binding of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>captured by the closure defined within function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to the computation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">(x / y)</CODE>&#8212;which in this case results in division by zero. However, since it is the computation that is captured, and not the value, the error only manifests itself when the closure is invoked, and actually attempts to use the captured binding.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Closure_leaving class=mw-headline>Closure leaving</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Closure leaving" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=10">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Yet more differences manifest themselves in the behavior of other lexically scoped constructs, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">continue</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements. Such constructs can, in general, be considered in terms of invoking an<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Escape continuation" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Escape_continuation">escape continuation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>established by an enclosing control statement (in case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">continue</CODE>, such interpretation requires looping constructs to be considered in terms of recursive function calls). In some languages, such as ECMAScript,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the continuation established by the closure lexically innermost with respect to the statement&#8212;thus, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>within a closure transfers control to the code that called it. However, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Smalltalk style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</A>, the superficially similar operator<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invokes the escape continuation established for the method invocation, ignoring the escape continuations of any intervening nested closures. The escape continuation of a particular closure can only be invoked in Smalltalk implicitly by reaching the end of the closure's code. The following examples in ECMAScript and Smalltalk highlight the difference:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c style="COLOR: rgb(64,128,128); FONT-STYLE: italic">"Smalltalk"</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">|</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)"> xs </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">|</SPAN>
  <SPAN class=nv style="COLOR: rgb(25,23,124)">xs</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=ss style="COLOR: rgb(25,23,124)">#(</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">3</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">4</SPAN><SPAN class=ss style="COLOR: rgb(25,23,124)">)</SPAN><SPAN class=p>.</SPAN>
  <SPAN class=nv style="COLOR: rgb(25,23,124)">xs</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">do:</SPAN> [<SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">|</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN>]<SPAN class=p>.</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">0</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN>
  <SPAN class=nf style="COLOR: rgb(0,0,255)">Transcript</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">show:</SPAN> (<SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">printString</SPAN>) <SPAN class=c style="COLOR: rgb(64,128,128); FONT-STYLE: italic">"prints 1"</SPAN>
</PRE></DIV>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// ECMAScript</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>foo</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>xs</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">4</SPAN><SPAN class=p>];</SPAN>
  <SPAN class=nx>xs</SPAN><SPAN class=p>.</SPAN><SPAN class=nx>forEach</SPAN><SPAN class=p>(</SPAN><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=p>(</SPAN><SPAN class=nx>x</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=nx>x</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>});</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
<SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>foo</SPAN><SPAN class=p>());</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// prints 0</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">The above code snippets will behave differently because the Smalltalk<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator and the JavaScript<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator are not analogous. In the ECMAScript example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return x</CODE>will leave the inner closure to begin a new iteration of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">forEach</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, whereas in the Smalltalk example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">^x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will abort the loop and return from the method<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">foo</CODE>.</P>
<P style="MARGIN: 0.5em 0px"><A title="Common Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a construct that can express either of the above actions: Lisp<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">(return-from foo x)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Smalltalk style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">^x</CODE>, while Lisp<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">(return-from nil x)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=JavaScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return x</CODE>. Hence, Smalltalk makes it possible for a captured escape continuation to outlive the extent in which it can be successfully invoked. Consider:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c style="COLOR: rgb(64,128,128); FONT-STYLE: italic">"Smalltalk"</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN>
    <SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN>[ <SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">|</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN> ]
<SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN>
    <SPAN class=nf style="COLOR: rgb(0,0,255)">|</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">f</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">|</SPAN>
    <SPAN class=nv style="COLOR: rgb(25,23,124)">f</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN><SPAN class=p>.</SPAN>
    <SPAN class=nv style="COLOR: rgb(25,23,124)">f</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">value:</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">123</SPAN> <SPAN class=c style="COLOR: rgb(64,128,128); FONT-STYLE: italic">"error!"</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">When the closure returned by the method<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked, it attempts to return a value from the invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the closure. Since that call has already returned and the Smalltalk method invocation model does not follow the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Spaghetti stack" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Spaghetti_stack">spaghetti stack</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>discipline to facilitate multiple returns, this operation results in an error.</P>
<P style="MARGIN: 0.5em 0px">Some languages, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Ruby (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Ruby_(programming_language)">Ruby</A>, enable the programmer to choose the way<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is captured. An example in Ruby:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># Ruby</SPAN>

<SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># Closure using a Proc</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN>
  <SPAN class=n>f</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=no style="COLOR: rgb(136,0,0)">Proc</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>new</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=s2 style="COLOR: rgb(186,33,33)">"return from foo from inside proc"</SPAN> <SPAN class=p>}</SPAN>
  <SPAN class=n>f</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>call</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># control leaves foo here</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=s2 style="COLOR: rgb(186,33,33)">"return from foo"</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN>

<SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># Closure using a lambda</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN>
  <SPAN class=n>f</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">lambda</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=s2 style="COLOR: rgb(186,33,33)">"return from lambda"</SPAN> <SPAN class=p>}</SPAN>
  <SPAN class=n>f</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>call</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># control does not leave bar here</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=s2 style="COLOR: rgb(186,33,33)">"return from bar"</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN>

<SPAN class=nb style="COLOR: rgb(0,128,0)">puts</SPAN> <SPAN class=n>foo</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># prints "return from foo from inside proc"</SPAN>
<SPAN class=nb style="COLOR: rgb(0,128,0)">puts</SPAN> <SPAN class=n>bar</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># prints "return from bar"</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">Proc.new</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this example are ways to create a closure, but semantics of the closures thus created are different with respect to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement.</P>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A>, definition and scope of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>control statement is explicit (and only arbitrarily named 'return' for the sake of the example). The following is a direct translation of the Ruby sample.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; Scheme</SPAN>
<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">call/cc</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">call-with-current-continuation</SPAN><SPAN class=p>)</SPAN>

<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN><SPAN class=p>)</SPAN>
  <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">call/cc</SPAN>
   <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN><SPAN class=p>)</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"return from foo from inside proc"</SPAN><SPAN class=p>))</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>)</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; control leaves foo here</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"return from foo"</SPAN><SPAN class=p>))))</SPAN>

<SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN><SPAN class=p>)</SPAN>
  <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">call/cc</SPAN>
   <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN><SPAN class=p>)</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">define </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">call/cc </SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">lambda </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"return from lambda"</SPAN><SPAN class=p>))))</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>)</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; control does not leave bar here</SPAN>
     <SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">return</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">"return from bar"</SPAN><SPAN class=p>))))</SPAN>

<SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">display </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN><SPAN class=p>))</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; prints "return from foo from inside proc"</SPAN>
<SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">newline</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">display </SPAN><SPAN class=p>(</SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">bar</SPAN><SPAN class=p>))</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">; prints "return from bar"</SPAN>
</PRE></DIV>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Closure-like_constructs class=mw-headline>Closure-like constructs</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Closure-like constructs" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=11">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Features of some languages simulate some features of closures. Language features include some object-oriented techniques, for example in Java, C++, Objective-C, C#, D.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Callbacks_.28C.29 class=mw-headline>Callbacks (C)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Callbacks (C)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=12">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Some<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>libraries support<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Callback (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Callback_(computer_science)">callbacks</A>. This is sometimes implemented by providing two values when registering the callback with the library: a function pointer and a separate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">void*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer to arbitrary data of the user's choice. When the library executes the callback function, it passes along the data pointer. This enables the callback to maintain state and to refer to information captured at the time it was registered with the library. The idiom is similar to closures in functionality, but not in syntax.</P>
<P style="MARGIN: 0.5em 0px"><B>Nested function and function pointer(C)</B></P>
<P style="MARGIN: 0.5em 0px">With gcc extension, the nested function can be used and the function pointers to emulate closures:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=cp style="COLOR: rgb(188,122,0)">#include</SPAN> <SPAN class=cpf style="COLOR: rgb(64,128,128); FONT-STYLE: italic">"stdio.h"</SPAN>

<SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">adder</SPAN> <SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>number</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>add</SPAN> <SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>value</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>value</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=n>number</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>}</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n>add</SPAN><SPAN class=p>;</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// &amp; operator is optional here because the name of a function in C is a pointer pointing on itself</SPAN>
<SPAN class=p>}</SPAN>
     
<SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">main</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=p>(</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>add10</SPAN><SPAN class=p>)(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>adder</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">10</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>printf</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"%d"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>add10</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>));</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Local_classes_and_lambda_functions_.28Java.29 class=mw-headline>Local classes and lambda functions (Java)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Local classes and lambda functions (Java)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=13">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="Java (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Class (object-oriented programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Class_(object-oriented_programming)">classes</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be defined inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Method (object-oriented programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Method_(object-oriented_programming)">methods</A>. These are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>local classes</I>. When such classes are not named, they are known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>anonymous classes</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or anonymous<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>inner</I>classes). A local class (either named or anonymous) may refer to names in lexically enclosing classes, or read-only variables (marked as<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">final</TT>) in the lexically enclosing method.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">class</SPAN> <SPAN class=nc style="FONT-WEIGHT: bold; COLOR: rgb(0,0,255)">CalculationWindow</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">extends</SPAN> <SPAN class=n>JFrame</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">private</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">volatile</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>result</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">...</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">calculateInSeparateThread</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">final</SPAN> <SPAN class=n>URI</SPAN> <SPAN class=n>uri</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// The expression "new Runnable() { ... }" is an anonymous class implementing the 'Runnable' interface.</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">new</SPAN> <SPAN class=n>Thread</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN>
      <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">new</SPAN> <SPAN class=n>Runnable</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
        <SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">run</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
          <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// It can read final local variables:</SPAN>
          <SPAN class=n>calculate</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>uri</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">);</SPAN>
          <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// It can access private fields of the enclosing class:</SPAN>
          <SPAN class=n>result</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>result</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">10</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
        <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
      <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
    <SPAN class=o style="COLOR: rgb(102,102,102)">).</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">start</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">();</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
<SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">The capturing of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">final</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables enables you to capture variables by value. Even if the variable you want to capture is non-<TT style="FONT-FAMILY: monospace, Courier">final</TT>, you can always copy it to a temporary<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">final</TT>variable just before the class.</P>
<P style="MARGIN: 0.5em 0px">Capturing of variables by reference can be emulated by using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">final</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>reference to a mutable container, for example, a single-element array. The local class will not be able to change the value of the container reference itself, but it will be able to change the contents of the container.</P>
<P style="MARGIN: 0.5em 0px">With the advent of Java 8's lambda expressions,<SUP id=cite_ref-14 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-14">[12]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>the closure causes the above code to be executed as:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">class</SPAN> <SPAN class=nc style="FONT-WEIGHT: bold; COLOR: rgb(0,0,255)">CalculationWindow</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">extends</SPAN> <SPAN class=n>JFrame</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">private</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">volatile</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>result</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">...</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">calculateInSeparateThread</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">final</SPAN> <SPAN class=n>URI</SPAN> <SPAN class=n>uri</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// the code () -&gt; { /* code */ } is a closure</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">new</SPAN> <SPAN class=n>Thread</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">-&gt;</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
        <SPAN class=n>calculate</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>uri</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">);</SPAN>
        <SPAN class=n>result</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>result</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">10</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
    <SPAN class=o style="COLOR: rgb(102,102,102)">}).</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">start</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">();</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
<SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Local classes are one of the types of inner class that are declared within the body of a method. Java also supports inner classes that are declared as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>non-static members</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of an enclosing class.<SUP id=cite_ref-15 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-15">[13]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>They are normally referred to just as "inner classes".<SUP id=cite_ref-16 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-16">[14]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>These are defined in the body of the enclosing class and have full access to instance variables of the enclosing class. Due to their binding to these instance variables, an inner class may only be instantiated with an explicit binding to an instance of the enclosing class using a special syntax.<SUP id=cite_ref-17 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-17">[15]</A></SUP></P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">class</SPAN> <SPAN class=nc style="FONT-WEIGHT: bold; COLOR: rgb(0,0,255)">EnclosingClass</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
  <SPAN class=cm style="COLOR: rgb(64,128,128); FONT-STYLE: italic">/* Define the inner class */</SPAN>
  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">class</SPAN> <SPAN class=nc style="FONT-WEIGHT: bold; COLOR: rgb(0,0,255)">InnerClass</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">incrementAndReturnCounter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
      <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>counter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">++;</SPAN>
    <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>

  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">private</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>counter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>

  <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=n>counter</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>

  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">getCounter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>counter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>

  <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">static</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">main</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>String</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">[]</SPAN> <SPAN class=n>args</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
    <SPAN class=n>EnclosingClass</SPAN> <SPAN class=n>enclosingClassInstance</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">new</SPAN> <SPAN class=n>EnclosingClass</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">();</SPAN>
    <SPAN class=cm style="COLOR: rgb(64,128,128); FONT-STYLE: italic">/* Instantiate the inner class, with binding to the instance */</SPAN>
    <SPAN class=n>EnclosingClass</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">InnerClass</SPAN> <SPAN class=n>innerClassInstance</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN>
      <SPAN class=n>enclosingClassInstance</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">new</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">InnerClass</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">();</SPAN>

    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">for</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>enclosingClassInstance</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">getCounter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">();</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN>
    <SPAN class=n>innerClassInstance</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">incrementAndReturnCounter</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">())</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&lt;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">10</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
      <SPAN class=n>System</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">out</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">println</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>i</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">);</SPAN>
    <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
<SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Upon execution, this will print the integers from 0 to 9. Beware to not confuse this type of class with the nested class, which is declared in the same way with an accompanied usage of the "static" modifier; those have not the desired effect but are instead just classes with no special binding defined in an enclosing class.</P>
<P style="MARGIN: 0.5em 0px">As of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Java version history" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Java_version_history#Java_8">Java 8</A>, Java supports functions as first class objects. Lambda expressions of this form are considered of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">Function&lt;T,U&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with T being the domain and U the image type. The expression can be called with its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">.apply(T t)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, but not with a standard method call.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">public</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">static</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">main</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=n>String</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">[]</SPAN> <SPAN class=n>args</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN>
  <SPAN class=n>Function</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=n>String</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">,</SPAN><SPAN class=n>Integer</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&gt;</SPAN> <SPAN class=n>length</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>s</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">-&gt;</SPAN> <SPAN class=n>s</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">length</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
  
  <SPAN class=n>System</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">out</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">println</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN> <SPAN class=n>length</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=na style="COLOR: rgb(125,144,41)">apply</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"Hello, world!"</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">)</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">);</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// Will print 13.</SPAN>
<SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
</PRE></DIV>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Blocks_.28C.2C_C.2B.2B.2C_Objective-C_2.0.29 class=mw-headline>Blocks (C, C++, Objective-C 2.0)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Blocks (C, C++, Objective-C 2.0)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=14">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Main article:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Blocks (C language extension)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Blocks_(C_language_extension)">Blocks (C language extension)</A></DIV>
<P style="MARGIN: 0.5em 0px"><A title="Apple Inc." style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Apple_Inc.">Apple</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>introduced<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><A title="Blocks (C language extension)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Blocks_(C_language_extension)">Blocks</A></B>, a form of closure, as a nonstandard extension into<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=C++ style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Objective-C 2.0" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Objective-C_2.0">Objective-C 2.0</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Mac OS X Snow Leopard" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Mac_OS_X_Snow_Leopard">Mac OS X 10.6 "Snow Leopard"</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="IOS (Apple)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/IOS_(Apple)">iOS 4.0</A>. Apple made their implementation available for the GCC and clang compilers.</P>
<P style="MARGIN: 0.5em 0px">Pointers to block and block literals are marked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">^</CODE>. Normal local variables are captured by value when the block is created, and are read-only inside the block. Variables to be captured by reference are marked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">__block</CODE>. Blocks that need to persist outside of the scope they are created in may need to be copied.<SUP id=cite_ref-18 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-18">[16]</A></SUP><SUP id=cite_ref-19 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_note-19">[17]</A></SUP></P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">typedef</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">int</SPAN> <SPAN class=p>(</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN><SPAN class=n>IntBlock</SPAN><SPAN class=p>)();</SPAN>

<SPAN class=n>IntBlock</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">downCounter</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>start</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
	 <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">__block</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>start</SPAN><SPAN class=p>;</SPAN>
	 <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=p>[[</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">^</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
		 <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>i</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">--</SPAN><SPAN class=p>;</SPAN>
	 <SPAN class=p>}</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">copy</SPAN><SPAN class=p>]</SPAN> <SPAN class=n>autorelease</SPAN><SPAN class=p>];</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=n>IntBlock</SPAN> <SPAN class=n>f</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>downCounter</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">5</SPAN><SPAN class=p>);</SPAN>
<SPAN class=n>NSLog</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">@"%d"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>());</SPAN>
<SPAN class=n>NSLog</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">@"%d"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>());</SPAN>
<SPAN class=n>NSLog</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">@"%d"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>f</SPAN><SPAN class=p>());</SPAN>
</PRE></DIV>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Delegates_.28C.23.2C_D.29 class=mw-headline>Delegates (C#, D)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Delegates (C#, D)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=15">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="C Sharp (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>anonymous methods and lambda expressions support closure:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kt style="COLOR: rgb(176,0,64)">var</SPAN> <SPAN class=n>data</SPAN> <SPAN class=p>=</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">new</SPAN><SPAN class=p>[]</SPAN> <SPAN class=p>{</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">4</SPAN><SPAN class=p>};</SPAN>
<SPAN class=kt style="COLOR: rgb(176,0,64)">var</SPAN> <SPAN class=n>multiplier</SPAN> <SPAN class=p>=</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>;</SPAN>
<SPAN class=kt style="COLOR: rgb(176,0,64)">var</SPAN> <SPAN class=n>result</SPAN> <SPAN class=p>=</SPAN> <SPAN class=n>data</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Select</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN> <SPAN class=p>=&gt;</SPAN> <SPAN class=n>x</SPAN> <SPAN class=p>*</SPAN> <SPAN class=n>multiplier</SPAN><SPAN class=p>);</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="D (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/D_(programming_language)">D</A>, closures are implemented by delegates, a function pointer paired with a context pointer (e.g. a class instance, or a stack frame on the heap in the case of closures).</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">auto</SPAN> <SPAN class=n>test1</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>a</SPAN> <SPAN class=p>=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">7</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">delegate</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>a</SPAN> <SPAN class=p>+</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>};</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// anonymous delegate construction</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">auto</SPAN> <SPAN class=n>test2</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>a</SPAN> <SPAN class=p>=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">20</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>foo</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>a</SPAN> <SPAN class=p>+</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">5</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>}</SPAN> <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// inner function</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=p>&amp;</SPAN><SPAN class=n>foo</SPAN><SPAN class=p>;</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// other way to construct delegate</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=n>bar</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">auto</SPAN> <SPAN class=n>dg</SPAN> <SPAN class=p>=</SPAN> <SPAN class=n>test1</SPAN><SPAN class=p>();</SPAN>
    <SPAN class=n>dg</SPAN><SPAN class=p>();</SPAN>    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// =10   // ok, test1.a is in a closure and still exists</SPAN>

    <SPAN class=n>dg</SPAN> <SPAN class=p>=</SPAN> <SPAN class=n>test2</SPAN><SPAN class=p>();</SPAN>
    <SPAN class=n>dg</SPAN><SPAN class=p>();</SPAN>    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// =25   // ok, test2.a is in a closure and still exists</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">D version 1, has limited closure support. For example, the above code will not work correctly, because the variable a is on the stack, and after returning from test(), it is no longer valid to use it (most probably calling foo via dg(), will return a 'random' integer). This can be solved by explicitly allocating the variable 'a' on heap, or using structs or class to store all needed closed variables and construct a delegate from a method implementing the same code. Closures can be passed to other functions, as long as they are only used while the referenced values are still valid (for example calling another function with a closure as a callback parameter), and are useful for writing generic data processing code, so this limitation, in practice, is often not an issue.</P>
<P style="MARGIN: 0.5em 0px">This limitation was fixed in D version 2 - the variable 'a' will be automatically allocated on the heap because it is used in the inner function, and a delegate of that function can escape the current scope (via assignment to dg or return). Any other local variables (or arguments) that are not referenced by delegates or that are only referenced by delegates that don't escape the current scope, remain on the stack, which is simpler and faster than heap allocation. The same is true for inner's class methods that references a function's variables.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Function_objects_.28C.2B.2B.29 class=mw-headline>Function objects (C++)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Function objects (C++)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=16">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title=C++ style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables defining<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function object" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_object">function objects</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by overloading<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">operator()</CODE>. These objects behave somewhat like functions in a functional programming language. They may be created at runtime and may contain state, but they do not implicitly capture local variables as closures do. As of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=C++11 style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C%2B%2B11">the 2011 revision</A>, the C++ language also supports closures, which are a type of function object constructed automatically from a special language construct called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>lambda-expression</I>. A C++ closure may capture its context either by storing copies of the accessed variables as members of the closure object or by reference. In the latter case, if the closure object escapes the scope of a referenced object, invoking its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">operator()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes undefined behavior since C++ closures do not extend the lifetime of their context.</P>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Main article:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function#C.2B.2B_.28since_C.2B.2B11.29">Anonymous function &#167;&nbsp;C++ (since C++11)</A></DIV>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">foo</SPAN><SPAN class=p>(</SPAN><SPAN class=n>string</SPAN> <SPAN class=n>myname</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>vector</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=n>string</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&gt;</SPAN> <SPAN class=n>n</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// ...</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">auto</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">::</SPAN><SPAN class=n>find_if</SPAN><SPAN class=p>(</SPAN><SPAN class=n>n</SPAN><SPAN class=p>.</SPAN><SPAN class=n>begin</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>n</SPAN><SPAN class=p>.</SPAN><SPAN class=n>end</SPAN><SPAN class=p>(),</SPAN>
               <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// this is the lambda expression:</SPAN>
               <SPAN class=p>[</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=p>](</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">const</SPAN> <SPAN class=n>string</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&amp;</SPAN> <SPAN class=n>s</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>s</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">!=</SPAN> <SPAN class=n>myname</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&amp;&amp;</SPAN> <SPAN class=n>s</SPAN><SPAN class=p>.</SPAN><SPAN class=n>size</SPAN><SPAN class=p>()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&gt;</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>}</SPAN>
             <SPAN class=p>);</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// 'i' is now either 'n.end()' or points to the first string in 'n'</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// which is not equal to 'myname' and whose length is greater than 'y'</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Inline_agents_.28Eiffel.29 class=mw-headline>Inline agents (Eiffel)</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Inline agents (Eiffel)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=17">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="Eiffel (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Eiffel_(programming_language)">Eiffel</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>inline agents</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>defining closures. An inline agent is an object representing a routine, defined by giving the code of the routine in-line. For example, in</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=n>ok_button</SPAN><SPAN class=p>.</SPAN><SPAN class=n>click_event</SPAN><SPAN class=p>.</SPAN><SPAN class=n>subscribe</SPAN> <SPAN class=p>(</SPAN>
	<SPAN class=kr style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">agent</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>:</SPAN> <SPAN class=nc style="FONT-WEIGHT: bold; COLOR: rgb(0,0,255)">INTEGER</SPAN><SPAN class=p>)</SPAN> <SPAN class=kr style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">do</SPAN>
		<SPAN class=n>map</SPAN><SPAN class=p>.</SPAN><SPAN class=n>country_at_coordinates</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>y</SPAN><SPAN class=p>).</SPAN><SPAN class=n>display</SPAN>
	<SPAN class=kr style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN>
<SPAN class=p>)</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">the argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">subscribe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an agent, representing a procedure with two arguments; the procedure finds the country at the corresponding coordinates and displays it. The whole agent is "subscribed" to the event type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">click_event</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a certain button, so that whenever an instance of the event type occurs on that button &#8212; because a user has clicked the button &#8212; the procedure will be executed with the mouse coordinates being passed as arguments for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">y</CODE>.</P>
<P style="MARGIN: 0.5em 0px">The main limitation of Eiffel agents, which distinguishes them from closures in other languages, is that they cannot reference local variables from the enclosing scope. This design decision helps in avoiding ambiguity when talking about a local variable value in a closure - should it be the latest value of the variable or the value captured when the agent is created? Only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">Current</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a reference to current object, analogous to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">this</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Java), its features, and arguments of the agent itself can be accessed from within the agent body. The values of the outer local variables can be passed by providing additional closed operands to the agent.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=See_also class=mw-headline>See also</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: See also" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=18">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function">Anonymous function</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Blocks (C language extension)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Blocks_(C_language_extension)">Blocks (C language extension)</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Command pattern" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Command_pattern">Command pattern</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Continuation style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Continuation">Continuation</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Currying style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Currying">Currying</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Funarg problem" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Funarg_problem">Funarg problem</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Lambda calculus" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda calculus</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Lazy evaluation" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lazy_evaluation">Lazy evaluation</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Partial application" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Partial_application">Partial application</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Spaghetti stack" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Spaghetti_stack">Spaghetti stack</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Syntactic closure" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Syntactic_closure">Syntactic closure</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Value-level programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Value-level_programming">Value-level programming</A></LI></UL>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Notes class=mw-headline>Notes</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Notes" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=19">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<DIV class="reflist columns references-column-width" style="LIST-STYLE-TYPE: lower-alpha; MARGIN-BOTTOM: 0.5em; FONT-SIZE: 12px; MARGIN-TOP: 0.3em; column-width: 30em">
<OL class=references style="FONT-SIZE: 12px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 3.2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI id=cite_note-1 style="MARGIN-BOTTOM: 0.1em; break-inside: avoid-column"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_ref-1"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>The function may be stored as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Reference (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Reference_(computer_science)">reference</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a function, such as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function pointer" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_pointer">function pointer</A>.</SPAN></LI>
<LI id=cite_note-3 style="MARGIN-BOTTOM: 0.1em; break-inside: avoid-column"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_ref-3"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>These names most frequently refer to values, mutable variables, or functions, but can also be other entities such as constants, types, classes, or labels.</SPAN></LI></OL></DIV>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=References class=mw-headline>References</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: References" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Closure_(computer_programming)&amp;action=edit&amp;section=20">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<DIV class="reflist columns references-column-width" style="LIST-STYLE-TYPE: decimal; MARGIN-BOTTOM: 0.5em; FONT-SIZE: 12px; MARGIN-TOP: 0.3em; column-width: 30em">
<OL class=references style="FONT-SIZE: 12px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 3.2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI id=cite_note-2 style="MARGIN-BOTTOM: 0.1em; break-inside: avoid-column"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)#cite_ref-2"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN></LI></OL></DIV></DIV></DIV>