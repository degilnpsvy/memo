#define CPSR_M (0x1fU)<BR>#define CPSR_T (1U &lt;&lt; 5)<BR>#define CPSR_F (1U &lt;&lt; 6)<BR>#define CPSR_I (1U &lt;&lt; 7)<BR>#define CPSR_A (1U &lt;&lt; 8)<BR>#define CPSR_E (1U &lt;&lt; 9)<BR>#define CPSR_IT_2_7 (0xfc00U)<BR>#define CPSR_GE (0xfU &lt;&lt; 16)<BR>#define CPSR_IL (1U &lt;&lt; 20)<BR>/* Note that the RESERVED bits include bit 21, which is PSTATE_SS in<BR>&nbsp;* an AArch64 SPSR but RES0 in AArch32 SPSR and CPSR. In QEMU we use<BR>&nbsp;* env-&gt;uncached_cpsr bit 21 to store PSTATE.SS when executing in AArch32,<BR>&nbsp;* where it is live state but not accessible to the AArch32 code.<BR>&nbsp;*/<BR>#define CPSR_RESERVED (0x7U &lt;&lt; 21)<BR>#define CPSR_J (1U &lt;&lt; 24)<BR>#define CPSR_IT_0_1 (3U &lt;&lt; 25)<BR>#define CPSR_Q (1U &lt;&lt; 27)<BR>#define CPSR_V (1U &lt;&lt; 28)<BR>#define CPSR_C (1U &lt;&lt; 29)<BR>#define CPSR_Z (1U &lt;&lt; 30)<BR>#define CPSR_N (1U &lt;&lt; 31)<BR>#define CPSR_NZCV (CPSR_N | CPSR_Z | CPSR_C | CPSR_V)<BR>#define CPSR_AIF (CPSR_A | CPSR_I | CPSR_F) 
<P></P>
<P>#define CPSR_IT (CPSR_IT_0_1 | CPSR_IT_2_7)<BR>#define CACHED_CPSR_BITS (CPSR_T | CPSR_AIF | CPSR_GE | CPSR_IT | CPSR_Q \<BR>&nbsp;&nbsp;&nbsp; | CPSR_NZCV)<BR>/* Bits writable in user mode.&nbsp; */<BR>#define CPSR_USER (CPSR_NZCV | CPSR_Q | CPSR_GE)<BR>/* Execution state bits.&nbsp; MRS read as zero, MSR writes ignored.&nbsp; */<BR>#define CPSR_EXEC (CPSR_T | CPSR_IT | CPSR_J | CPSR_IL)<BR>/* Mask of bits which may be set by exception return copying them from SPSR */<BR>#define CPSR_ERET_MASK (~CPSR_RESERVED)