<H3><SPAN id=Properties_in_QOM class=mw-headline>Properties in QOM</SPAN></H3>
<P>Device properties in QOM are bound to devices and are implemented by closures provided by the device. A Visitor is passed to the closure which effectively allows properties to be set/get through native C types. Mapping to any other type of representation (string or otherwise) is done by a Visitor with no knowledge of the device or property. </P>
<P>By convention, most device properties are implemented by writing a C typed public getter/setter for the device, and then using a property wrapper to translate those typed functions to an untyped closure that accepts a Visitor. </P>
<P>QOM has no notion of construction. All devices are created without properties. Properties can be set/get after initialization. Devices support the notion of "realize" which roughly corresponds to construction. More accurately, it corresponds to the moment before a device will be first consumed by a guest. </P>
<P>"unrealize" roughly corresponds to reset. A device may be realized and unrealized many times during its lifecycle. </P>
<P>Properties are, by default, locked while the device is realized. Exceptions can be made by the devices themselves in order to implement a way for a user to interact with a device while it is realized. </P>
<P>Two special types of properties are child&lt;&gt; and link&lt;&gt; properties. A child&lt;&gt; property is used to represent device composition. When a child&lt;&gt; property is added, the child device has its life cycle automatically tied to the parent device. The link&lt;&gt; property represents a reference to another device. </P>
<P>The child&lt;&gt; property type is always read-only and when read, will return the name of the child device. </P>
<P>The link&lt;&gt; property type is by default read/write and locked during realize. Hotplug can be implemented by allowing a link to be writable after realize and installing a custom setter function that implements hotplug behavior.