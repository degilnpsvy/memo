<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>GTypeModule</SPAN></H2>
<P>GTypeModule &#8212; Type loading modules</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsect1><A name=GTypeModule.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150>
<COL class=functions_name></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_type_module_use&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-use">g_type_module_use</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_module_unuse&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-unuse">g_type_module_unuse</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_module_set_name&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-set-name">g_type_module_set_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_module_register_type&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-type">g_type_module_register_type</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_module_add_interface&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-add-interface">g_type_module_add_interface</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_module_register_enum&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-enum">g_type_module_register_enum</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_module_register_flags&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-flags">g_type_module_register_flags</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_DYNAMIC_TYPE() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE:CAPS">G_DEFINE_DYNAMIC_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_DYNAMIC_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS">G_DEFINE_DYNAMIC_TYPE_EXTENDED</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_IMPLEMENT_INTERFACE_DYNAMIC() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-IMPLEMENT-INTERFACE-DYNAMIC:CAPS">G_IMPLEMENT_INTERFACE_DYNAMIC</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_ADD_PRIVATE_DYNAMIC() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-ADD-PRIVATE-DYNAMIC:CAPS">G_ADD_PRIVATE_DYNAMIC</A><SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=GTypeModule.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=name width=150>
<COL class=description></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeModule" class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#GTypeModule-struct">GTypeModule</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeModuleClass" class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#GTypeModuleClass">GTypeModuleClass</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=GTypeModule.object-hierarchy></A>
<H2>Object Hierarchy</H2><PRE class=screen>    <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject">GObject</A>
    <SPAN class=lineart>&#9584;&#9472;&#9472;</SPAN> GTypeModule
</PRE></DIV>
<DIV class=refsect1><A name=GTypeModule.implemented-interfaces></A>
<H2>Implemented Interfaces</H2>
<P>GTypeModule implements <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html">GTypePlugin</A>.</P></DIV>
<DIV class=refsect1><A name=GTypeModule.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib-object.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=GTypeModule.description></A>
<H2>Description</H2>
<P><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> provides a simple implementation of the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> interface. The model of <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> is a dynamically loaded module which implements some number of types and interface implementations. When the module is loaded, it registers its types and interfaces using <A title=g_type_module_register_type&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-type"><CODE class=function>g_type_module_register_type()</CODE></A> and <A title=g_type_module_add_interface&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-add-interface"><CODE class=function>g_type_module_add_interface()</CODE></A>. As long as any instances of these types and interface implementations are in use, the module is kept loaded. When the types and interfaces are gone, the module may be unloaded. If the types and interfaces become used again, the module will be reloaded. Note that the last unref cannot happen in module code, since that would lead to the caller's code being unloaded before <A title=g_object_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-unref"><CODE class=function>g_object_unref()</CODE></A> returns to it.</P>
<P>Keeping track of whether the module should be loaded or not is done by using a use count - it starts at zero, and whenever it is greater than zero, the module is loaded. The use count is maintained internally by the type system, but also can be explicitly controlled by <A title=g_type_module_use&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-use"><CODE class=function>g_type_module_use()</CODE></A> and <A title=g_type_module_unuse&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-unuse"><CODE class=function>g_type_module_unuse()</CODE></A>. Typically, when loading a module for the first type, <A title=g_type_module_use&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-use"><CODE class=function>g_type_module_use()</CODE></A> will be used to load it so that it can initialize its types. At some later point, when the module no longer needs to be loaded except for the type implementations it contains, <A title=g_type_module_unuse&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-unuse"><CODE class=function>g_type_module_unuse()</CODE></A> is called.</P>
<P><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> does not actually provide any implementation of module loading and unloading. To create a particular module type you must derive from <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> and implement the load and unload functions in <A title="struct GTypeModuleClass" class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#GTypeModuleClass"><SPAN class=type>GTypeModuleClass</SPAN></A>.</P></DIV>
<DIV class=refsect1><A name=GTypeModule.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-type-module-use></A>
<H3>g_type_module_use&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_type_module_use (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Increases the use count of a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> by one. If the use count was zero before, the plugin will be loaded. If loading the plugin fails, the use count is reset to its prior value.</P>
<DIV class=refsect3><A name=g-type-module-use.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-module-use.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if the plugin needed to be loaded and loading the plugin failed.</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-unuse></A>
<H3>g_type_module_unuse&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_module_unuse (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Decreases the use count of a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> by one. If the result is zero, the module will be unloaded. (However, the <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> will not be freed, and types associated with the <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> are not unregistered. Once a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> is initialized, it must exist forever.)</P>
<DIV class=refsect3><A name=g-type-module-unuse.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-set-name></A>
<H3>g_type_module_set_name&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_module_set_name (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>,
                        <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *name</CODE></EM>);</PRE>
<P>Sets the name for a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P>
<DIV class=refsect3><A name=g-type-module-set-name.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>name</P></TD>
<TD class=parameter_description>
<P>a human-readable name to use in error messages.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-register-type></A>
<H3>g_type_module_register_type&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_module_register_type (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>,
                             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> parent_type</CODE></EM>,
                             <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_name</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> *type_info</CODE></EM>,
                             <EM class=parameter><CODE><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Looks up or registers a type that is implemented with a particular type plugin. If a type with name <EM class=parameter><CODE>type_name</CODE></EM> was previously registered, the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier for the type is returned, otherwise the type is newly registered, and the resulting <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier returned.</P>
<P>When reregistering a type (typically because a module is unloaded then reloaded, and reinitialized), <EM class=parameter><CODE>module</CODE></EM> and <EM class=parameter><CODE>parent_type</CODE></EM> must be the same as they were previously.</P>
<P>As long as any instances of the type exist, the type plugin will not be unloaded.</P>
<DIV class=refsect3><A name=g-type-module-register-type.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>parent_type</P></TD>
<TD class=parameter_description>
<P>the type for the parent class</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>name for the type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_info</P></TD>
<TD class=parameter_description>
<P>type information structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>flags field providing details about the type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-module-register-type.returns></A>
<H4>Returns</H4>
<P>the new or existing type ID</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-add-interface></A>
<H3>g_type_module_add_interface&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_module_add_interface (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>,
                             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> instance_type</CODE></EM>,
                             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> *interface_info</CODE></EM>);</PRE>
<P>Registers an additional interface for a type, whose interface lives in the given type plugin. If the interface was already registered for the type in this plugin, nothing will be done.</P>
<P>As long as any instances of the type exist, the type plugin will not be unloaded.</P>
<DIV class=refsect3><A name=g-type-module-add-interface.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>instance_type</P></TD>
<TD class=parameter_description>
<P>type to which to add the interface.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P>interface type to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>interface_info</P></TD>
<TD class=parameter_description>
<P>type information structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-register-enum></A>
<H3>g_type_module_register_enum&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_module_register_enum (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>,
                             <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *name</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GEnumValue" class=link href="https://developer.gnome.org/gobject/stable/gobject-Enumeration-and-Flag-Types.html#GEnumValue"><SPAN class=type>GEnumValue</SPAN></A> *const_static_values</CODE></EM>);</PRE>
<P>Looks up or registers an enumeration that is implemented with a particular type plugin. If a type with name <EM class=parameter><CODE>type_name</CODE></EM> was previously registered, the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier for the type is returned, otherwise the type is newly registered, and the resulting <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier returned.</P>
<P>As long as any instances of the type exist, the type plugin will not be unloaded.</P>
<DIV class=refsect3><A name=g-type-module-register-enum.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>name</P></TD>
<TD class=parameter_description>
<P>name for the type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>const_static_values</P></TD>
<TD class=parameter_description>
<P>an array of <A title="struct GEnumValue" class=link href="https://developer.gnome.org/gobject/stable/gobject-Enumeration-and-Flag-Types.html#GEnumValue"><SPAN class=type>GEnumValue</SPAN></A> structs for the possible enumeration values. The array is terminated by a struct with all members being 0.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-module-register-enum.returns></A>
<H4>Returns</H4>
<P>the new or existing type ID</P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-6.html#api-index-2.6">2.6</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-module-register-flags></A>
<H3>g_type_module_register_flags&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_module_register_flags (<EM class=parameter><CODE><A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A> *module</CODE></EM>,
                              <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *name</CODE></EM>,
                              <EM class=parameter><CODE>const <A title="struct GFlagsValue" class=link href="https://developer.gnome.org/gobject/stable/gobject-Enumeration-and-Flag-Types.html#GFlagsValue"><SPAN class=type>GFlagsValue</SPAN></A> *const_static_values</CODE></EM>);</PRE>
<P>Looks up or registers a flags type that is implemented with a particular type plugin. If a type with name <EM class=parameter><CODE>type_name</CODE></EM> was previously registered, the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier for the type is returned, otherwise the type is newly registered, and the resulting <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> identifier returned.</P>
<P>As long as any instances of the type exist, the type plugin will not be unloaded.</P>
<DIV class=refsect3><A name=g-type-module-register-flags.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>name</P></TD>
<TD class=parameter_description>
<P>name for the type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>const_static_values</P></TD>
<TD class=parameter_description>
<P>an array of <A title="struct GFlagsValue" class=link href="https://developer.gnome.org/gobject/stable/gobject-Enumeration-and-Flag-Types.html#GFlagsValue"><SPAN class=type>GFlagsValue</SPAN></A> structs for the possible flags values. The array is terminated by a struct with all members being 0.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-module-register-flags.returns></A>
<H4>Returns</H4>
<P>the new or existing type ID</P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-6.html#api-index-2.6">2.6</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-DYNAMIC-TYPE:CAPS></A>
<H3>G_DEFINE_DYNAMIC_TYPE()</H3><PRE class=programlisting>#define G_DEFINE_DYNAMIC_TYPE(TN, t_n, T_P)          G_DEFINE_DYNAMIC_TYPE_EXTENDED (TN, t_n, T_P, 0, {})
</PRE>
<P>A convenience macro for dynamic type implementations, which declares a class initialization function, an instance initialization function (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> for information about these) and a static variable named <EM class=parameter><CODE>t_n</CODE></EM> &lt;!-- --&gt;_parent_class pointing to the parent class. Furthermore, it defines a <CODE class=literal>*_get_type()</CODE> and a static <CODE class=literal>*_register_type()</CODE> functions for use in your <CODE class=literal><CODE class=function>module_init()</CODE></CODE>.</P>
<P>See <A title=G_DEFINE_DYNAMIC_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_DYNAMIC_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-DYNAMIC-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-14.html#api-index-2.14">2.14</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS></A>
<H3>G_DEFINE_DYNAMIC_TYPE_EXTENDED()</H3><PRE class=programlisting>#define             G_DEFINE_DYNAMIC_TYPE_EXTENDED(TypeName, type_name, TYPE_PARENT, flags, CODE)</PRE>
<P>A more general version of <A title=G_DEFINE_DYNAMIC_TYPE() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE:CAPS"><CODE class=function>G_DEFINE_DYNAMIC_TYPE()</CODE></A> which allows to specify <A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> and custom code.</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS">G_DEFINE_DYNAMIC_TYPE_EXTENDED</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadget<SPAN class="gtkdoc opt">,</SPAN>
                                gtk_gadget<SPAN class="gtkdoc opt">,</SPAN>
                                GTK_TYPE_THING<SPAN class="gtkdoc opt">,</SPAN>
                                <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                                <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-IMPLEMENT-INTERFACE-DYNAMIC:CAPS">G_IMPLEMENT_INTERFACE_DYNAMIC</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>TYPE_GIZMO<SPAN class="gtkdoc opt">,</SPAN>
                                                               gtk_gadget_gizmo_init<SPAN class="gtkdoc opt">));</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>expands to</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_init</SPAN>              <SPAN class="gtkdoc opt">(</SPAN>GtkGadget      <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_class_init</SPAN>        <SPAN class="gtkdoc opt">(</SPAN>GtkGadgetClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_class_finalize</SPAN>    <SPAN class="gtkdoc opt">(</SPAN>GtkGadgetClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class="gtkdoc kwb">static</SPAN> gpointer gtk_gadget_parent_class <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwb">static</SPAN> GType    gtk_gadget_type_id <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">;</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_class_intern_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gpointer klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  gtk_gadget_parent_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek-parent">g_type_class_peek_parent</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN> 
  <SPAN class=function>gtk_gadget_class_init</SPAN> <SPAN class="gtkdoc opt">((</SPAN>GtkGadgetClass<SPAN class="gtkdoc opt">*)</SPAN> klass<SPAN class="gtkdoc opt">);</SPAN> 
<SPAN class="gtkdoc opt">}</SPAN>

GType
<SPAN class=function>gtk_gadget_get_type</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=keyword>return</SPAN> gtk_gadget_type_id<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>gtk_gadget_register_type</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GTypeModule <SPAN class="gtkdoc opt">*</SPAN>type_module<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwb">const</SPAN> GTypeInfo g_define_type_info <SPAN class="gtkdoc opt">= {</SPAN>
    <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadgetClass<SPAN class="gtkdoc opt">),</SPAN>
    <SPAN class="gtkdoc opt">(</SPAN>GBaseInitFunc<SPAN class="gtkdoc opt">)</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN>
    <SPAN class="gtkdoc opt">(</SPAN>GBaseFinalizeFunc<SPAN class="gtkdoc opt">)</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN>
    <SPAN class="gtkdoc opt">(</SPAN>GClassInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_class_intern_init<SPAN class="gtkdoc opt">,</SPAN>
    <SPAN class="gtkdoc opt">(</SPAN>GClassFinalizeFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_class_finalize<SPAN class="gtkdoc opt">,</SPAN>
    NULL<SPAN class="gtkdoc opt">,</SPAN>   <SPAN class="gtkdoc slc">// class_data</SPAN>
    <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadget<SPAN class="gtkdoc opt">),</SPAN>
    <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">,</SPAN>      <SPAN class="gtkdoc slc">// n_preallocs</SPAN>
    <SPAN class="gtkdoc opt">(</SPAN>GInstanceInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_init<SPAN class="gtkdoc opt">,</SPAN> 
    NULL    <SPAN class="gtkdoc slc">// value_table</SPAN>
  <SPAN class="gtkdoc opt">};</SPAN>
  gtk_gadget_type_id <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-type">g_type_module_register_type</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>type_module<SPAN class="gtkdoc opt">,</SPAN>
                                                    GTK_TYPE_THING<SPAN class="gtkdoc opt">,</SPAN>
                                                    <SPAN class=string>"GtkGadget"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                                                    <SPAN class="gtkdoc opt">&amp;</SPAN>g_define_type_info<SPAN class="gtkdoc opt">,</SPAN>
                                                    <SPAN class="gtkdoc opt">(</SPAN>GTypeFlags<SPAN class="gtkdoc opt">)</SPAN> flags<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class="gtkdoc kwb">const</SPAN> GInterfaceInfo g_implement_interface_info <SPAN class="gtkdoc opt">= {</SPAN>
      <SPAN class="gtkdoc opt">(</SPAN>GInterfaceInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_gizmo_init
    <SPAN class="gtkdoc opt">};</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-add-interface">g_type_module_add_interface</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>type_module<SPAN class="gtkdoc opt">,</SPAN> g_define_type_id<SPAN class="gtkdoc opt">,</SPAN> TYPE_GIZMO<SPAN class="gtkdoc opt">, &amp;</SPAN>g_implement_interface_info<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=G-DEFINE-DYNAMIC-TYPE-EXTENDED.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>TYPE_PARENT</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> to pass to <A title=g_type_module_register_type&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-type"><CODE class=function>g_type_module_register_type()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>CODE</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-14.html#api-index-2.14">2.14</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-IMPLEMENT-INTERFACE-DYNAMIC:CAPS></A>
<H3>G_IMPLEMENT_INTERFACE_DYNAMIC()</H3><PRE class=programlisting>#define             G_IMPLEMENT_INTERFACE_DYNAMIC(TYPE_IFACE, iface_init)</PRE>
<P>A convenience macro to ease interface addition in the <EM class=parameter><CODE>_C_</CODE></EM> section of <A title=G_DEFINE_DYNAMIC_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_DYNAMIC_TYPE_EXTENDED()</CODE></A>. See <A title=G_DEFINE_DYNAMIC_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_DYNAMIC_TYPE_EXTENDED()</CODE></A> for an example.</P>
<P>Note that this macro can only be used together with the G_DEFINE_DYNAMIC_TYPE_EXTENDED macros, since it depends on variable names from that macro.</P>
<DIV class=refsect3><A name=G-IMPLEMENT-INTERFACE-DYNAMIC.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TYPE_IFACE</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the interface to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>iface_init</P></TD>
<TD class=parameter_description>
<P>The interface init function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-24.html#api-index-2.24">2.24</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-ADD-PRIVATE-DYNAMIC:CAPS></A>
<H3>G_ADD_PRIVATE_DYNAMIC()</H3><PRE class=programlisting>#define             G_ADD_PRIVATE_DYNAMIC(TypeName)</PRE>
<P>A convenience macro to ease adding private data to instances of a new dynamic type in the <EM class=parameter><CODE>_C_</CODE></EM> section of <A title=G_DEFINE_DYNAMIC_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_DYNAMIC_TYPE_EXTENDED()</CODE></A>. See <A title=G_ADD_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS"><CODE class=function>G_ADD_PRIVATE()</CODE></A> for details, it is similar but for static types.</P>
<P>Note that this macro can only be used together with the G_DEFINE_DYNAMIC_TYPE_EXTENDED macros, since it depends on variable names from that macro.</P>
<DIV class=refsect3><A name=G-ADD-PRIVATE-DYNAMIC.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>the name of the type in CamelCase</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV></DIV>
<DIV class=refsect1><A name=GTypeModule.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GTypeModule-struct></A>
<H3>struct GTypeModule</H3><PRE class=programlisting>struct GTypeModule {
  gchar *name;
};
</PRE>
<P>The members of the GTypeModule structure should not be accessed directly, except for the <EM class=parameter><CODE>name</CODE></EM> field.</P>
<DIV class=refsect3><A name=GTypeModule.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GTypeModule-struct.name></A>name</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>the name of the module</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeModuleClass></A>
<H3>struct GTypeModuleClass</H3><PRE class=programlisting>struct GTypeModuleClass {
  GObjectClass parent_class;

  gboolean (* load)   (GTypeModule *module);
  void     (* unload) (GTypeModule *module);
};
</PRE>
<P>In order to implement dynamic loading of types based on <A title=GTypeModule class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html"><SPAN class=type>GTypeModule</SPAN></A>, the <EM class=parameter><CODE>load</CODE></EM> and <EM class=parameter><CODE>unload</CODE></EM> functions in <A title="struct GTypeModuleClass" class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#GTypeModuleClass"><SPAN class=type>GTypeModuleClass</SPAN></A> must be implemented.</P>
<DIV class=refsect3><A name=GTypeModuleClass.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeModuleClass.load></A>load</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>loads the module and registers one or more types using <A title=g_type_module_register_type&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypeModule.html#g-type-module-register-type"><CODE class=function>g_type_module_register_type()</CODE></A>.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeModuleClass.unload></A>unload</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>unloads the module</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=refsect1><A name=GTypeModule.see-also></A>
<H2>See Also</H2>
<P><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A>, <A href="https://developer.gnome.org/gobject/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A></P></DIV>