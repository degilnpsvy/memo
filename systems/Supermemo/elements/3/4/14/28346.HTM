<DIV class=SECT1>
<H1 class=SECT1><A id=SYSTEM-CONFIGURATION-OVERVIEW name=SYSTEM-CONFIGURATION-OVERVIEW>4.1 System Overview</A></H1>
<P>It's important to understand how a Linux system is put together before diving into the various configuration aspects. A Linux system is significantly different from a DOS, Windows, or Macintosh system (with the exception of the Unix-based Mac OS X), but these sections will help you get acquainted with the layout so that you can easily configure your system to meet your needs.</P>
<DIV class=SECT2>
<H2 class=SECT2><A id=SYSTEM-CONFIGURATION-LAYOUT name=SYSTEM-CONFIGURATION-LAYOUT>4.1.1 File System Layout</A></H2>
<P>The first noticeable difference between Slackware Linux and a DOS or Windows system is the filesystem. For starters, we do not use drive letters to denote different partitions. Under Linux, there is one main directory. You can relate this to the <TT class=DEVICENAME>C:</TT> drive under DOS. Each partition on your system is mounted to a directory on the main directory. It's kind of like an ever-expanding hard disk.</P>
<P>We call the main directory the root directory, and it's denoted with a single slash (<TT class=FILENAME>/</TT>). This concept may seem strange, but it actually makes life easy for you when you want to add more space. For example, let's say you run out of space on the drive that has <TT class=FILENAME>/home</TT> on it. Most people install Slackware and make one big root drive. Well, since a partition can be mounted to any directory, you can simply go to the store and pick up a new hard drive and mount it to <TT class=FILENAME>/home</TT>. You've now grafted on some more space to your system. And all without having to move many things around.</P>
<P>Below, you will find descriptions of the major top level directories under Slackware.</P>
<DIV class=VARIABLELIST>
<DL>
<DT><TT class=FILENAME>bin</TT></DT>
<DD>
<P>Essential user programs are stored here. These represent the bare minimum set of programs required for a user to use the system. Things like the shell and the filesystem commands (<TT class=COMMAND>ls</TT>, <TT class=COMMAND>cp</TT>, and so on) are stored here. The <TT class=FILENAME>/bin</TT> directory usually doesn't receive modification after installation. If it does, it's usually in the form of package upgrades that we provide.</P></DD>
<DT><TT class=FILENAME>boot</TT></DT>
<DD>
<P>Files that are used by the Linux Loader (LILO). This directory also receives little modification after an installation. The kernel is stored here as of Slackware 8.1. In earlier releases of Slackware, the kernel was simply stored under <TT class=FILENAME>/</TT> , but common practice is to put the kernel and related files here to facilitate dual-booting.</P></DD>
<DT><TT class=FILENAME>dev</TT></DT>
<DD>
<P>Everything in Linux is treated as a file, even hardware devices like serial ports, hard disks, and scanners. In order to access these devices, a special file called a device node has to be present. All device nodes are stored in the <TT class=FILENAME>/dev</TT> directory. You will find this to be true across many Unix-like operating systems.</P></DD>
<DT><TT class=FILENAME>etc</TT></DT>
<DD>
<P>This directory holds system configuration files. Everything from the X Window configuration file, the user database, to the system startup scripts. The system administrator will become quite familiar with this directory over time.</P></DD>
<DT><TT class=FILENAME>home</TT></DT>
<DD>
<P>Linux is a multiuser operating system. Each user on the system is given an account and a unique directory for personal files. This directory is called the user's home directory. The <TT class=FILENAME>/home</TT> directory is provided as the default location for user home directories.</P></DD>
<DT><TT class=FILENAME>lib</TT></DT>
<DD>
<P>System libraries that are required for basic operation are stored here. The C library, the dynamic loader, the ncurses library, and kernel modules are among the things stored here.</P></DD>
<DT><TT class=FILENAME>mnt</TT></DT>
<DD>
<P>This directory contains temporary mount points for working on hard disks or removable drives. Here you'll find mount points for your CD-ROM and floppy drives.</P></DD>
<DT><TT class=FILENAME>opt</TT></DT>
<DD>
<P>Optional software packages. The idea behind <TT class=FILENAME>/opt</TT> is that each software package installs to <TT class=FILENAME>/opt/<VAR class=REPLACEABLE>software-package</VAR></TT>, which makes it easy to remove later. Slackware distributes some things in <TT class=FILENAME>/opt</TT> (such as KDE in <TT class=FILENAME>/opt/kde</TT>), but you are free to add anything you want to <TT class=FILENAME>/opt</TT>.</P></DD>
<DT><TT class=FILENAME>proc</TT></DT>
<DD>
<P>This is a unique directory. It's not really part of the filesystem, but a virtual filesystem that provides access to kernel information. Various pieces of information that the kernel wants you to know are conveyed to you through files in the <TT class=FILENAME>/proc</TT> directory. You can also send information to the kernel through some of these files. Try doing <TT class=COMMAND>cat /proc/cpuinfo</TT>.</P></DD>
<DT><TT class=FILENAME>root</TT></DT>
<DD>
<P>The system administrator is known as <TT class=USERNAME>root</TT> on the system. <TT class=USERNAME>root</TT>'s home directory is kept in <TT class=FILENAME>/root</TT> instead of <TT class=FILENAME>/home/root</TT>. The reason is simple. What if <TT class=FILENAME>/home</TT> was a different partition from <TT class=FILENAME>/</TT> and it could not be mounted? <TT class=USERNAME>root</TT> would naturally want to log in and repair the problem. If his home directory was on the damaged filesystem, it would make it difficult for him to log in.</P></DD>
<DT><TT class=FILENAME>sbin</TT></DT>
<DD>
<P>Essential programs that are run by <TT class=USERNAME>root</TT> and during the system bootup process are kept here. Normal users will not run programs in this directory.</P></DD>
<DT><TT class=FILENAME>tmp</TT></DT>
<DD>
<P>The temporary storage location. All users have read and write access to this directory.</P></DD>
<DT><TT class=FILENAME>usr</TT></DT>
<DD>
<P>This is the big directory on a Linux system. Everything else pretty much goes here, programs, documentation, the kernel source code, and the X Window system. This is the directory to which you will most likely be installing programs.</P></DD>
<DT><TT class=FILENAME>var</TT></DT>
<DD>
<P>System log files, cache data, and program lock files are stored here. This is the directory for frequently-changing data.</P></DD></DL></DIV>
<P>You should now have a good feel for which directories contain what on the filesystem. More detailed information about the filesystem layout is available in the hier(7) man page. The next section will help you find specific files easily, so you don't have to do it by hand.</P></DIV>
<DIV class=SECT2>
<H2 class=SECT2><A id=SYSTEM-CONFIGURATION-FINDING name=SYSTEM-CONFIGURATION-FINDING>4.1.2 Finding Files</A></H2>
<P>You now know what each major directory holds, but it still doesn't really help you find things. I mean, you could go looking through directories, but there are quicker ways. There are four main file search commands available in Slackware.</P>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1329 name=AEN1329>4.1.2.1 <TT class=COMMAND>which</TT></A></H3>
<P>The first is the <TT class=COMMAND>which</TT>(1) command. <TT class=COMMAND>which</TT> is usually used to locate a program quickly. It just searches your <TT class=ENVAR>PATH</TT> and returns the first instance it finds and the directory path to it. Take this example:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>%</SAMP>  <KBD class=USERINPUT>which bash</KBD>
/bin/bash
</PRE></TD></TR></TBODY></TABLE>
<P>From that you see that <TT class=COMMAND>bash</TT> is in the <TT class=FILENAME>/bin</TT> directory. This is a very limited command for searching, since it only searches your <TT class=ENVAR>PATH</TT>.</P></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1347 name=AEN1347>4.1.2.2 <TT class=COMMAND>whereis</TT></A></H3>
<P>The <TT class=COMMAND>whereis</TT>(1) command works similar to <TT class=COMMAND>which</TT>, but can also search for man pages and source files. A <TT class=COMMAND>whereis</TT> search for <TT class=COMMAND>bash</TT> should return this:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>%</SAMP>  <KBD class=USERINPUT>whereis bash</KBD>
bash: /bin/bash /usr/bin/bash /usr/man/man1/bash.1.gz
</PRE></TD></TR></TBODY></TABLE>
<P>This command not only told us where the actual program is located, but also where the online documentation is stored. Still, this command is limited. What if you wanted to search for a specific configuration file? You can't use <TT class=COMMAND>which</TT> or <TT class=COMMAND>whereis</TT> for that.</P></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1363 name=AEN1363>4.1.2.3 <TT class=COMMAND>find</TT></A></H3>
<P>The <TT class=COMMAND>find</TT>(1) command allows the user to search the filesystem with a rich collection of search predicates. Users may specify a search with filename wildcards, ranges of modification or creation times, or other advanced properties. For example, to search for the default <TT class=FILENAME>xinitrc</TT> file on the system, the following command could be used.</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>%</SAMP>  <KBD class=USERINPUT>find / -name xinitrc</KBD>
/var/X11R6/lib/xinit/xinitrc
</PRE></TD></TR></TBODY></TABLE>
<P><TT class=COMMAND>find</TT> will take a while to run, since it has to traverse the entire root directory tree. And if this command is run as a normal user, there will be permission denied error messages for directories that only <TT class=USERNAME>root</TT> can see. But <TT class=COMMAND>find</TT> found our file, so that's good. If only it could be a bit faster...</P></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1378 name=AEN1378>4.1.2.4 <TT class=COMMAND>slocate</TT></A></H3>
<P>The <TT class=COMMAND>slocate</TT>(1) command searches the entire filesystem, just like the find command can do, but it searches a database instead of the actual filesystem. The database is set to automatically update every morning, so you have a somewhat fresh listing of files on your system. You can manually run <TT class=COMMAND>updatedb</TT>(1) to update the slocate database (before running <TT class=COMMAND>updatedb</TT> by hand, you must first <TT class=COMMAND>su</TT> to the <TT class=USERNAME>root</TT> user). Here's an example of <TT class=COMMAND>slocate</TT> in action:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>%</SAMP>  <KBD class=USERINPUT>slocate xinitrc</KBD>   # we don't have to go to the root
/var/X11R6/lib/xinit/xinitrc
/var/X11R6/lib/xinit/xinitrc.fvwm2
/var/X11R6/lib/xinit/xinitrc.openwin
/var/X11R6/lib/xinit/xinitrc.twm
</PRE></TD></TR></TBODY></TABLE>
<P>We got more than what we were looking for, and quickly too. With these commands, you should be able to find whatever you're looking for on your Linux system.</P></DIV></DIV>
<DIV class=SECT2>
<H2 class=SECT2><A id=SYSTEM-CONFIGURATION-RCD name=SYSTEM-CONFIGURATION-RCD>4.1.3 The <TT class=FILENAME>/etc/rc.d</TT> Directory</A></H2>
<P>The system initialization files are stored in the <TT class=FILENAME>/etc/rc.d</TT> directory. Slackware uses the BSD-style layout for its initialization files as opposed to System V init scripts, which tend to make configuration changes much more difficult without using a program specifically designed for that purpose. In BSD-init scripts, each runlevel is given a single rc file. In System V, each runlevel is given its own directory, each containing numerous init scripts. This provides an organized structure that is easy to maintain.</P>
<P>There are several categories of initialization files. These are system startup, runlevels, network initialization, and System V compatibility. As per tradition, we'll lump everything else into another category.</P>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1406 name=AEN1406>4.1.3.1 System Startup</A></H3>
<P>The first program to run under Slackware besides the Linux kernel is <TT class=COMMAND>init</TT>(8). This program reads the <TT class=FILENAME>/etc/inittab</TT>(5) file to see how to run the system. It runs the <TT class=FILENAME>/etc/rc.d/rc.S</TT> script to prepare the system before going into your desired runlevel. The <TT class=FILENAME>rc.S</TT> file enables your virtual memory, mounts your filesystems, cleans up certain log directories, initializes Plug and Play devices, loads kernel modules, configures PCMCIA devices, sets up serial ports, and runs System V init scripts (if found). Obviously <TT class=FILENAME>rc.S</TT> has a lot on its plate, but here are some scripts in <TT class=FILENAME>/etc/rc.d</TT> that <TT class=FILENAME>rc.S</TT> will call on to complete its work:</P>
<DIV class=VARIABLELIST>
<DL>
<DT><TT class=FILENAME>rc.S</TT></DT>
<DD>
<P>This is the actual system initialization script.</P></DD>
<DT><TT class=FILENAME>rc.modules</TT></DT>
<DD>
<P>Loads kernel modules. Things like your network card, PPP support, and other things are loaded here. If this script finds <TT class=FILENAME>rc.netdevice</TT>, it will run that as well.</P></DD>
<DT><TT class=FILENAME>rc.pcmcia</TT></DT>
<DD>
<P>Probes for and configures any PCMCIA devices that you might have on your system. This is most useful for laptop users, who probably have a PCMCIA modem or network card.</P></DD>
<DT><TT class=FILENAME>rc.serial</TT></DT>
<DD>
<P>Configures your serial ports by running the appropriate <TT class=COMMAND>setserial</TT> commands.</P></DD>
<DT><TT class=FILENAME>rc.sysvinit</TT></DT>
<DD>
<P>Looks for System V init scripts for the desired runlevel and runs them. This is discussed in more detail below.</P></DD></DL></DIV></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1454 name=AEN1454>4.1.3.2 Runlevel Initialization Scripts</A></H3>
<P>After system initialization is complete, <TT class=COMMAND>init</TT> moves on to runlevel initialization. A runlevel describes the state that your machine will be running in. Sound redundant? Well, the runlevel tells <TT class=COMMAND>init</TT> if you will be accepting multiuser logins or just a single user, whether or not you want network services, and if you will be using the X Window System or <TT class=COMMAND>agetty</TT>(8) to handle logins. The files below define the different runlevels in Slackware Linux.</P>
<DIV class=VARIABLELIST>
<DL>
<DT><TT class=FILENAME>rc.0</TT></DT>
<DD>
<P>Halt the system (runlevel 0). By default, this is symlinked to <TT class=FILENAME>rc.6</TT>.</P></DD>
<DT><TT class=FILENAME>rc.4</TT></DT>
<DD>
<P>Multiuser startup (runlevel 4), but in X11 with KDM, GDM, or XDM as the login manager.</P></DD>
<DT><TT class=FILENAME>rc.6</TT></DT>
<DD>
<P>Reboot the system (runlevel 6).</P></DD>
<DT><TT class=FILENAME>rc.K</TT></DT>
<DD>
<P>Startup in single user mode (runlevel 1).</P></DD>
<DT><TT class=FILENAME>rc.M</TT></DT>
<DD>
<P>Multiuser mode (runlevels 2 and 3), but with the standard text-based login. This is the default runlevel in Slackware.</P></DD></DL></DIV></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1493 name=AEN1493>4.1.3.3 Network Initialization</A></H3>
<P>Runlevels 2, 3, and 4 will start up the network services. The following files are responsible for the network initialization:</P>
<DIV class=VARIABLELIST>
<DL>
<DT><TT class=FILENAME>rc.inet1</TT></DT>
<DD>
<P>Created by <TT class=COMMAND>netconfig</TT>, this file is responsible for configuring the actual network interface.</P></DD>
<DT><TT class=FILENAME>rc.inet2</TT></DT>
<DD>
<P>Runs after <TT class=FILENAME>rc.inet1</TT> and starts up basic network services.</P></DD>
<DT><TT class=FILENAME>rc.atalk</TT></DT>
<DD>
<P>Starts up AppleTalk services.</P></DD>
<DT><TT class=FILENAME>rc.httpd</TT></DT>
<DD>
<P>Starts up the Apache web server. Like a few other rc scripts, this one can also be used to stop and restart a service. <TT class=FILENAME>rc.httpd</TT> takes arguments of stop, start, or restart. </P></DD>
<DT><TT class=FILENAME>rc.news</TT></DT>
<DD>
<P>Starts up the news server.</P></DD></DL></DIV></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1534 name=AEN1534>4.1.3.4 System V Compatibility</A></H3>
<P>System V init compatibility was introduced in Slackware 7.0. Many other Linux distributions make use of this style instead of the BSD style. Basically each runlevel is given a subdirectory for init scripts, whereas BSD style gives one init script to each runlevel.</P>
<P>The <TT class=FILENAME>rc.sysvinit</TT> script will search for any System V init scripts you have in <TT class=FILENAME>/etc/rc.d</TT> and run them, if the runlevel is appropriate. This is useful for certain commercial software packages that install System V init scripts</P></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1546 name=AEN1546>4.1.3.5 Other Files</A></H3>
<P>The scripts described below are the other system initialization scripts. They are typically run from one of the major scripts above, so all you need to do is edit the contents.</P>
<DIV class=VARIABLELIST>
<DL>
<DT><TT class=FILENAME>rc.gpm</TT></DT>
<DD>
<P>Starts up general purpose mouse services. Allows you to copy and paste at the Linux console. Occasionally, gpm will cause problems with the mouse when it is used under X windows. If you experience problems with the mouse under X, try taking away the executable permission from this file and stopping the gpm server.</P></DD>
<DT><TT class=FILENAME>rc.font</TT></DT>
<DD>
<P>Loads the custom screen font for the console.</P></DD>
<DT><TT class=FILENAME>rc.local</TT></DT>
<DD>
<P>Contains any specific startup commands for your system. This is empty after a fresh install, as it is reserved for local administrators. This script is run after all other initialization has taken place.</P></DD></DL></DIV>
<P>To enable a script, all you need to do is add the execute permissions to it with the <TT class=COMMAND>chmod</TT> command. To disable a script, remove the execute permissions from it. For more information about <TT class=COMMAND>chmod</TT>, see <A href="http://www.slackbook.org/html/filesystem-structure-permissions.html">Section 9.2</A>.</P></DIV></DIV></DIV>