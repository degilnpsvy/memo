<DIV class=SECT1>
<H1 class=SECT1><A id=SYSTEM-CONFIGURATION-KERNEL name=SYSTEM-CONFIGURATION-KERNEL>4.2 Selecting a Kernel</A></H1>
<P>The kernel is the part of the operating system that provides hardware access, process control, and overall system control. The kernel contains support for your hardware devices, so picking one for your system is an important setup step.</P>
<P>Slackware provides more than a dozen precompiled kernels that you can pick from, each with a standard set of drivers and additional specific drivers. You can run one of the precompiled kernels or you can build your own kernel from source. Either way, you need to make sure that your kernel has the hardware support your system needs.</P>
<DIV class=SECT2>
<H2 class=SECT2><A id=AEN1581 name=AEN1581>4.2.1 The <TT class=FILENAME>/kernels</TT> Directory on the Slackware CD-ROM</A></H2>
<P>The precompiled Slackware kernels are available in the <TT class=FILENAME>/kernels</TT> directory on the Slackware CD-ROM or on the FTP site in the main Slackware directory. The available kernels change as new releases are made, so the documentation in that directory is always the authoritative source. The <TT class=FILENAME>/kernels</TT> directory has subdirectories for each kernel available. The subdirectories have the same name as their accompanying boot disk. In each subdirectory you will find the following files:</P>
<DIV class=INFORMALTABLE><A id=AEN1587 name=AEN1587></A>
<TABLE class=CALSTABLE width="100%" border=0 frame=void>
<COLGROUP>
<COL width="33%">
<COL width="67%"></COLGROUP>
<THEAD>
<TR>
<TH>File</TH>
<TH>Purpose</TH></TR></THEAD>
<TBODY>
<TR>
<TD><TT class=FILENAME>System.map</TT></TD>
<TD>The system map file for this kernel</TD></TR>
<TR>
<TD><TT class=FILENAME>bzImage</TT></TD>
<TD>The actual kernel image</TD></TR>
<TR>
<TD><TT class=FILENAME>config</TT></TD>
<TD>The source configuration file for this kernel</TD></TR></TBODY></TABLE></DIV>
<P>To use a kernel, copy the <TT class=FILENAME>System.map</TT> and <TT class=FILENAME>config</TT> files to your <TT class=FILENAME>/boot</TT> directory and copy the kernel image to <TT class=FILENAME>/boot/vmlinuz</TT>. Run <TT class=COMMAND>/sbin/lilo</TT>(8) to install LILO for the new kernel, and then reboot your system. That's all there is to installing a new kernel.</P>
<P>The kernels that end with a .i are IDE kernels. That is, they include no SCSI support in the base kernel. The kernels that end with .s are SCSI kernels. They include all the IDE support in .i kernels, plus SCSI support.</P></DIV>
<DIV class=SECT2>
<H2 class=SECT2><A id=SYSTEM-CONFIGURATION-KERNEL-COMPILE name=SYSTEM-CONFIGURATION-KERNEL-COMPILE>4.2.2 Compiling a Kernel from Source</A></H2>
<P>The question &#8220;Should I compile a kernel for my system?&#8221; is often asked by new users. The answer is a definite maybe. There are few instances where you will need to compile a kernel specific to your system. Most users can use a precompiled kernel and the loadable kernel modules to achieve a fully working system. You will want to compile a kernel for your system if you are upgrading kernel versions to one that we do not currently offer in Slackware, or if you have patched the kernel source to get special device support that is not in the native kernel source. Anyone with an SMP system will definitely want to compile a kernel with SMP support. Also, many users find a custom compiled kernel runs much faster on their machine. You may find it useful to compile the kernel with optimizations for the specific processor in your machine.</P>
<P>Building your own kernel is not that hard. The first step is to make sure you have the kernel source installed on your system. Make sure that you installed the packages from the K series during the installation. You will also want to make sure you have the D series installed, specifically the C compiler, GNU make, and GNU binutils. In general, it's a good idea to have the entire D series installed if you plan on doing any kind of development. You can also download the latest kernel source from <A href="http://www.kernel.org/mirrors" target=_top>http://www.kernel.org/mirrors</A>.</P>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1624 name=AEN1624>4.2.2.1 Linux Kernel version 2.4.x Compilation</A></H3>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>%</SAMP> <KBD class=USERINPUT>su -</KBD>
Password:
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>cd /usr/src/linux</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>The first step is to bring the kernel source into its base state. We issue this command to do that (note, you may wish to back-up the <TT class=FILENAME>.config</TT> file as this command will delete it without warning):</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make mrproper</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>Now you can configure the kernel for your system. The current kernel offers three ways of doing this. The first is the original text-based question and answer system. It asks a bunch of questions and then builds a configuration file. The problem with this method is that if you mess up, you must start over. The method that most people prefer is the menu driven one. Lastly, there is an X-based kernel configuration tool. Pick the one you want and issue the appropriate command:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make config</KBD>           (text-based Q&amp;A version)
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make menuconfig</KBD>       (menu driven, text-based version)
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make xconfig</KBD>          (X-based version, make sure you are in X first)
</PRE></TD></TR></TBODY></TABLE>
<DIV class=FIGURE><A id=SYSTEM-CONFIGURATION-MAKE-MENUCONFIG name=SYSTEM-CONFIGURATION-MAKE-MENUCONFIG></A>
<P><B>Figure 4-1. Kernel Configuration Menu</B></P>
<P><IMG src="http://www.slackbook.org/html/system-configuration/make-menuconfig-w.png"></P></DIV>
<P>New users will probably find <TT class=COMMAND>menuconfig</TT> to be the easiest to use. Help screens are provided that explain the various parts of the kernel. After configuring your kernel, exit the configuration program. It will write the necessary configuration files. Now we can prepare the source tree for a build:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make dep</KBD>
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make clean</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>The next step is to compile the kernel. First try issuing the <TT class=COMMAND>bzImage</TT> command below.</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make bzImage</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>This may take a while, depending on your CPU speed. During the build process, you will see the compiler messages. After building the kernel image, you will want to build any parts of the kernel that you flagged as modular.</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make modules</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>We can now install the kernel and modules that you compiled. To install the kernel on a Slackware system, these commands should be issued:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>mv /boot/vmlinuz /boot/vmlinuz.old</KBD>
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>cat arch/i386/boot/bzImage &gt; /vmlinuz</KBD>
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>mv /boot/System.map /boot/System.map.old</KBD>
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>cp System.map /boot/System.map</KBD>
<SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make modules_install</KBD>
</PRE></TD></TR></TBODY></TABLE>
<P>You will want to edit <TT class=FILENAME>/etc/lilo.conf</TT> and add a section to boot your old kernel in case your new one does not work. After doing that, run <TT class=COMMAND>/sbin/lilo</TT> to install the new boot block. You can now reboot with your new kernel.</P></DIV>
<DIV class=SECT3>
<H3 class=SECT3><A id=AEN1686 name=AEN1686>4.2.2.2 Linux Kernel Version 2.6.x</A></H3>
<P>The compilation of a 2.6 kernel is only slightly different from a 2.4 or a 2.2 kernel, but it is important that you understand the differences before delving in. It's no longer necessary to run <TT class=COMMAND>make dep</TT> and <TT class=COMMAND>make clean</TT>. Also, the kernel compilation process is not as verbose in the 2.6 kernel series. This results in a build process that is easier to understand, but has some short comings as well. If you have trouble building the kernel, it's highly recommended that you turn verbosity back up. You do this simply by appending <VAR class=OPTION>V=1</VAR> to the build. This allows you to log more information that could help a kernel developer or other friendly geek aid you in resolving the issue.</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>make bzImage V=1</KBD>
</PRE></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=SECT2>
<H2 class=SECT2><A id=SYSTEM-CONFIGURATION-KERNEL-MODULES name=SYSTEM-CONFIGURATION-KERNEL-MODULES>4.2.3 Using Kernel Modules</A></H2>
<P>Kernel modules are another name for device drivers that can be inserted into a running kernel. They allow you to extend the hardware supported by your kernel without needing to pick another kernel or compile one yourself.</P>
<P>Modules can also be loaded and unloaded at any time, even when the system is running. This makes upgrading specific drivers easy for system administrators. A new module can be compiled, the old one removed, and the new one loaded, all without rebooting the machine.</P>
<P>Modules are stored in the <TT class=FILENAME>/lib/modules/<VAR class=REPLACEABLE>kernel version</VAR></TT> directory on your system. They can be loaded at boot time through the <TT class=FILENAME>rc.modules</TT> file. This file is very well commented and offers examples for major hardware components. To see a list of modules that are currently active, use the <TT class=COMMAND>lsmod</TT>(1) command:</P>
<TABLE width="100%" bgColor=#e0e0e0 border=0>
<TBODY>
<TR>
<TD><PRE class=SCREEN><SAMP class=PROMPT>#</SAMP> <KBD class=USERINPUT>lsmod</KBD>
Module                  Size  Used by
parport_pc              7220   0 
parport                 7844   0  [parport_pc]
</PRE></TD></TR></TBODY></TABLE>
<P>You can see here that I only have the parallel port module loaded. To remove a module, you use the <TT class=COMMAND>rmmod</TT>(1) command. Modules can be loaded by the <TT class=COMMAND>modprobe</TT>(1) or <TT class=COMMAND>insmod</TT>(1) command. <TT class=COMMAND>modprobe</TT> is usually safer because it will load any modules that the one you're trying to load depends on.</P>
<P>A lot of users never have to load or unload modules by hand. They use the kernel autoloader for module management. By default, Slackware includes <VAR class=OPTION>kmod</VAR> in its kernels. <VAR class=OPTION>kmod</VAR> is a kernel option that enables the kernel to automatically load modules as they are requested. For more information on <VAR class=OPTION>kmod</VAR> and how it is configured, see <TT class=FILENAME>/usr/src/linux/Documentation/kmod.txt</TT>. You'll have needed to have the kernel source package, or downloaded kernel source from <A href="http://kernel.org/" target=_top>http://kernel.org</A>.</P>
<P>More information can be found in the man pages for each of these commands, plus the <TT class=FILENAME>rc.modules</TT> file.</P></DIV></DIV>