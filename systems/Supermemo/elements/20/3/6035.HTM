<DT><CODE>newlib, Definitions for OS interface</CODE> 
<DT><CODE>sbrk</CODE><A name=index-sbrk-479></A> 
<DD>Increase program data space. As<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and related functions depend on this, it is useful to have a working implementation. The following suffices for a standalone system; it exploits the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>automatically defined by the GNU linker.<PRE class=example><FONT class=clozed>          caddr_t sbrk(int incr) {
            extern char _end;		/* <SPAN class=roman style="FONT-WEIGHT: normal; FONT-FAMILY: serif">Defined by the linker</SPAN> */
            static char *heap_end;
            char *prev_heap_end;
          
            if (heap_end == 0) {
              heap_end = &amp;_end;
            }
            prev_heap_end = heap_end;
            if (heap_end + incr &gt; stack_ptr) {
              write (1, "Heap and stack collision\n", 25);
              abort ();
            }
          
            heap_end += incr;
            return (caddr_t) prev_heap_end;
          }
</FONT></PRE></DD>