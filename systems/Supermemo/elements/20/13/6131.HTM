Repository Publishing Advice 
<P></P>
<P>Before you go wildly setting up server machines and hosting services just to host Git repositories, consider what your needs really are and why you want to offer Git repositories. Perhaps your needs are already satisfied by existing companies, websites, or services. </P>
<P>For private code or even public code where you place a premium on the value of service, you might consider using a commerical Git hosting service.</P>
<P>If you are offering an open source repository and have minimal service needs or expectations, there are a multitude of Git hosting services available. Some offer upgrades to supported services as well.</P>
<P><FONT class=extract>The more complicated situations arise when you have private code that you want to keep in house and therefore must set up and maintain your own master depot for repository hosting. Oh, and don&#8217;t forget your own backups!</FONT></P>
<P><FONT class=extract>In this case, the usual approach is to use the Git-over-SSH protocol and require all users of the repository to have SSH access to the hosting server. On the server itself, a semigeneric user account and group (e.g., git or gituser) are usually created. All repositories are group owned by this user and typically live in some filespace (e.g., /git, /opt/git, or /var/git) set aside for this purpose. Here&#8217;s the key: that directory must be owned by your gituser group, be writable by that group, and it must have the sticky group bit set.</FONT> <FONT class=extract>Now, when you want to create a new, hosted repository called newrepo.git on your server, just ssh into the server and do this:</FONT></P>
<P><FONT class=extract>$ ssh git.my-host.example.com </FONT></P>
<P><FONT class=extract>$ cd /git </FONT></P>
<P><FONT class=extract>$ mkdir newrepo.git </FONT></P>
<P><FONT class=extract>$ cd newrepo.git </FONT></P>
<P><FONT class=extract>$ git init --shared --bare </FONT></P>
<P><FONT class=extract>Those last four commands can be simplified as follows: </FONT></P>
<P><FONT class=extract>$ git --git-dir /git/newrepo.git init --shared</FONT></P>
<P><FONT class=extract>At this point, the bare repository structure exists, but it remains empty. The important aspect of this repository, though, is that it is now receptive to a push of initial content from any user authorized to connect with the server. </FONT></P>
<P><FONT class=extract># from some client </FONT></P>
<P><FONT class=extract>$ cd /path/to/existing/initial/repo.git </FONT></P>
<P><FONT class=extract>$ git push git+ssh://git.my-host.example.com/git/newrepo.git master</FONT></P>
<P><FONT class=extract>The whole process of executing that git init on the server in such a way that subsequent pushes will work is at the heart of the Git web hosting services. That command is essentially what happens when you click on the GitHub &#8220;New Repo&#8221; button.</FONT>