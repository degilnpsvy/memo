No One True History </P>
<P>Development projects within a distributed environment have a few quirks that might not be obvious at first. And although these quirks might initially be confusing and their treatment often differs from other nondistributed VCSs, Git handles them in a clear and logical manner. As development takes place in parallel among different developers of a project, each has created what he believes to be the correct history of commits. As a result, there is my repository and my commit history, your repository and your commit history, and possibly several others being developed, simultaneously or otherwise.</P>
<P>Each developer has a unique notion of history, and each history is correct. There is no one true history. You cannot point to one and say: &#8220;This is the real history.&#8221;</P>
<P>Presumably, the different development histories have formed for a reason, and ultimately the various repositories and different commit histories will be merged into one common repository. After all, the intent is likely to be advancement toward a common goal.</P>
<P>When various branches from the different repositories are merged, all of the variations are present. The merged result states, effectively, &#8220;The merged history is better than any one independently.&#8221;</P>
<P>Git expresses this history ambivalence toward branch variations when it traverses the commit DAG. So if Git, when trying to linearize the commit sequence, reaches a merge commit, then it must select one branch or the other first. What criteria would it use to favor or select one branch over another? The spelling of the author&#8217;s last name? Perhaps the time stamp of a commit? That might be useful.</P>
<P>Even if you decide to use time stamps and agree to use Coordinated Universal Time (UTC) and extremely precise values, it doesn&#8217;t help. Even that recipe turns out to be completely unreliable! (The clocks on a developer&#8217;s computer can be wrong either intentionally or accidentally.)</P>
<P>Fundamentally, Git doesn&#8217;t care what came first. The only real, reliable relationship that can be established between commits is the direct parent relationship recorded in the commit objects. At best, the time stamps offer a secondary clue, usually accompanied by various heuristics to allow for errors such as unset clocks.</P>
<P>In short, neither time nor space operates in well-defined ways, so Git must allow for the effects of quantum physics.