CHAPTER 12 Remote Repositories 
<P></P>
<P>So far, you&#8217;ve worked almost entirely within one local repository. Now it&#8217;s time to explore the much lauded distributed features of Git and learn how to collaborate with other developers via shared repositories. </P>
<P>Working with multiple and remote repositories adds a few new terms to the Git <FONT class=extract>vernacular</FONT>.</P>
<P>A clone is a copy of a repository. A clone contains all the objects from the original; as a result, each clone is an independent and autonomous repository and a true, symmetric peer of the original. A clone allows each developer to work locally and independently without centralization, polls, or locks. Ultimately, it&#8217;s cloning that allows Git to easily scale and permit many geographically separated contributors.</P>
<P>Essentially, separate repositories are useful whenever:</P>
<P>? Developers work autonomously. </P>
<P>? Developers are separated by a wide area network. A cluster of developers in the same location may share a local repository to amass localized changes. </P>
<P>? A project is expected to diverge significantly along separate development paths. Although the regular branching and merging mechanisms demonstrated in previous chapters can handle any amount of separate development, the resulting complexity may become more trouble than it&#8217;s worth. Instead, separate development paths can use separate repositories to be merged again whenever appropriate. </P>
<P><FONT class=extract>Cloning a repository is just the first step in sharing code. You must also relate one repository to another to establish paths for data exchange. Git establishes these repository connections through remotes.</FONT></P>
<P><FONT class=extract>A remote is a reference, or handle, to another repository through a filesystem or network path. You use a remote as a shorthand name for an otherwise lengthy and complicated Git URL. You can define any number of remotes in a repository, thus creating terraced networks of repository sharing.</FONT></P>
<P><FONT class=extract>Once a remote is established, Git can transfer data from one repository to another using either a push or a pull model. For example, it&#8217;s common practice to occasionally transfer commit data from an original repository to its clone in order to keep the clone in sync. You can also create a remote to transfer data from the clone to its original or configure the two to exchange information bidirectionally.</FONT></P>
<P><FONT class=extract>To keep track of data from other repositories, Git uses remote-tracking branches. Each remote-tracking branch in your repository is a branch that serves as a proxy for a specific branch in a remote repository. You may set up a local-tracking branch that forms the basis for integrating your local changes with the remote changes from a corresponding remote-tracking branch.</FONT></P>
<P>Finally, you can make your repository available to others. Git generally refers to this as publishing a repository and provides several techniques for doing so.</P>
<P>This chapter presents examples and techniques to share, track, and obtain data across multiple repositories.