Repository Clones 
<P></P>
<P><FONT class=extract>The git clone command creates a new Git repository based on the original you specify via a filesystem or network address. Git doesn&#8217;t have to copy all the information in the original to the clone. Instead, Git ignores information that is pertinent only to the original repository, such as remote-tracking branches. </FONT></P>
<P><FONT class=extract>In normal git clone use, the local, development branches of the original repository, stored within refs/heads/, become remote-tracking branches in the new clone under refs/ remotes/. Remote-tracking branches within refs/remotes/ in the original repository are not cloned. (The clone doesn&#8217;t need to know what, if anything, the upstream repository is in turn tracking.)</FONT></P>
<P><FONT class=extract>Tags from the original repository are copied into the clone, as are all objects that are reachable from the copied refs. However, repository-specific information such as hooks (see Chapter 15), configuration files, the reflog, and the stash of the original repository are not reproduced in the clone.</FONT></P>
<P>In &#8220;Making a Copy of Your Repository&#8221; on page 27 of Chapter 3, we showed how git clone can be used to create a copy of your public_html repository:</P>
<P><FONT class=extract>$ git clone public_html my_website</FONT></P>
<P><FONT class=extract>Here, public_html is considered the original, &#8220;remote&#8221; repository. The new, resulting clone is my_website.</FONT></P>
<P><FONT class=extract>Similarly, git clone can be used to clone a copy of a repository from network sites: </FONT></P>
<P><FONT class=extract>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git</FONT></P>
<P><FONT class=extract>By default, each new clone maintains a link back to its parent repository via a remote called origin. However, the original repository has no knowledge of&#8212;nor does it maintain a link to&#8212;any clone. It is purely a one-way relationship.( 1. Of course, a bidirectional remote relationship can be set up later using the git remote command.) </FONT></P>
<P><FONT class=extract>The name &#8220;origin&#8221; isn&#8217;t special in any way. If you don&#8217;t want to use it, simply specify an alternate with the --origin name option during the clone operation.</FONT></P>
<P><FONT class=extract>Git also configures the default origin remote with a default fetch refspec:</FONT></P>
<P><FONT class=extract>fetch = +refs/heads/*:refs/remotes/origin/*</FONT></P>
<P><FONT class=extract>Establishing this refspec anticipates that you want to continue updating your local repository by fetching changes from the originating repository. In this case, the remote repository&#8217;s branches are available in the clone on branch names prefixed with ori gin/, such as origin/master, origin/dev, or origin/maint.</FONT>