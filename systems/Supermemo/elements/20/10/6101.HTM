<HEAD></HEAD>
<BODY>
<P>Non&#8211;Fast-Forward Pushes </P>
<P>If you are developing in a repository model in which you have the ability to git push your changes into the origin repository, then you might attempt to push your changes at any time. This could create problems if some other developer has previously pushed commits. </P>
<P>This hazard is particularly common when you are using a shared repository development model in which all developers can push their own commits and updates into a common repository at any time. </P>
<P>&nbsp;</P>
<P>Figure 12-4. Commits in original repository </P>
<P>Let&#8217;s look again at Figure 12-3, in which you have made new commits, X and Y, based on B.</P>
<P>If you wanted to push your X and Y commits upstream at this point, you could do so easily. Git would transfer your commits to the origin repository and add them on to the history at B. Git would then perform a special type of merge operation called a fastforward on the master branch, putting in your edits and updating the ref to point to Y. A fast-forward is essentially a simple linear history advancement operation; it was introduced in &#8220;Degenerate Merges&#8221; on page 140 of Chapter 9.</P>
<P>On the other hand, suppose another developer had already pushed some commits to the origin repository and the picture was more like Figure 12-4 when you attempted to push your history up to the origin repository. In effect, you are attempting to cause your history to be sent to the shared repository when there is already a different history there. The origin history does not simply fast-forward from B. This situation is called the non&#8211;fast-forward push problem.</P>
<P>When you attempt your push, Git rejects it and tells you about the conflict with a message like this: </P>
<P>$ git push</P>
<P>To /tmp/Depot/public_html </P>
<P>! [rejected] master -&gt; master (non-fast forward) </P>
<P>error: failed to push some refs to '/tmp/Depot/public_html'</P>
<P>So what are you really trying to do? Do you want to overwrite the other developer&#8217;s work, or do you want to incorporate both sets of histories?</P>
<P>If you want to overwrite all other changes, you can! Just use the -f option on your git push. We just hope you won&#8217;t need that alternate history!</P>
<P>More often, you are not trying to wipe out the existing origin history but just want your own changes to be added. In this case, you must perform a merge of the two histories in your repository before pushing.</P></BODY>