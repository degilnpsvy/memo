Forking Projects </P>
<P>Anytime you clone a repository, the action can be viewed as forking the project. Forking is functionally equivalent to &#8220;branching&#8221; in some other VCSs, but Git has a separate concept called &#8220;branching,&#8221; so don&#8217;t call it that. Unlike a branch, a Git fork doesn&#8217;t exactly have a name. Instead, you simply refer to it by the filesystem directory (or remote server, or URL) into which you cloned. </P>
<P>The term &#8220;fork&#8221; comes from the idea that when you create a fork, you create two simultaneous paths that the development will follow. It&#8217;s like a fork in the road of development. As you might imagine, the term &#8220;branch&#8221; is based on a similar analogy involving trees. There&#8217;s no inherent difference between the &#8220;branching&#8221; and &#8220;forking&#8221; metaphors&#8212;the terms simply capture two intents. Conceptually, the difference is that branching usually occurs within a single repository, whereas forking usually occurs at the whole repository level.</P>
<P>Although you can fork a project readily with Git, doing so may be more of a social or political choice than a technical one. For public or open source projects, having access to a copy or clone of the entire repository, complete with its history, is both an enabler of and a deterrent to forking.</P>
<P>GitHub.com, an online Git hosting service, takes this idea to the logical extreme: everybody&#8217;s version is considered a fork, and all the forks are shown together in the same place.