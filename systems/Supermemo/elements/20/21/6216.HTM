Making Your Changes in Git </P>
<P>Now that you have a Git repository of SVN source code, the next thing to do is make a change: </P>
<P>$ echo 'I am now a subversion developer!' &gt;hello.txt </P>
<P>$ git add hello.txt </P>
<P>$ git commit -m 'My first subversion commit' </P>
<P>Congratulations, you&#8217;ve contributed your first change to the SVN source code! Well, not really. You&#8217;ve committed your first change to the SVN source code. In plain SVN, where every commit is stored in the central repository, committing a change and sharing it with everyone is the same thing. In Git, however, a commit is just an object in your local repository until you push the change to someone else. And git svn doesn&#8217;t change that.</P>
<P>Alas, if you want to contribute your changes back, the usual Git operation doesn&#8217;t work: </P>
<P>$ git push origin master </P>
<P>fatal: 'origin': unable to chdir or not a git archive </P>
<P>fatal: The remote end hung up unexpectedly</P>
<P>In other words: you didn&#8217;t create a Git remote called origin, so the command doesn&#8217;t make any sense. (For more about defining remotes, see Chapter 12.) In fact, a Git remote won&#8217;t solve this problem. If you want to commit back to SVN, you must use git svn dcommit.( 2. Why &#8220;dcommit&#8221; instead of &#8220;commit&#8221;? The original git svn commit command was destructive and poorly designed, and it should be eschewed. However, rather than break backward compatibility, the git svn developers decided to add a new command, dcommit. The old commit command is now better known as set-tree, but don&#8217;t use that command, either.)</P>
<P>$ git svn dcommit </P>
<P>Committing to http://svn.collab.net/repos/svn/branches/1.5.x ... </P>
<P>Authentication realm: <HTTP: svn.collab.net:80>Subversion Committers </P>
<P>Password for 'bob':</P>
<P>If you actually had commit access to the central SVN source code repository (only a few people in the world have this privilege), you would enter your password at the prompt and git svn would do its magic. But then things would become even more confusing, because you&#8217;re trying to commit to a revision that isn&#8217;t the latest one. Let&#8217;s examine what to do about this next.