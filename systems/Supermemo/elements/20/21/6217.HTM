Fetching Before Committing 
<P></P>
<P>Recall that SVN keeps a linear, sequential view of history. If your local copy has an older version from the SVN repository (it does) and you&#8217;ve made a commit to that old version (you did), then there&#8217;s no way to send it back to the server. SVN simply has no way of creating a new branch at an earlier point in the history of a project. </P>
<P>However, you did create a fork in the history, as a Git commit always does. That leaves two possibilities: </P>
<P>1. The history was intentionally forked. You want to keep both parts of the history, merge them together, and commit the merge to SVN. </P>
<P>2. The fork wasn&#8217;t intentional and it would be better to linearize it and then commit. Does this sound familiar? It&#8217;s similar to the choice between merging and rebasing discussed in &#8220;rebase Versus merge&#8221; on page 174 of Chapter 10. The former option corresponds to git merge, and the latter is akin to git rebase.</P>
<P>The good news here is that, once again, Git offers both options. The bad news is that SVN is going lose some part of your history no matter which option is chosen.</P>
<P>To continue, fetch the latest revisions from SVN:( 3. Your local repository will definitely be missing revisions, because only a subset of all revisions was cloned at the start. You&#8217;ll probably see more new revisions than those shown here, because SVN developers are still working on the 1.5.x branch.)</P>
<P>$ git svn fetch </P>
<P>M STATUS </P>
<P>M build.conf </P>
<P>M COMMITTERS </P>
<P>r33143 = 152840fb7ec59d642362b2de5d8f98ba87d58a87 (git-svn) </P>
<P>M STATUS </P>
<P>r33193 = 13fc53806d777e3035f26ff5d1eedd5d1b157317 (git-svn) </P>
<P>M STATUS </P>
<P>r33194 = d70041fd576337b1d0e605d7f4eb2feb8ce08f86 (git-svn)</P>
<P>You can interpret the previous log messages as follows: </P>
<P>? The M means a file was modified. </P>
<P>? r33143 is the SVN revision number of a change. </P>
<P>? 152840f... is the corresponding Git commit ID generated by git svn. </P>
<P>? git-svn is the name of the remote ref that&#8217;s been updated with the new commit.</P>
<P>Let&#8217;s look at what&#8217;s going on:</P>
<P>$ git log --pretty=oneline --abbrev-commit --left-right master...git-svn </P>
<P>&lt;2e5f71c... My first subversion commit </P>
<P>&gt;d70041f... * STATUS: Added note to r33173. </P>
<P>&gt;13fc538... * STATUS: Nominate r33173 for backport. </P>
<P>&gt;152840f... Merge r31203 from trunk:</P>
<P>In plain English, the left branch (master) has one new commit and the right branch (git-svn) has three new commits. (You&#8217;ll likely see different output when you run the command because this output was captured during production of the book.) The --left-right option and the symmetric difference operator (...) are discussed in &#8220;git log with conflicts&#8221; on page 132 of Chapter 9 and in &#8220;Commit Ranges&#8221; on page 78 of Chapter 6, respectively.</P>
<P>Before you can commit back to SVN, you need one branch with all the commits in one place. Additionally, any new commits must be relative to the current state of the gitsvn branch because that&#8217;s all SVN knows how to do.