Make Your Own Origin Remote 
<P></P>
<P>Right now, you have two repositories that are virtually identical, except the initial repository has a working directory and the bare clone does not. </P>
<P>Moreover, because the ~/public_html repository in your home directory was created using git init and not via a clone, it lacks an origin. In fact, it has no remote configured at all.</P>
<P>It is easy enough to add one, though. And it&#8217;s needed if the goal is to perform more development in your initial repository and then push that development to the newly established, authoritative repository in the depot. In a sense, you must manually convert your initial repository into a derived clone.</P>
<P>A developer who clones from the depot will have an origin remote created automatically. In fact, if you were to turn around now and clone off the depot, you would see it set up for you automatically, too.</P>
<P><FONT class=extract>The command for manipulating remotes is git remote. This operation introduces a few new settings in the .git/config file: </FONT></P>
<P><FONT class=extract>$ cd ~/public_html </FONT></P>
<P><FONT class=extract>$ cat .git/config </FONT></P>
<P><FONT class=extract>[core]</FONT></P>
<P><FONT class=extract>repositoryformatversion = 0 </FONT></P>
<P><FONT class=extract>filemode = true </FONT></P>
<P><FONT class=extract>bare = false </FONT></P>
<P><FONT class=extract>logallrefupdates = true</FONT></P>
<P><FONT class=extract>$ git remote add origin /tmp/Depot/public_html </FONT></P>
<P><FONT class=extract>$ cat .git/config </FONT></P>
<P><FONT class=extract>[core] </FONT></P>
<P><FONT class=extract>repositoryformatversion = 0 </FONT></P>
<P><FONT class=extract>filemode = true </FONT></P>
<P><FONT class=extract>bare = false </FONT></P>
<P><FONT class=extract>logallrefupdates = true </FONT></P>
<P><FONT class=extract>[remote "origin"] </FONT></P>
<P><FONT class=extract>url = /tmp/Depot/public_html</FONT></P>
<P><FONT class=extract>fetch = +refs/heads/*:refs/remotes/origin/*</FONT></P>
<P><FONT class=extract>Here, git remote added a new remote section called origin to our configuration. The name origin isn&#8217;t magical or special. You could have used any other name, but the remote that points back to the basis repository is named origin by convention.</FONT></P>
<P>The remote establishes a link from your current repository to the remote repository found, in this case, at /tmp/Depot/public_html.git as recorded in the url value. As a convenience, the .git suffix is not required; both /tmp/Depot/public_html and /tmp/Depot/public_html.git will work. Now, within this repository, the name origin can be used as a shorthand reference for the remote repository found in the depot. Note that a default fetch refspec that follows branch name mapping conventions has also been added.</P>
<P><FONT class=extract>The relationship between a repository that contains a remote reference (the referrer) and that remote repository (the referee) is asymmetric. A remote always points in one direction from referrer to referee. The referee has no idea that some other repository points to it. Another way to say this is as follows: a clone knows where its upstream repository is, but the upstream repository doesn&#8217;t know where its clones are.</FONT></P>
<P><FONT class=extract>Let&#8217;s complete the process of setting up the origin remote by establishing new remote tracking branches in the original repository to represent the branches from the remote repository. First, you can see that there is only one branch, as expected, called master.</FONT></P>
<P><FONT class=extract># List all branches </FONT></P>
<P><FONT class=extract>$ git branch -a </FONT></P>
<P><FONT class=extract>* master</FONT></P>
<P><FONT class=extract>Now, use git remote update:</FONT></P>
<P><FONT class=extract>$ git remote update</FONT></P>
<P><FONT class=extract>Updating origin </FONT></P>
<P><FONT class=extract>From /tmp/Depot/public_html</FONT></P>
<P><FONT class=extract>* [new branch] master -&gt; origin/master </FONT></P>
<P><FONT class=extract>$ git branch -a </FONT></P>
<P><FONT class=extract>* master</FONT></P>
<P><FONT class=extract>origin/master</FONT></P>
<P><FONT class=extract>Depending on your version of Git,( 2. Version 1.6.3 appears to be the delineation here.) the remote-tracking branch ref may be shown with or without the remotes/ prefix:</FONT></P>
<P><FONT class=extract>$ git branch -a </FONT></P>
<P><FONT class=extract>* master</FONT></P>
<P><FONT class=extract>remotes/origin/master</FONT></P>
<P><FONT class=extract>Git introduced a new branch called origin/master into the repository. It is a remote tracking branch within the origin remote. Nobody does development in this branch. Instead, its purpose is to hold and track the commits made in the remote origin repository&#8217;s master branch. You could consider it your local repository&#8217;s proxy for commits made in the remote; eventually you can use it to bring those commits into your repository.</FONT></P>
<P><FONT class=extract>The phrase Updating origin, produced by the git remote update, doesn&#8217;t mean that the remote repository was updated. Rather, it means that the local repository&#8217;s notion of the origin has been updated based on information brought in from the remote repository.</FONT></P>
<P><FONT class=extract>The generic git remote update caused every remote within this repository to be updated by checking for and then fetching any new commits from each repository named in a remote. Rather than generically updating all remotes, you can restrict the operation to fetch updates from a single remote by supplying the desired remote name on the git remote update command: </FONT></P>
<P><FONT class=extract>$ git remote update remote_name</FONT></P>
<P><FONT class=extract>Also, using the -f option when the remote is initially added causes an immediate fetch of from that remote repository: </FONT></P>
<P><FONT class=extract>$ git remote add -f origin repository</FONT></P>
<P><FONT class=extract>Now you&#8217;re done linking your repository to the remote repository in your depot.</FONT>