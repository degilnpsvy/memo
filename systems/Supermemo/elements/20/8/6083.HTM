Referring to Remote Repositories 
<P></P>
<P>Git supports several forms of Uniform Resource Locators (URLs) that can be used to name remote repositories. These forms specify both an access protocol and the location or address of the data. </P>
<P>Technically, Git&#8217;s forms of URLs are neither true URLs nor Uniform Resource Identifiers (URIs), because none entirely conform to RFC 1738 or RFC 2396, respectively. However, because of their versatile utility in naming the location of Git repositories, Git&#8217;s variants are usually referred to as Git URLs. Furthermore, the .git/config file uses the name url as well. </P>
<P><FONT class=extract>As you have seen, the simplest form of Git URL refers to a repository on a local filesystem, be it a true physical filesystem or a virtual filesystem mounted locally via the Network File System (NFS). There are two permutations: </FONT></P>
<P><FONT class=extract>/path/to/repo.git </FONT></P>
<P><A href="file:///path/to/repo.git"><FONT class=extract>file:///path/to/repo.git</FONT></A><FONT class=extract> </FONT></P>
<P><FONT class=extract>Although these two formats are essentially identical, there is a subtle but important distinction between the two. The former uses hard links within the filesystem to directly share exactly the same objects between the current and remote repository; the latter copies the objects instead of sharing them directly. To avoid issues associated with shared repositories, the file:// form is recommended.</FONT> </P>
<P>The other forms of the Git URL refer to repositories on remote systems. </P>
<P>When you have a truly remote repository whose data must be retrieved across a network, the most efficient form of data transfer is often called the Git native protocol, which refers to the custom protocol used internally by Git to transfer data. Examples of a native protocol URL include: </P>
<P>git://example.com/path/to/repo.git </P>
<P>git://example.com/~user/path/to/repo.git </P>
<P>These forms are used by git-daemon to publish repositories for anonymous read. You can both clone and fetch using these URL forms. </P>
<P>The clients that use these formats are not authenticated, and no password will be requested. Hence, whereas a ~user format can be employed to refer to a user&#8217;s home directory, a bare ~ has no context for an expansion; there is no authenticated user whose home directory can be used. Furthermore, the ~user form works only if the server side allows it with the --user-path option. </P>
<P>For secure, authenticated connections, the Git native protocol can be tunneled over Secure Shell(SSH) connection using the following URL templates:</P>
<P>ssh://[user@]example.com[:port]/path/to/repo.git </P>
<P>ssh://[user@]example.com/path/to/repo.git </P>
<P>ssh://[user@]example.com/~user2/path/to/repo.git </P>
<P>ssh://[user@]example.com/~/path/to/repo.git </P>
<P>The third form allows for the possibility of two different user names. The first is the user under whom the session is authenticated, and the second is the user whose home directory is accessed. </P>
<P>Git also supports a URL form with scp-like syntax. It&#8217;s identical to the SSH forms, but there is no way to specify a port parameter: </P>
<P>[user@]example.com:/path/to/repo.git </P>
<P>[user@]example.com:~user/path/to/repo.git </P>
<P>[user@]example.com:path/to/repo.git </P>
<P>Although the HTTP and HTTPS URL variants have been fully supported since the early days of Git, they have undergone some important changes after Version 1.6.6. </P>
<P><A href="http://example.com/path/to/repo.git">http://example.com/path/to/repo.git</A> </P>
<P><A href="https://example.com/path/to/repo.git">https://example.com/path/to/repo.git</A> </P>
<P>Prior to Git Version 1.6.6, neither the HTTP nor the HTTPS protocols were as efficient as the Git native protocol. In Version 1.6.6, the HTTP protocols were improved dramatically and have become essentially as efficient as the native Git protocols. Git literature refers to this implementation as &#8220;smart&#8221; in contrast to the prior, so-called &#8220;dumb&#8221; implementation. </P>
<P>With the HTTP efficiency benefit realized now, the utility of the http:// and https:// URL forms will likely become more important and popular. Notably, most corporate firewalls allow the HTTP port 80 and HTTPS port 443 to remain open while the default Git port 9418 is typically blocked and would require an act of Congress to open it. Furthermore, these URL forms are being favored by popular Git hosting sites like GitHub. </P>
<P>Finally, the Rsync protocol can be specified: </P>
<P>rsync://example.com/path/to/repo.git </P>
<P>The use of Rsync is discouraged because it is inferior to the other options. If absolutely necessary, it should be used only for an initial clone, at which point the remote repository reference should be changed to one of the other mechanisms. Continuing to use the Rsync protocol for later updates may lead to the loss of locally created data.