Example Using Remote Repositories 
<P></P>
<P>Now you have the basis for some sophisticated sharing via Git. Without a loss of generality and to make examples easy to run on your own system, this section shows multiple repositories on one physical machine. In real life, they&#8217;d probably be located on different hosts across the Internet. Other forms of remote URL specification may be used because the same mechanisms apply to repositories on physically disparate machines as well. </P>
<P><FONT class=extract>Let&#8217;s explore a common use scenario for Git. For the sake of illustration, let&#8217;s set up a repository that all developers consider authoritative, although technically it&#8217;s no different from other repositories. In other words, authority lies in how everyone agrees to treat the repository, not in some technical or security measure.</FONT></P>
<P>This agreed on authoritative copy is often placed in a special directory known as a depot. (Avoid using the terms &#8220;master&#8221; or &#8220;repository&#8221; when referring to the depot, because those idioms mean something else in Git.)</P>
<P>There are often good reasons for setting up a depot. For instance, your organization may thereby reliably and professionally back up the filesystems of some large server. You want to encourage your coworkers to check everything into the main copy within the depot in order to avoid catastrophic losses. The depot will be the remote origin for all developers.</P>
<P>The following sections show how to place an initial repository in the depot, clone development repositories out of the depot, do development work within them, and then sync them with the depot.</P>
<P>To illustrate parallel development on this repository, a second developer will clone it, work with his repository, and then push his changes back into the depot for all to use.