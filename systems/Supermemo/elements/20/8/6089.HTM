Pushing Your Changes 
<P></P>
<P><FONT class=extract>Any change that you commit is completely local to your repository; it is not yet present in the remote repository. A convenient way to get your commits from your master branch into the origin remote repository is to use the git push command.</FONT> <FONT class=extract>Depending on your version of Git, the master parameter on this command was assumed. </FONT></P>
<P><FONT class=extract>$ git push origin master </FONT></P>
<P><FONT class=extract>Counting objects: 4, done. </FONT></P>
<P><FONT class=extract>Compressing objects: 100% (3/3), done. </FONT></P>
<P><FONT class=extract>Writing objects: 100% (3/3), 400 bytes, done. </FONT></P>
<P><FONT class=extract>Total 3 (delta 0), reused 0 (delta 0) </FONT></P>
<P><FONT class=extract>Unpacking objects: 100% (3/3), done. </FONT></P>
<P><FONT class=extract>To /tmp/Depot/public_html </FONT></P>
<P><FONT class=extract>0d4ce8a..6f16880 master -&gt; master</FONT></P>
<P><FONT class=extract>All that output means that Git has taken your master branch changes, bundled them up, and sent them to the remote repository named origin. Git has also performed one more step here: it has taken those same changes and added them to the origin/master branch in your repository as well. In effect, Git has caused the changes that were originally on your master branch to be sent to the remote repository and then has requested that they be brought back onto the origin/master remote-tracking branch as well.</FONT></P>
<P><FONT class=extract>Git doesn&#8217;t actually round-trip the changes. After all, the commits are already in your repository. Git is smart enough to instead simply fast-forward the remote-tracking branch.</FONT></P>
<P>Now both local branches, master and origin/master, reflect the same commit within your repository: </P>
<P>$ git show-branch -a </P>
<P>* [master] Add a hairy poem. </P>
<P>&nbsp;! [origin/master] Add a hairy poem.</P>
<P>-- </P>
<P>*+ [master] Add a hairy poem.</P>
<P>You can also probe the remote repository and verify that it, too, has been updated. If your remote repository is on a local filesystem, as it is here, then you can easily check by going to the depot directory: </P>
<P>$ cd /tmp/Depot/public_html.git </P>
<P>$ git show-branch </P>
<P>[master] Add a hairy poem.</P>
<P>When the remote repository is on a physically different machine, a plumbing command can be used to determine the branch information of the remote repository: </P>
<P># Go to the actual remote repo and query it </P>
<P>$ git ls-remote origin</P>
<P>6f168803f6f1b987dffd5fff77531dcadf7f4b68 HEAD </P>
<P>6f168803f6f1b987dffd5fff77531dcadf7f4b68 refs/heads/master</P>
<P>You can then show that those commit IDs match your current, local branches using something like git rev-parse HEAD or git show commit-id.