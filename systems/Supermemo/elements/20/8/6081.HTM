Tracking Branches 
<P></P>
<P><FONT class=extract>Once you clone a repository, you can keep up with changes in the original source repository even as you make local commits and create local branches.</FONT> </P>
<P>As Git itself has evolved, some terminology around branch names have also evolved and become more standard. To help clarify the purposes of the various branches, different namespaces have been created. Although any branch in your local repository is still considered a local branch, they can be further divided into different categories. </P>
<P><FONT class=extract><FONT class=extract>? Remote-tracking branches are associated with a remote and have the specific purpose of following the changes of each branch in that remote repository.</FONT> </FONT></P>
<P><FONT class=extract><FONT class=extract>? A local-tracking branch is paired with a remote-tracking branch. It is a form of integration branch that collects both the changes from your local development and the changes from the remote-tracking branch.</FONT> </FONT></P>
<P><FONT class=extract><FONT class=extract>? Any local, nontracking branch is usually generically called a topic or development branch.</FONT> </FONT></P>
<P><FONT class=extract>? Finally, to complete the namespaces, a remote branch is a branch located in a nonlocal, remote repository. It is likely an upstream source for a remote-tracking branch.</FONT> </P>
<P><FONT class=extract>During a clone operation, Git creates a remote-tracking branch in the clone for each topic branch in the upstream repository. The set of remote-tracking branches is introduced in a new, separate namespace within the local repository that is specific to the remote being cloned. They are not branches in a remote repository. The local repository uses its remote-tracking branches to follow or track changes made in the remote repository.</FONT> </P>
<P><FONT class=extract>You may recall from &#8220;refs and symrefs&#8221; on page 68 of Chapter 6 that a local topic branch that you call dev is really named refs/heads/dev. Similarly, remote-tracking branches are retained in the refs/remotes/ namespace. Thus, the remote-tracking branch origin/master is actually refs/remotes/origin/master.</FONT> </P>
<P>Because remote-tracking branches are lumped into their own namespace, there is a clear separation between branches made in a repository by you (topic branches) and those branches that are actually based on another, remote repository (remote-tracking branches). In the early Git days, the separate namespaces were just convention and best practice, designed to help prevent you from making accidental conflicts. With later versions of Git, the separate namespaces are much more than convention: it is an integral part of how you are expected to use your branches to interact with your upstream repositories. </P>
<P><FONT class=extract>All the operations that you can perform on a regular topic branch can also be performed on a tracking branch. However, there are some restrictions and guidelines to observe. Because remote-tracking branches are used exclusively to follow the changes from another repository, you should effectively treat them as read only. You shouldn&#8217;t merge or make commits onto a remote-tracking branch. Doing so would cause your remote tracking branch to become out of sync with the remote repository. Worse, each future update from the remote repository would likely require merging, making your clone increasingly more difficult to manage. The proper management of tracking branches is covered in more detail later in this chapter</FONT>