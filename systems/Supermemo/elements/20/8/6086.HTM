Creating an Authoritative Repository 
<P></P>
<P>You can place your authoritative depot anywhere on your filesystem; for this example, let&#8217;s use /tmp/Depot. No actual development work should be done directly in the /tmp/Depot directory or in any of its repositories. Instead, individual work should be performed in a local clone. </P>
<P>In practice, this authoritative upstream repository would likely already be hosted on some server, perhaps GitHub, git.kernel.org, or one of your private machines.</P>
<P><FONT class=extract>These steps, however, outline what is necessary to transform a repository into another bare clone repository capable of being the authoritative upstream source repository. The first step is to populate /tmp/Depot with an initial repository. Assuming you want to work on website content that is already established as a Git repository in ~/public_ html, make a copy of the ~/public_html repository and place it in /tmp/Depot/public_html.git.</FONT></P>
<P><FONT class=extract># Assume that ~/public_html is already a Git repository </FONT></P>
<P><FONT class=extract>$ cd /tmp/Depot/ </FONT></P>
<P><FONT class=extract>$ git clone --bare ~/public_html public_html.git</FONT></P>
<P><FONT class=extract>Initialized empty Git repository in /tmp/Depot/public_html.git/</FONT></P>
<P><FONT class=extract>This clone command copies the Git remote repository from ~/public_html into the current working directory, /tmp/Depot. The last argument gives the repository a new name, public_html.git. By convention, bare repositories are named with a .git suffix. This is not a requirement, but it is considered a best practice.</FONT></P>
<P><FONT class=extract>The original development repository has a full set of project files checked out at the top level, and the object store and all of the configuration files are located in the .git subdirectory:</FONT></P>
<P><FONT class=extract>$ cd ~/public_html/ </FONT></P>
<P><FONT class=extract>$ ls -aF </FONT></P>
<P><FONT class=extract>./ fuzzy.txt index.html techinfo.txt </FONT></P>
<P><FONT class=extract>../ .git/ poem.html </FONT></P>
<P><FONT class=extract>$ ls -aF .git </FONT></P>
<P><FONT class=extract>./ config hooks/ objects/ </FONT></P>
<P><FONT class=extract>../ description index ORIG_HEAD</FONT></P>
<P><FONT class=extract>branches/ FETCH_HEAD info/ packed-refs </FONT></P>
<P><FONT class=extract>COMMIT_EDITMSG HEAD logs/ refs/</FONT></P>
<P><FONT class=extract>Because a bare repository has no working directory, its files have a simpler layout: </FONT></P>
<P><FONT class=extract>$ cd /tmp/Depot/ </FONT></P>
<P><FONT class=extract>$ ls -aF public_html.git </FONT></P>
<P><FONT class=extract>./ branches/ description hooks/ objects/ refs/ </FONT></P>
<P><FONT class=extract>../ config HEAD info/ packed-refs</FONT></P>
<P>You can now treat this bare /tmp/Depot/public_html.git repository as the authoritative version.</P>
<P>Because you used the --bare option during this clone operation, Git did not introduce the normal, default origin remote.</P>
<P>Here&#8217;s the configuration in the new, bare repository: </P>
<P># In /tmp/Depot/public_html.git </P>
<P>$ cat config</P>
<P>[core] </P>
<P>repositoryformatversion = 0 </P>
<P>filemode = true </P>
<P>bare = true