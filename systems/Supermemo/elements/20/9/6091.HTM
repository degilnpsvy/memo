Getting Repository Updates 
<P></P>
<P>Let&#8217;s suppose that Bob goes on vacation and, in the meantime, you make further changes and push them to the depot repository. Let&#8217;s assume you did this after getting Bob&#8217;s latest changes. </P>
<P>Your commit looks like this: </P>
<P>$ cd ~/public_html </P>
<P>$ git diff</P>
<P>diff --git a/index.html b/index.html </P>
<P>index 40b00ff..063ac92 100644 </P>
<P>--- a/index.html </P>
<P>+++ b/index.html </P>
<P>@@ -1,5 +1,7 @@ </P>
<P>html </P>
<P>body </P>
<P>My web site is alive! </P>
<P>+br/ </P>
<P>+Read a a href="fuzzy.txt"hairy/a poem! </P>
<P>/body </P>
<P>html</P>
<P>$ git commit -m "Add a hairy poem link." index.html </P>
<P>Created commit 55c15c8: Add a hairy poem link. </P>
<P>1 files changed, 2 insertions(+), 0 deletions(-) Using the default push refspec, push your commit upstream:</P>
<P>$ git push </P>
<P>Counting objects: 5, done. </P>
<P>Compressing objects: 100% (3/3), done. </P>
<P>Unpacking objects: 100% (3/3), done. </P>
<P>Writing objects: 100% (3/3), 348 bytes, done. </P>
<P>Total 3 (delta 1), reused 0 (delta 0) </P>
<P>To /tmp/Depot/public_html </P>
<P>3958f68..55c15c8 master -&gt; master</P>
<P>Now, when Bob returns he&#8217;ll want to refresh his clone of the repository. The primary command for doing this is git pull: </P>
<P>$ git pull</P>
<P>remote: Counting objects: 5, done. </P>
<P>remote: Compressing objects: 100% (3/3), done. </P>
<P>remote: Total 3 (delta 1), reused 0 (delta 0) </P>
<P>Unpacking objects: 100% (3/3), done. </P>
<P>From /tmp/Depot/public_html </P>
<P>3958f68..55c15c8 master -&gt; origin/master</P>
<P>Updating 3958f68..55c15c8 </P>
<P>Fast forward </P>
<P>index.html | 2 ++ </P>
<P>1 files changed, 2 insertions(+), 0 deletions(-)</P>
<P>The fully specified git pull command allows both the repository and multiple refspecs to be specified: git pull options repository refspecs.</P>
<P>If the repository is not specified on the command line, either as a Git URL or indirectly through a remote name, then the default remote origin is used. If you don&#8217;t specify a refspec on the command line, the fetch refspec of the remote is used. If you specify a repository (directly or using a remote) but no refspec, Git fetches the HEAD ref of the remote.</P>
<P><FONT class=extract>The git pull operation is fundamentally two steps, each implemented by a separate Git command. Namely, git pull implies git fetch followed by either git merge or git rebase. By default, the second step is merge because this is almost always the desired behavior.</FONT></P>
<P><FONT class=extract>Because pull also performs the second merge or rebase step, git push and git pull are not considered opposites. Instead, git push and git fetch are considered opposites. Both push and fetch are responsible for transferring data between repositories, but in opposite directions.</FONT></P>
<P>Sometimes you may want to execute the git fetch and git merge as two separate operations. For example, you may want to fetch updates into your repository to inspect them but not necessarily merge immediately. In this case, you can simply perform the fetch, and then perform other operations on the remote-tracking branch such as git log, git diff, or even gitk. Later, when you are ready (if ever!), you may perform the merge at your convenience.</P>
<P>Even if you never separate the fetch and merge, you may do complex operations that require you to know what&#8217;s happening at each step. So let&#8217;s look at each one in detail.