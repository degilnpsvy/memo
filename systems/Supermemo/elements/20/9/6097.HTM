<HEAD></HEAD>
<BODY>
<P>Cloning a Repository </P>
<P>A git clone command results in two separate repositories, as shown in Figure 12-2. This picture illustrates some important results of the clone operation: </P>
<P>? All the commits from the original repository are copied to your clone; you could now easily retrieve earlier stages of the project from your own repository. </P>
<P>? The branch named master from the original repository is introduced into your clone on a new remote-tracking branch named origin/master. </P>
<P>? Within the new clone repository, the new origin/master branch is initialized to point to the master HEAD commit, which is B in the figure. </P>
<P>&nbsp;</P>
<P>Figure 12-2. Cloned repository </P>
<P>? A new local-tracking branch called master is created in your clone. </P>
<P>? The new master branch is initialized to point to origin/HEAD, the original repository&#8217;s active branch HEAD. That happens to be origin/master, so it also points to the exact same commit, B.</P>
<P>After cloning, Git selects the new master branch as the current branch and checks it out for you. Thus, unless you change branches, any changes you make after a clone will affect your master.</P>
<P>In all of these diagrams, development branches in both the original repository and the derived clone repository are distinguished by a dark shaded background, and remotetracking branches by a lighter shaded background. It is important to understand that both the local-tracking development branches and remote-tracking branches are private and local to their respective repositories. In terms of Git&#8217;s implementation, however, the dark shaded branch labels belong to the refs/heads/ namespace whereas, the lighter ones belong to refs/remotes/.</P></BODY>