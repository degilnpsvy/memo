Using git remote 
<P></P>
<P><FONT class=extract>The git remote command is a more specialized interface, specific to remotes, that manipulates the configuration file data and remote refs. It has several subcommands with fairly intuitive names. There is no help option, but you can circumvent that to display a message with subcommand names via the &#8220;unknown subcommand trick&#8221;: </FONT></P>
<P><FONT class=extract>$ git remote xyzzy </FONT></P>
<P><FONT class=extract>error: Unknown subcommand: xyzzy </FONT></P>
<P><FONT class=extract>usage: git remote </FONT></P>
<P><FONT class=extract>or: git remote add </FONT></P>
<P><NAME><URL><FONT class=extract>or: git remote rm </FONT></P>
<P><NAME><FONT class=extract>or: git remote show </FONT></P>
<P><NAME><FONT class=extract>or: git remote prune </FONT></P>
<P><NAME><FONT class=extract>or: git remote update [group] </FONT></P>
<P><FONT class=extract>-v, --verbose be verbose</FONT> </P>
<P>You saw the git remote add and update commands in the section &#8220;Make Your Own Origin Remote&#8221; on page 206, earlier in this chapter, and you saw show in &#8220;Adding a New Developer&#8221; on page 210. <FONT class=extract>You used git remote add origin to add a new remote named origin to the newly created parent repository in the depot, and you ran the git remote show origin command to extract all the information about the remote origin. Finally, you used the git remote update command to fetch all the updates available in the remote repository into your local repository. </FONT></P>
<P><FONT class=extract>The command git remote rm removes the given remote and all of its associated remotetracking branches from your local repository. To remove just one remote-tracking branch from your local repository, use a command like this: </FONT></P>
<P><FONT class=extract>$ git branch -r -d origin/dev </FONT></P>
<P><FONT class=extract>But you shouldn&#8217;t really do that unless the corresponding remote branch really has been removed from the upstream repository. Otherwise, your next fetch from the upstream repository is likely to recreate the branch again.</FONT> </P>
<P><FONT class=extract>The remote repository may have branches deleted from it by the actions of other developers, even though your copies of those branches may linger in your repository. The git remote prune command may be used to remove the names of those stale (with respect to the actual remote repository) remote-tracking branches from your local repository.</FONT> </P>
<P><FONT class=extract>To keep even more in sync with an upstream remote, use the command git remote update --prune remote to first get updates from the remote and then prune stale tracking branches all in one step. </FONT></P>
<P><FONT class=extract>To rename a remote and all of its refs, use git remote rename old new. After this command: </FONT></P>
<P><FONT class=extract>$ git remote rename jon jdl </FONT></P>
<P><FONT class=extract>any ref like jon/bugfixes will be renamed as jdl/bugfixes. </FONT></P>
<P><FONT class=extract>In addition to manipulations of the remote name and its refs, you can also update or change the URL of the remote: </FONT></P>
<P><FONT class=extract>$ git remote set-url origin git://repos.example.com/stuff.git</FONT>