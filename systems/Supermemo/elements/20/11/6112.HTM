Using git config </P>
<P>The git config command can be used to manipulate the entries in your configuration file directly. This includes several config variables for remotes. </P>
<P>For example, to add a new remote named publish with a push refspec for all the branches you would like to publish, you might do something like this: </P>
<P>$ git config remote.publish.url 'ssh://git.example.org/pub/repo.git' </P>
<P>$ git config remote.publish.push '+refs/heads/*:refs/heads/*' </P>
<P>Each of the preceding commands adds a line to the .git/config file. If no publish remote section exists yet, then the first command you issue that refers to that remote creates a section in the file for it. As a result, your .git/config contains, in part, the following remote definition: </P>
<P>[remote "publish"] </P>
<P>url = ssh://git.example.org/pub/repo.git </P>
<P>push = +refs/heads/*:refs/heads/* </P>
<P>Use the -l (lowercase L) option &#224; la git config -l to list the contents of the configuration file with complete variable names: </P>
<P># From a clone of git.git sources </P>
<P>$ git config -l </P>
<P>core.repositoryformatversion=0 </P>
<P>core.filemode=true </P>
<P>core.bare=false </P>
<P>core.logallrefupdates=true </P>
<P>remote.origin.url=git://git.kernel.org/pub/scm/git/git.git </P>
<P>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* </P>
<P>branch.master.remote=origin </P>
<P>branch.master.merge=refs/heads/master