Ahead and Behind </P>
<P>With the establishment of a local- and remote-tracking branch pair, relative comparisons between the two branches can be made. In addition to the normal diff, log, and other content-based comparisons, Git offers a quick summary of the number of commits on each of the branches and states which branch it judges to be &#8220;ahead of&#8221; or &#8220;behind&#8221; the other branch. </P>
<P>If your local development introduces new commits on a local-tracking branch, it is considered to be ahead of the corresponding remote-tracking branch. Conversely, if you fetch new commits onto remote-tracking branches and they are not present on your local-tracking branch, Git considers your local-tracking branch to be behind the corresponding remote-tracking branch. </P>
<P>The git status usually reports this status: </P>
<P>$ git fetch </P>
<P>remote: Counting objects: 9, done. </P>
<P>remote: Compressing objects: 100% (6/6), done. </P>
<P>remote: Total 6 (delta 4), reused 0 (delta0) </P>
<P>Unpacking objects: 100% (6/6), done. </P>
<P>From example.com:SomeRepo </P>
<P>b1a68a8..b722324 ver2 -&gt; origin/ver2 </P>
<P>$ git status </P>
<P># On branch ver2 </P>
<P># Your branch is behind 'origin/ver2' by 2 commits, and can be fast-forwarded. </P>
<P>To see which commits you have in master that are not in origin/master, use a command like this: </P>
<P>$ git log origin/master..master </P>
<P>Yes, it is possible to be both ahead and behind simultaneously! </P>
<P># Make one local commit on top of previous example </P>
<P>$ git commit -m "Something" main.c ... </P>
<P>$ git status </P>
<P># On branch ver2 </P>
<P># Your branch and 'origin/ver2' have diverged, </P>
<P># and have 1 and 2 different commit(s) each, respectively. </P>
<P>And in this case, you probably want to use the symmetric difference to see the changes: </P>
<P>$ git log origin/master...master