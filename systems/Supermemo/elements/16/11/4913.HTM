<H3 class=section style="FONT-FAMILY: 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">12.13 Advanced configuration</H3>
<H4 class=subheading style="FONT-SIZE: 15px; FONT-FAMILY: 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: 19px; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Hooks</H4>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><A name=index-org_002dexport_002dbefore_002dprocessing_002dhook-1811></A><A name=index-org_002dexport_002dbefore_002dparsing_002dhook-1812></A>Two hooks are run during the first steps of the export process. The first one,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-export-before-processing-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called before expanding macros, Babel code and include keywords in the buffer. The second one,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-export-before-parsing-hook</CODE>, as its name suggests, happens just before parsing the buffer. Their main use is for heavy duties, that is duties involving structural modifications of the document. For example, one may want to remove every headline in the buffer during export. The following code can achieve this:</P><PRE class=lisp style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     (defun my-headline-removal (backend)
       "Remove all headlines in the current buffer.
     BACKEND is the export back-end being used, as a symbol."
       (org-map-entries
        (lambda () (delete-region (point) (progn (forward-line) (point))))))
     
     (add-hook 'org-export-before-parsing-hook 'my-headline-removal)
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Note that functions used in these hooks require a mandatory argument, a symbol representing the back-end used.</P>
<H4 class=subheading style="FONT-SIZE: 15px; FONT-FAMILY: 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: 19px; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Filters</H4>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><A name=index-Filters_002c-exporting-1813></A>Filters are lists of functions applied on a specific part of the output from a given back-end. More explicitly, each time a back-end transforms an Org object or element into another language, all functions within a given filter type are called in turn on the string produced. The string returned by the last function will be the one used in the final output.</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">There are filters sets for each type of element or object, for plain text, for the parse tree, for the export options and for the final output. They are all named after the same scheme:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-export-filter-TYPE-functions</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TYPE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the type targeted by the filter. Valid types are:</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="33%">bold</TD>
<TD vAlign=top width="33%">babel-call</TD>
<TD vAlign=top width="33%">center-block<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">clock</TD>
<TD vAlign=top width="33%">code</TD>
<TD vAlign=top width="33%">comment<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">comment-block</TD>
<TD vAlign=top width="33%">diary-sexp</TD>
<TD vAlign=top width="33%">drawer<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">dynamic-block</TD>
<TD vAlign=top width="33%">entity</TD>
<TD vAlign=top width="33%">example-block<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">export-block</TD>
<TD vAlign=top width="33%">export-snippet</TD>
<TD vAlign=top width="33%">final-output<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">fixed-width</TD>
<TD vAlign=top width="33%">footnote-definition</TD>
<TD vAlign=top width="33%">footnote-reference<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">headline</TD>
<TD vAlign=top width="33%">horizontal-rule</TD>
<TD vAlign=top width="33%">inline-babel-call<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">inline-src-block</TD>
<TD vAlign=top width="33%">inlinetask</TD>
<TD vAlign=top width="33%">italic<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">item</TD>
<TD vAlign=top width="33%">keyword</TD>
<TD vAlign=top width="33%">latex-environment<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">latex-fragment</TD>
<TD vAlign=top width="33%">line-break</TD>
<TD vAlign=top width="33%">link<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">node-property</TD>
<TD vAlign=top width="33%">options</TD>
<TD vAlign=top width="33%">paragraph<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">parse-tree</TD>
<TD vAlign=top width="33%">plain-list</TD>
<TD vAlign=top width="33%">plain-text<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">planning</TD>
<TD vAlign=top width="33%">property-drawer</TD>
<TD vAlign=top width="33%">quote-block<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">quote-section</TD>
<TD vAlign=top width="33%">radio-target</TD>
<TD vAlign=top width="33%">section<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">special-block</TD>
<TD vAlign=top width="33%">src-block</TD>
<TD vAlign=top width="33%">statistics-cookie<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">strike-through</TD>
<TD vAlign=top width="33%">subscript</TD>
<TD vAlign=top width="33%">superscript<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">table</TD>
<TD vAlign=top width="33%">table-cell</TD>
<TD vAlign=top width="33%">table-row<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">target</TD>
<TD vAlign=top width="33%">timestamp</TD>
<TD vAlign=top width="33%">underline<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="33%">verbatim</TD>
<TD vAlign=top width="33%">verse-block</TD>
<TD vAlign=top width="33%"><BR></TD></TR></TBODY></TABLE></P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">For example, the following snippet allows me to use non-breaking spaces in the Org buffer and get them translated into LaTeX without using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\nbsp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_</CODE>stands for the non-breaking space):</P><PRE class=lisp style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     (defun my-latex-filter-nobreaks (text backend info)
       "Ensure \"&#32893;\" are properly handled in LaTeX export."
       (when (org-export-derived-backend-p backend 'latex)
             (replace-regexp-in-string "&#32893;" "~" text)))
     
     (add-to-list 'org-export-filter-plain-text-functions
                  'my-latex-filter-nobreaks)
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Three arguments must be provided to a fiter: the code being changed, the back-end used, and some information about the export process. You can safely ignore the third argument for most purposes. Note the use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-export-derived-backend-p</CODE>, which ensures that the filter will only be applied when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>latex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>back-end or any other back-end derived from it (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>beamer</CODE>).</P>
<H4 class=subheading style="FONT-SIZE: 15px; FONT-FAMILY: 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: 19px; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Extending an existing back-end</H4>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">This is obviously the most powerful customization, since the changes happen at the parser level. Indeed, some export back-ends are built as extensions of other ones (e.g. Markdown back-end an extension of HTML back-end).</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Extending a back-end means that if an element type is not transcoded by the new back-end, it will be handled by the original one. Hence you can extend specific parts of a back-end without too much work.</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">As an example, imagine we want the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ascii</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>back-end to display the language used in a source block, when it is available, but only when some attribute is non-<CODE>nil</CODE>, like the following:</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     #+ATTR_ASCII: :language t
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Because that back-end is lacking in that area, we are going to create a new back-end,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-ascii</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will do the job.</P><PRE class=lisp style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     (defun my-ascii-src-block (src-block contents info)
       "Transcode a SRC-BLOCK element from Org to ASCII.
     CONTENTS is nil.  INFO is a plist used as a communication
     channel."
       (if (not (org-export-read-attribute :attr_ascii src-block :language))
         (org-export-with-backend 'ascii src-block contents info)
       (concat
        (format ",--[ %s ]--\n%s`----"
                (org-element-property :language src-block)
                (replace-regexp-in-string
                 "^" "| "
                 (org-element-normalize-string
                  (org-export-format-code-default src-block info)))))))
     
     (org-export-define-derived-backend 'my-ascii 'ascii
       :translate-alist '((src-block . my-ascii-src-block)))
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-ascii-src-block</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function looks at the attribute above the element. If it isn&#37413;&#27291; true, it gives hand to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ascii</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>back-end. Otherwise, it creates a box around the code, leaving room for the language. A new back-end is then created. It only changes its behaviour when translating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>src-block</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type element. Now, all it takes to use the new back-end is calling the following from an Org buffer:</P><PRE class=smalllisp style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: smaller; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     (org-export-to-buffer 'my-ascii "*Org MY-ASCII Export*")
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">It is obviously possible to write an interactive function for this, install it in the export dispatcher menu, and so on.