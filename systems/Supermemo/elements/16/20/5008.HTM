<H3 class=section style="FONT-FAMILY: 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">A.10 Extracting agenda information</H3>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><A name=index-agenda_002c-pipe-2177></A><A name=index-Scripts_002c-for-agenda-processing-2178></A><A name=index-org_002dagenda_002dcustom_002dcommands-2179></A>Org provides commands to access agenda information for the command line in Emacs batch mode. This extracted information can be sent directly to a printer, or it can be read by a program that does further processing of the data. The first of these commands is the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-batch-agenda</CODE>, that produces an agenda view and sends it as ASCII text to STDOUT. The command takes a single string as parameter. If the string has length 1, it is used as a key to one of the commands you have configured in<CODE>org-agenda-custom-commands</CODE>, basically any key you can use after<SPAN class=Apple-converted-space>&nbsp;</SPAN><KBD>C-c a</KBD>. For example, to directly print the current TODO list, you could use</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr
</PRE>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">If the parameter is a string with 2 or more characters, it is used as a tags/TODO match string. For example, to print your local shopping list (all items with the tag &#8216;<SAMP><SPAN class=samp>shop</SPAN></SAMP>&#8217;, but excluding the tag &#8216;<SAMP><SPAN class=samp>NewYork</SPAN></SAMP>&#8217;), you could use</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     emacs -batch -l ~/.emacs                                      \
           -eval '(org-batch-agenda "+shop-NewYork")' | lpr
</PRE>
<P class=noindent style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">You may also modify parameters on the fly like this:</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     emacs -batch -l ~/.emacs                                      \
        -eval '(org-batch-agenda "a"                               \
                 org-agenda-span (quote month)                     \
                 org-agenda-include-diary nil                      \
                 org-agenda-files (quote ("~/org/project.org")))'  \
        | lpr
</PRE>
<P class=noindent style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">which will produce a 30-day agenda, fully restricted to the Org file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>~/org/projects.org</SPAN></SAMP>, not even including the diary.</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">If you want to process the agenda data in more sophisticated ways, you can use the command<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>org-batch-agenda-csv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get a comma-separated list of values for each agenda item. Each line in the output will contain a number of fields separated by commas. The fields in a line are:</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     category     <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The category of the item</SPAN>
     head         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The headline, without TODO keyword, TAGS and PRIORITY</SPAN>
     type         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The type of the agenda entry, can be</SPAN>
                     todo               <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">selected in TODO match</SPAN>
                     tagsmatch          <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">selected in tags match</SPAN>
                     diary              <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">imported from diary</SPAN>
                     deadline           <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">a deadline</SPAN>
                     scheduled          <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">scheduled</SPAN>
                     timestamp          <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">appointment, selected by timestamp</SPAN>
                     closed             <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">entry was closed on date</SPAN>
                     upcoming-deadline  <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">warning about nearing deadline</SPAN>
                     past-scheduled     <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">forwarded scheduled item</SPAN>
                     block              <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">entry has date block including date</SPAN>
     todo         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The TODO keyword, if any</SPAN>
     tags         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">All tags including inherited ones, separated by colons</SPAN>
     date         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The relevant date, like 2007-2-14</SPAN>
     time         <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The time, like 15:00-16:50</SPAN>
     extra        <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">String with extra planning info</SPAN>
     priority-l   <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The priority letter if any was given</SPAN>
     priority-n   <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The computed numerical priority</SPAN>
</PRE>
<P class=noindent style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Time and date will only be given if a timestamp (or deadline/scheduled) led to the selection of the item.</P>
<P style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); TEXT-ALIGN: justify; FONT: 15px/19px 'Droid Serif', 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Verdana, sans-serif; MARGIN-TOP: 0px; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">A CSV list like this is very easy to use in a post-processing script. For example, here is a Perl program that gets the TODO list from Emacs/Org and prints all the items, preceded by a checkbox:</P><PRE class=example style="OVERFLOW: auto; MARGIN-BOTTOM: 14pt; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: 'Courier New'; BORDER-RIGHT: medium none; FONT-VARIANT: normal; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-SPACING: 0px; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 12pt; FONT-STYLE: normal; PADDING-TOP: 12pt; PADDING-LEFT: 12pt; BORDER-LEFT: medium none; LETTER-SPACING: normal; PADDING-RIGHT: 12pt; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; box-shadow: rgb(136, 136, 136) 5px 5px 5px">     #!/usr/bin/perl
     
     # define the Emacs command to run
     $cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";
     
     # run it and capture the output
     $agenda = qx{$cmd 2&gt;/dev/null};
     
     # loop over all lines
     foreach $line (split(/\n/,$agenda)) {
       # get the individual values
       ($category,$head,$type,$todo,$tags,$date,$time,$extra,
        $priority_l,$priority_n) = split(/,/,$line);
       # process and print
       print "[ ] $head\n";
     }</PRE>