<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: gobject, Page: Tools Reference.. Table of Contents.. .. glib-mkenums é–?C language enum description generation utility .. glib-genmarshal é–?C code marshaller generation utility for GLib ...">
<meta http-equiv="keywords" content="SuperMemo, gobject, Tools Reference.. Table of Contents.. .. glib-mkenums é–?C language enum description generation utility .. glib-genmarshal é–?C code marshaller generation utility for GLib ...">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 14.04)">
<title>gobject: Tools Reference.. Table ... (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">gobject: Tools Reference.. Table ... </font></b><br>(3 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="28685.htm"> - Next</a> - <a href="28672.htm">Previous</a> - <a href="index.htm">Parent</a> - <a href="28685.htm">Next sibling</a> - <a href="28672.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">GObject Reference Manual.. .. for GObject 2.52.0 The latest version of this documentation can be found on-line at https://developer.gnome.org/gobject/unstable/.</a></li>
<ul>
<li>This page: Tools Reference.. Table of Contents.. .. glib-mkenums é–?C language enum description generation utility .. glib-genmarshal é–?C code marshaller generation utility for GLib ...</li>
<ol>
<li>glib-mkenums.. glib-mkenums éˆ?C language enum description generation utility.. .. Synopsis.. glib-mkenums [OPTION...] [FILE...].. Description.. glib-mkenums is a small perl ... (see <a href="#23037">below)</a>
<li>glib-genmarshal.. glib-genmarshal éˆ?C code marshaller generation utility for GLib closures.. .. Synopsis.. glib-genmarshal [OPTION...] [FILE...].. Description.. glib ... (see <a href="#23205">below)</a>
<li>gobject-query.. .. gobject-query é–?display a tree of types.. Synopsis.. gobject-query froots [OPTION...].. gobject-query tree [OPTION...].. .. Description.. .. gobject-query ... (see <a href="#28684">below)</a>
</ol>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<div align="center">
<center>
<table border="4" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFFF00" bordercolor="#FF0000">
<tr>
<td>
<b>Subject: Topic #23091: Tools Reference.. Table of Contents.. .. glib-mkenums &#38337;?C language enum description generation utility .. glib-genmarshal &#38337;?C code marshaller generation utility for GLib ...</b><p>
</td>
</tr>
<tr>
<td bordercolor="#FFCC00">
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title>Tools Reference</H1></DIV></DIV>
<HR>
</DIV>
<DIV class=toc>
<P><B>Table of Contents</B></P>
<DL class=toc>
<DT><SPAN class=refentrytitle><A href="https://developer.gnome.org/gobject/stable/glib-mkenums.html">glib-mkenums</A></SPAN><SPAN class=refpurpose> &#8212; C language enum description generation utility</SPAN> </DT>
<DT><SPAN class=refentrytitle><A href="https://developer.gnome.org/gobject/stable/glib-genmarshal.html">glib-genmarshal</A></SPAN><SPAN class=refpurpose> &#8212; C code marshaller generation utility for GLib closures</SPAN> </DT>
<DT><SPAN class=refentrytitle><A href="https://developer.gnome.org/gobject/stable/gobject-query.html">gobject-query</A></SPAN><SPAN class=refpurpose> &#8212; display a tree of types</SPAN> </DT></DL></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="23037">Topic #23037: glib-mkenums.. glib-mkenums &#38323;?C language enum description generation utility.. .. Synopsis.. glib-mkenums [OPTION...] [FILE...].. Description.. glib-mkenums is a small perl ...</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>glib-mkenums</SPAN></H2>
<P>glib-mkenums &#8212; C language enum description generation utility</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=cmdsynopsis>
<P><CODE class=command>glib-mkenums</CODE> [OPTION...] [FILE...]</P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.5></A>
<H2>Description</H2>
<P><SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> is a small perl-script utility that parses C code to extract enum definitions and produces enum descriptions based on text templates specified by the user. Most frequently this script is used to produce C code that contains enum values as strings so programs can provide value name strings for introspection. </P>
<P><SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> takes a list of valid C code files as input. The options specified control the text that is output, certain substitutions are performed on the text templates for keywords enclosed in @ characters. </P>
<DIV class=refsect2><A name=id-1.5.2.5.4></A>
<H3>Production text substitutions</H3>
<P>Certain keywords enclosed in @ characters will be substituted in the emitted text. For the substitution examples of the keywords below, the following example enum definition is assumed: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_THE_XVALUE    <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN> <SPAN class="gtkdoc opt">&lt;&lt;</SPAN> <SPAN class=number>3</SPAN><SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_ANOTHER_VALUE <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN> <SPAN class="gtkdoc opt">&lt;&lt;</SPAN> <SPAN class=number>4</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> PrefixTheXEnum<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term>@EnumName@</SPAN></P></TD>
<TD>
<P>The name of the enum currently being processed, enum names are assumed to be properly namespaced and to use mixed capitalization to separate words (e.g. PrefixTheXEnum). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@enum_name@</SPAN></P></TD>
<TD>
<P>The enum name with words lowercase and word-separated by underscores (e.g. prefix_the_xenum). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMNAME@</SPAN></P></TD>
<TD>
<P>The enum name with words uppercase and word-separated by underscores (e.g. PREFIX_THE_XENUM). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMSHORT@</SPAN></P></TD>
<TD>
<P>The enum name with words uppercase and word-separated by underscores, prefix stripped (e.g. THE_XENUM). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMPREFIX@</SPAN></P></TD>
<TD>
<P>The prefix of the enum name (e.g. PREFIX). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@VALUENAME@</SPAN></P></TD>
<TD>
<P>The enum value name currently being processed with words uppercase and word-separated by underscores, this is the assumed literal notation of enum values in the C sources (e.g. PREFIX_THE_XVALUE). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@valuenick@</SPAN></P></TD>
<TD>
<P>A nick name for the enum value currently being processed, this is usually generated by stripping common prefix words of all the enum values of the current enum, the words are lowercase and underscores are substituted by a minus (e.g. the-xvalue). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@valuenum@</SPAN></P></TD>
<TD>
<P>The integer value for the enum value currently being processed. This is calculated by using <SPAN class=command><STRONG>perl</STRONG></SPAN> to attempt to evaluate the expression as it appears in the C source code. If evaluation fails then <SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> will exit with an error status, but this only happens if <CODE class=literal>@valuenum@</CODE> appears in your value production template. (Since: 2.26) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@type@</SPAN></P></TD>
<TD>
<P>This is substituted either by "enum" or "flags", depending on whether the enum value definitions contained bit-shift operators or not (e.g. flags). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@Type@</SPAN></P></TD>
<TD>
<P>The same as <CODE class=literal>@type@</CODE> with the first letter capitalized (e.g. Flags). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@TYPE@</SPAN></P></TD>
<TD>
<P>The same as <CODE class=literal>@type@</CODE> with all letters uppercased (e.g. FLAGS). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@filename@</SPAN></P></TD>
<TD>
<P>The name of the input file currently being processed (e.g. foo.h). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@basename@</SPAN></P></TD>
<TD>
<P>The base name of the input file currently being processed (e.g. foo.h). (Since: 2.22) </P></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>

<DIV class=refsect2><A name=id-1.5.2.5.5></A>
<H3>Trigraph extensions</H3>
<P>Some C comments are treated specially in the parsed enum definitions, such comments start out with the trigraph sequence <CODE class=literal>/*&lt;</CODE> and end with the trigraph sequence <CODE class=literal>&gt;*/</CODE>. Per enum definition, the options "skip" and "flags" can be specified, to indicate this enum definition to be skipped, or for it to be treated as a flags definition, or to specify the common prefix to be stripped from all values to generate value nicknames, respectively. The "underscore_name" option can be used to specify the word separation used in the *_get_type() function. For instance, /*&lt; underscore_name=gnome_vfs_uri_hide_options &gt;*/. </P>
<P>Per value definition, the options "skip" and "nick" are supported. The former causes the value to be skipped, and the latter can be used to specify the otherwise auto-generated nickname. Examples: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN> <SPAN class=comment>/*&lt; skip &gt;*/</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_FOO
<SPAN class="gtkdoc opt">}</SPAN> PrefixThisEnumWillBeSkipped<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN> <SPAN class=comment>/*&lt; flags,prefix=PREFIX &gt;*/</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_THE_ZEROTH_VALUE<SPAN class="gtkdoc opt">,</SPAN>	<SPAN class=comment>/*&lt; skip &gt;*/</SPAN>
  PREFIX_THE_FIRST_VALUE<SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_THE_SECOND_VALUE<SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_THE_THIRD_VALUE<SPAN class="gtkdoc opt">,</SPAN>	<SPAN class=comment>/*&lt; nick=the-last-value &gt;*/</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> PrefixTheFlagsEnum<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.6></A>
<H2>Options</H2>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--fhead</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> prior to processing input files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--fprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> everytime a new input file is being processed. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--ftail</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> after all input files have been processed. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--eprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> everytime an enum is encountered in the input files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vhead</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> before iterating over the set of values of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> for every value of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vtail</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> after iterating over all values of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--comments</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Template for auto-generated comments, the default (for C code generations) is <CODE class=literal>"/* @comment@ */"</CODE>. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--template</CODE> <EM class=replaceable><CODE>FILE</CODE></EM></SPAN></P></TD>
<TD>
<P>Read templates from the given file. The templates are enclosed in specially-formatted C comments </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*** BEGIN section ***/</SPAN>
<SPAN class=comment>/*** END section ***/</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>where section may be <CODE class=literal>file-header</CODE>, <CODE class=literal>file-production</CODE>, <CODE class=literal>file-tail</CODE>, <CODE class=literal>enumeration-production</CODE>, <CODE class=literal>value-header</CODE>, <CODE class=literal>value-production</CODE>, <CODE class=literal>value-tail</CODE> or <CODE class=literal>comment</CODE>. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--identifier-prefix</CODE> <EM class=replaceable><CODE>PREFIX</CODE></EM></SPAN></P></TD>
<TD>
<P>Indicates what portion of the enum name should be intepreted as the prefix (eg, the "<CODE class=literal>Gtk</CODE>" in "<CODE class=literal>GtkDirectionType</CODE>"). Normally this will be figured out automatically, but you may need to override the default if your namespace is capitalized oddly. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--symbol-prefix</CODE> <EM class=replaceable><CODE>PREFIX</CODE></EM></SPAN></P></TD>
<TD>
<P>Indicates what prefix should be used to correspond to the identifier prefix in related C function names (eg, the "<CODE class=literal>gtk</CODE>" in "<CODE class=literal>gtk_direction_type_get_type</CODE>". Equivalently, this is the lowercase version of the prefix component of the enum value names (eg, the "<CODE class=literal>GTK</CODE>" in "<CODE class=literal>GTK_DIR_UP</CODE>". The default value is the identifier prefix, converted to lowercase. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--help</CODE></SPAN></P></TD>
<TD>
<P>Print brief help and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--version</CODE></SPAN></P></TD>
<TD>
<P>Print version and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--output=FILE</CODE></SPAN></P></TD>
<TD>
<P>Write output to FILE instead of stdout. </P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.7></A>
<H2>See also</H2>
<P><SPAN class=citerefentry><SPAN class=refentrytitle>glib-genmarshal</SPAN>(1)</SPAN> </P></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="23205">Topic #23205: glib-genmarshal.. glib-genmarshal &#38323;?C code marshaller generation utility for GLib closures.. .. Synopsis.. glib-genmarshal [OPTION...] [FILE...].. Description.. glib ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>glib-genmarshal</SPAN></H2>
<P>glib-genmarshal &#8212; C code marshaller generation utility for GLib closures</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=cmdsynopsis>
<P><CODE class=command>glib-genmarshal</CODE> [OPTION...] [FILE...]</P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.3.5></A>
<H2>Description</H2>
<P><SPAN class=command><STRONG>glib-genmarshal</STRONG></SPAN> is a small utility that generates C code marshallers for callback functions of the GClosure mechanism in the GObject sublibrary of GLib. The marshaller functions have a standard signature, they get passed in the invoking closure, an array of value structures holding the callback function parameters and a value structure for the return value of the callback. The marshaller is then responsible to call the respective C code function of the closure with all the parameters on the stack and to collect its return value. </P>
<P><SPAN class=command><STRONG>glib-genmarshal</STRONG></SPAN> takes a list of marshallers to generate as input. The marshaller list is either read from standard input or from files passed as additional arguments on the command line. </P>
<DIV class=refsect2><A name=id-1.5.3.5.4></A>
<H3>Marshaller list format</H3>
<P>The marshaller lists are processed line by line, a line can contain a comment in the form of </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc"># this is a comment</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>or a marshaller specification of the form </P><PRE class=programlisting><EM class=replaceable><CODE>RTYPE</CODE></EM>:<EM class=replaceable><CODE>PTYPE</CODE></EM>
<EM class=replaceable><CODE>RTYPE</CODE></EM>:<EM class=replaceable><CODE>PTYPE</CODE></EM>,<EM class=replaceable><CODE>PTYPE</CODE></EM>
<EM class=replaceable><CODE>RTYPE</CODE></EM>:<EM class=replaceable><CODE>PTYPE</CODE></EM>,<EM class=replaceable><CODE>PTYPE</CODE></EM>,<EM class=replaceable><CODE>PTYPE</CODE></EM>
</PRE>
<P>(up to 16 <EM class=replaceable><CODE>PTYPE</CODE></EM>s may be present). </P>
<P>The <EM class=replaceable><CODE>RTYPE</CODE></EM> part specifies the callback's return type and the <EM class=replaceable><CODE>PTYPE</CODE></EM>s right to the colon specify the callback's parameter list, except for the first and the last arguments which are always pointers. </P></DIV>
<HR>

<DIV class=refsect2><A name=id-1.5.3.5.5></A>
<H3>Parameter types</H3>
<P>Currently, the following types are supported: </P>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>VOID</CODE></EM></SPAN></P></TD>
<TD>
<P>indicates no return type, or no extra parameters. If <EM class=replaceable><CODE>VOID</CODE></EM> is used as the parameter list, no additional parameters may be present. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>BOOLEAN</CODE></EM></SPAN></P></TD>
<TD>
<P>for boolean types (gboolean) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>CHAR</CODE></EM></SPAN></P></TD>
<TD>
<P>for signed char types (gchar) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>UCHAR</CODE></EM></SPAN></P></TD>
<TD>
<P>for unsigned char types (guchar) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>INT</CODE></EM></SPAN></P></TD>
<TD>
<P>for signed integer types (gint) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>UINT</CODE></EM></SPAN></P></TD>
<TD>
<P>for unsigned integer types (guint) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>LONG</CODE></EM></SPAN></P></TD>
<TD>
<P>for signed long integer types (glong) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>ULONG</CODE></EM></SPAN></P></TD>
<TD>
<P>for unsigned long integer types (gulong) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>INT64</CODE></EM></SPAN></P></TD>
<TD>
<P>for signed 64bit integer types (gint64) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>UINT64</CODE></EM></SPAN></P></TD>
<TD>
<P>for unsigned 64bit integer types (guint64) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>ENUM</CODE></EM></SPAN></P></TD>
<TD>
<P>for enumeration types (gint) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>FLAGS</CODE></EM></SPAN></P></TD>
<TD>
<P>for flag enumeration types (guint) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>FLOAT</CODE></EM></SPAN></P></TD>
<TD>
<P>for single-precision float types (gfloat) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>DOUBLE</CODE></EM></SPAN></P></TD>
<TD>
<P>for double-precision float types (gdouble) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>STRING</CODE></EM></SPAN></P></TD>
<TD>
<P>for string types (gchar*) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>BOXED</CODE></EM></SPAN></P></TD>
<TD>
<P>for boxed (anonymous but reference counted) types (GBoxed*) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>PARAM</CODE></EM></SPAN></P></TD>
<TD>
<P>for GParamSpec or derived types (GParamSpec*) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>POINTER</CODE></EM></SPAN></P></TD>
<TD>
<P>for anonymous pointer types (gpointer) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>OBJECT</CODE></EM></SPAN></P></TD>
<TD>
<P>for GObject or derived types (GObject*) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>VARIANT</CODE></EM></SPAN></P></TD>
<TD>
<P>for GVariant types (GVariant*) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>NONE</CODE></EM></SPAN></P></TD>
<TD>
<P>deprecated alias for <EM class=replaceable><CODE>VOID</CODE></EM> </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><EM class=replaceable><CODE>BOOL</CODE></EM></SPAN></P></TD>
<TD>
<P>deprecated alias for <EM class=replaceable><CODE>BOOLEAN</CODE></EM> </P></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.3.6></A>
<H2>Options</H2>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--header</CODE></SPAN></P></TD>
<TD>
<P>Generate header file contents of the marshallers. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--body</CODE></SPAN></P></TD>
<TD>
<P>Generate C code file contents of the marshallers. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--prefix=<EM class=replaceable><CODE>PREFIX</CODE></EM></CODE></SPAN></P></TD>
<TD>
<P>Specify marshaller prefix. The default prefix is <CODE class=literal>`g_cclosure_marshal'</CODE>. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--skip-source</CODE></SPAN></P></TD>
<TD>
<P>Skip source location remarks in generated comments. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--stdinc</CODE></SPAN></P></TD>
<TD>
<P>Use the standard marshallers of the GObject library, and include <CODE class=filename>gmarshal.h</CODE> in generated header files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--nostdinc</CODE></SPAN></P></TD>
<TD>
<P>Do not use the standard marshallers of the GObject library, and skip <CODE class=filename>gmarshal.h</CODE> include directive in generated header files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--internal</CODE></SPAN></P></TD>
<TD>
<P>Mark generated functions as internal, using G_GNUC_INTERNAL. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--valist-marshallers</CODE></SPAN></P></TD>
<TD>
<P>Generate valist marshallers, for use with g_signal_set_va_marshaller(). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-v</CODE>, <CODE class=option>--version</CODE></SPAN></P></TD>
<TD>
<P>Print version information. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--g-fatal-warnings</CODE></SPAN></P></TD>
<TD>
<P>Make warnings fatal, that is, exit immediately once a warning occurs. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-h</CODE>, <CODE class=option>--help</CODE></SPAN></P></TD>
<TD>
<P>Print brief help and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-v</CODE>, <CODE class=option>--version</CODE></SPAN></P></TD>
<TD>
<P>Print version and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--output=FILE</CODE></SPAN></P></TD>
<TD>
<P>Write output to FILE instead of stdout. </P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.3.7></A>
<H2>Example</H2>
<P>To generate marshallers for the following callback functions: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">void</SPAN>   <SPAN class=function>foo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gpointer data1<SPAN class="gtkdoc opt">,</SPAN>
            gpointer data2<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN>   <SPAN class=function>bar</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gpointer data1<SPAN class="gtkdoc opt">,</SPAN>
            gint     param1<SPAN class="gtkdoc opt">,</SPAN>
            gpointer data2<SPAN class="gtkdoc opt">);</SPAN>
gfloat <SPAN class=function>baz</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gpointer data1<SPAN class="gtkdoc opt">,</SPAN>
            gboolean param1<SPAN class="gtkdoc opt">,</SPAN>
            guchar   param2<SPAN class="gtkdoc opt">,</SPAN>
            gpointer data2<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>The <CODE class=filename>marshaller.list</CODE> file has to look like this: </P><PRE class=programlisting>VOID:VOID
VOID:INT
FLOAT:BOOLEAN,UCHAR
</PRE>
<P>and you call glib-genmarshal like this: </P><PRE class=programlisting>glib-genmarshal --header marshaller.list &gt; marshaller.h
glib-genmarshal --body marshaller.list &gt; marshaller.c
</PRE>
<P>The generated marshallers have the arguments encoded in their function name. For this particular list, they are </P><PRE class=programlisting>g_cclosure_user_marshal_VOID__VOID(),
g_cclosure_user_marshal_VOID__INT(),
g_cclosure_user_marshal_FLOAT__BOOLEAN_UCHAR().
</PRE>
<P>They can be used directly for GClosures or be passed in as the GSignalCMarshaller c_marshaller; argument upon creation of signals: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>GClosure <SPAN class="gtkdoc opt">*</SPAN>cc_foo<SPAN class="gtkdoc opt">, *</SPAN>cc_bar<SPAN class="gtkdoc opt">, *</SPAN>cc_baz<SPAN class="gtkdoc opt">;</SPAN>

cc_foo <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-cclosure-new">g_cclosure_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>NULL<SPAN class="gtkdoc opt">,</SPAN> foo<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-closure-set-marshal">g_closure_set_marshal</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>cc_foo<SPAN class="gtkdoc opt">,</SPAN> g_cclosure_user_marshal_VOID__VOID<SPAN class="gtkdoc opt">);</SPAN>
cc_bar <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-cclosure-new">g_cclosure_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>NULL<SPAN class="gtkdoc opt">,</SPAN> bar<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-closure-set-marshal">g_closure_set_marshal</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>cc_bar<SPAN class="gtkdoc opt">,</SPAN> g_cclosure_user_marshal_VOID__INT<SPAN class="gtkdoc opt">);</SPAN>
cc_baz <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-cclosure-new">g_cclosure_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>NULL<SPAN class="gtkdoc opt">,</SPAN> baz<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Closures.html#g-closure-set-marshal">g_closure_set_marshal</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>cc_baz<SPAN class="gtkdoc opt">,</SPAN> g_cclosure_user_marshal_FLOAT__BOOLEAN_UCHAR<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.3.8></A>
<H2>See also</H2>
<P><SPAN class=citerefentry><SPAN class=refentrytitle>glib-mkenums</SPAN>(1)</SPAN> </P></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28684">Topic #28684: gobject-query.. .. gobject-query &#38337;?display a tree of types.. Synopsis.. gobject-query froots [OPTION...].. gobject-query tree [OPTION...].. .. Description.. .. gobject-query ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>gobject-query</SPAN></H2>
<P>gobject-query &#8212; display a tree of types</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=cmdsynopsis>
<P><CODE class=command>gobject-query</CODE> froots [OPTION...]</P></DIV>
<DIV class=cmdsynopsis>
<P><CODE class=command>gobject-query</CODE> tree [OPTION...]</P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.4.5></A>
<H2>Description</H2>
<P><SPAN class=command><STRONG>gobject-query</STRONG></SPAN> is a small utility that draws a tree of types. </P>
<P><SPAN class=command><STRONG>gobject-query</STRONG></SPAN> takes a mandatory argument that specifies whether it should iterate over the fundamental types or print a type tree. </P></DIV>
<DIV class=refsect1><A name=id-1.5.4.6></A>
<H2>Commands</H2>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>froots</CODE></SPAN></P></TD>
<TD>
<P>iterate over fundamental roots </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>tree</CODE></SPAN></P></TD>
<TD>
<P>print type tree </P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.4.7></A>
<H2>Options</H2>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-r</CODE> <EM class=replaceable><CODE>TYPE</CODE></EM></SPAN></P></TD>
<TD>
<P>specify the root type </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-n</CODE></SPAN></P></TD>
<TD>
<P>don't descend type tree </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-b</CODE> <EM class=replaceable><CODE>STRING</CODE></EM></SPAN></P></TD>
<TD>
<P>specify indent string </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-i</CODE> <EM class=replaceable><CODE>STRING</CODE></EM></SPAN></P></TD>
<TD>
<P>specify incremental indent string </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-s</CODE> <EM class=replaceable><CODE>NUMBER</CODE></EM></SPAN></P></TD>
<TD>
<P>specify line spacing </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-h</CODE>, <CODE class=option>--help</CODE></SPAN></P></TD>
<TD>
<P>Print brief help and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>-v</CODE>, <CODE class=option>--version</CODE></SPAN></P></TD>
<TD>
<P>Print version and exit. </P></TD></TR></TBODY></TABLE></DIV></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://www.supermemo.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.supermemo.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<a href="http://www.supermemo.com">www.supermemo.com</a><br>
date: 2017/4/11 17:57:01<br>
Page generated with:<br> SuperMemo 2008<br>Build: 14.04 of Feb 18, 2010
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
