<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: gobject, Page: Part IV. Tutorial.. .. This chapter tries to answer the real-life questions of users and presents the most common use cases in order from most likely to least likely. .. Table ...">
<meta http-equiv="keywords" content="SuperMemo, gobject, Part IV. Tutorial.. .. This chapter tries to answer the real-life questions of users and presents the most common use cases in order from most likely to least likely. .. Table ...">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 14.04)">
<title>gobject: Part IV. Tutorial.. .. ... (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">gobject: Part IV. Tutorial.. .. ... </font></b><br>(12 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="28695.htm"> - Next</a> - <a href="23091.htm">Previous</a> - <a href="index.htm">Parent</a> - <a href="28695.htm">Next sibling</a> - <a href="23091.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">GObject Reference Manual.. .. for GObject 2.52.0 The latest version of this documentation can be found on-line at https://developer.gnome.org/gobject/unstable/.</a></li>
<ul>
<li>This page: Part IV. Tutorial.. .. This chapter tries to answer the real-life questions of users and presents the most common use cases in order from most likely to least likely. .. Table ...</li>
<ol>
<li>How to define and implement a new GObject.. Boilerplate header code .. Boilerplate code .. Object construction .. Object destruction .. Object methods .. Non-virtual public ... (see <a href="#23291">below)</a>
<li>Boilerplate code.. In your code, the first step is to #include the needed headers: .. /*..  * Copyright information..  */.. .. #include "viewer-file.h".. .. /* Private ... (see <a href="#28686">below)</a>
<li>Object construction.. People often get confused when trying to construct their GObjects because of the sheer number of different ways to hook into the objects's construction ... (see <a href="#28687">below)</a>
<li>Object destruction.. Again, it is often difficult to figure out which mechanism to use to hook into the object's destruction process: when the last g_object_unref function call ... (see <a href="#28688">below)</a>
<li>Object methods.. Just as with C++, there are many different ways to define object methods and extend them: the following list and sections draw on C++ vocabulary. (Readers are ... (see <a href="#28689">below)</a>
<li>Chaining up.. Chaining up is often loosely defined by the following set of conditions: .. Parent class A defines a public virtual method named foo and provides a default ... (see <a href="#28690">below)</a>
<li>How to define and implement interfaces.. Defining interfaces.. Implementing interfaces.. Interface definition prerequisites.. Interface properties.. Overriding interface ... (see <a href="#28691">below)</a>
<li>Implementing interfaces.. Once the interface is defined, implementing it is rather trivial. .. The first step is to define a normal final GObject class exactly as in the ... (see <a href="#23286">below)</a>
<li>Interface definition prerequisites.. To specify that an interface requires the presence of other interfaces when implemented, GObject introduces the concept of prerequisites ... (see <a href="#23230">below)</a>
<li>Interface properties.. GObject interfaces can also have properties. Declaration of the interface properties is similar to declaring the properties of ordinary GObject types as ... (see <a href="#28692">below)</a>
<li>Overriding interface methods.. If a base class already implements an interface and a derived class needs to implement the same interface but needs to override certain methods ... (see <a href="#28693">below)</a>
<li>How to create and use signals.. Simple use of signals.. The signal system in GType is pretty complex and flexible: it is possible for its users to connect at runtime any number ... (see <a href="#28694">below)</a>
</ol>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<div align="center">
<center>
<table border="4" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFFF00" bordercolor="#FF0000">
<tr>
<td>
<b>Subject: Topic #28685: Part IV. Tutorial.. .. This chapter tries to answer the real-life questions of users and presents the most common use cases in order from most likely to least likely. .. Table ...</b><p>
</td>
</tr>
<tr>
<td bordercolor="#FFCC00">
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title>Part&nbsp;IV.&nbsp;Tutorial</H1></DIV></DIV></DIV>
<DIV class=partintro>
<DIV></DIV>
<P>This chapter tries to answer the real-life questions of users and presents the most common use cases in order from most likely to least likely. </P>
<DIV class=toc>
<P><B>Table of Contents</B></P>
<DL class=toc>
<DT><SPAN class=chapter><A href="https://developer.gnome.org/gobject/stable/howto-gobject.html">How to define and implement a new GObject</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject.html#howto-gobject-header">Boilerplate header code</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-code.html">Boilerplate code</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-construction.html">Object construction</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-destruction.html">Object destruction</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html">Object methods</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#non-virtual-public-methods">Non-virtual public methods</A></SPAN></DT>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#virtual-public-methods">Virtual public methods</A></SPAN></DT>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#virtual-private-methods">Virtual private Methods</A></SPAN></DT></DL></DD>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-chainup.html">Chaining up</A></SPAN></DT></DL></DD>
<DT><SPAN class=chapter><A href="https://developer.gnome.org/gobject/stable/howto-interface.html">How to define and implement interfaces</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface.html#howto-interface-define">Defining interfaces</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-implement.html">Implementing interfaces</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-prerequisite.html">Interface definition prerequisites</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-properties.html">Interface properties</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-override.html">Overriding interface methods</A></SPAN></DT></DL></DD>
<DT><SPAN class=chapter><A href="https://developer.gnome.org/gobject/stable/howto-signals.html">How to create and use signals</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-signals.html#howto-simple-signals">Simple use of signals</A></SPAN></DT></DL></DD></DL></DIV></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="23291">Topic #23291: How to define and implement a new GObject.. Boilerplate header code .. Boilerplate code .. Object construction .. Object destruction .. Object methods .. Non-virtual public ...</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>How to define and implement a new GObject</H2></DIV></DIV></DIV>
<DIV class=toc>
<DL class=toc>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject.html#howto-gobject-header">Boilerplate header code</A></SPAN> 
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-code.html">Boilerplate code</A></SPAN> 
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-construction.html">Object construction</A></SPAN> 
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-destruction.html">Object destruction</A></SPAN> 
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html">Object methods</A></SPAN> 
<DD>
<DL>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#non-virtual-public-methods">Non-virtual public methods</A></SPAN> 
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#virtual-public-methods">Virtual public methods</A></SPAN> 
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#virtual-private-methods">Virtual private Methods</A></SPAN></DT></DL>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-gobject-chainup.html">Chaining up</A></SPAN></DT></DL></DIV>
<P>This chapter focuses on the implementation of a subtype of GObject, for example to create a custom class hierarchy, or to subclass a GTK+ widget. </P>
<P>Throughout the chapter, a running example of a file viewer program is used, which has a <SPAN class=type>ViewerFile</SPAN> class to represent a single file being viewed, and various derived classes for different types of files with special functionality, such as audio files. The example application also supports editing files (for example, to tweak a photo being viewed), using a <SPAN class=type>ViewerEditable</SPAN> interface. </P>
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=howto-gobject-header></A>Boilerplate header code</H2></DIV></DIV></DIV>
<P>The first step before writing the code for your GObject is to write the type's header which contains the needed type, function and macro definitions. Each of these elements is nothing but a convention which is followed by almost all users of GObject, and has been refined over multiple years of experience developing GObject-based code. If you are writing a library, it is particularly important for you to adhere closely to these conventions; users of your library will assume that you have. Even if not writing a library, it will help other people who want to work on your project. </P>
<P>Pick a name convention for your headers and source code and stick to it: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>use a dash to separate the prefix from the typename: <CODE class=filename>viewer-file.h</CODE> and <CODE class=filename>viewer-file.c</CODE> (this is the convention used by Nautilus and most GNOME libraries).</P>
<LI class=listitem>
<P>use an underscore to separate the prefix from the typename: <CODE class=filename>viewer_file.h</CODE> and <CODE class=filename>viewer_file.c</CODE>.</P>
<LI class=listitem>
<P>Do not separate the prefix from the typename: <CODE class=filename>viewerfile.h</CODE> and <CODE class=filename>viewerfile.c</CODE>. (this is the convention used by GTK+)</P></LI></UL></DIV>
<P>Some people like the first two solutions better: it makes reading file names easier for those with poor eyesight. </P>
<P>The basic conventions for any header which exposes a GType are described in <A title=Conventions class=xref href="https://developer.gnome.org/gobject/stable/gtype-conventions.html">the section called &#8220;Conventions&#8221;</A>. </P>
<P>If you want to declare a type named &#8216;file&#8217; in namespace &#8216;viewer&#8217;, name the type instance <CODE class=function>ViewerFile</CODE> and its class <CODE class=function>ViewerFileClass</CODE> (names are case sensitive). The recommended method of declaring a type differs based on whether the type is final or derivable. </P>
<P>Final types cannot be subclassed further, and should be the default choice for new types &#8212; changing a final type to be derivable is always a change that will be compatible with existing uses of the code, but the converse will often cause problems. Final types are declared using <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE</CODE></A>, and require a structure to hold the instance data to be declared in the source code (not the header file). </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Copyright/Licensing information.</SPAN>
<SPAN class=comment> */</SPAN>

<SPAN class=comment>/* inclusion guard */</SPAN>
<SPAN class="gtkdoc ppc">#ifndef __VIEWER_FILE_H__</SPAN>
<SPAN class="gtkdoc ppc">#define __VIEWER_FILE_H__</SPAN>

<SPAN class="gtkdoc ppc">#include &lt;glib-object.h&gt;</SPAN>
<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Potentially, include other headers on which this header depends.</SPAN>
<SPAN class=comment> */</SPAN>

G_BEGIN_DECLS

<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Type declaration.</SPAN>
<SPAN class=comment> */</SPAN>
<SPAN class="gtkdoc ppc">#define VIEWER_TYPE_FILE viewer_file_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS">G_DECLARE_FINAL_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">FILE</SPAN><SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Method definitions.</SPAN>
<SPAN class=comment> */</SPAN>
ViewerFile <SPAN class="gtkdoc opt">*</SPAN><SPAN class=function>viewer_file_new</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">);</SPAN>

G_END_DECLS

<SPAN class="gtkdoc ppc">#endif</SPAN> <SPAN class=comment>/* __VIEWER_FILE_H__ */</SPAN><SPAN class="gtkdoc ppc"></SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Derivable types <SPAN class=emphasis><EM>can</EM></SPAN> be subclassed further, and their class and instance structures form part of the public API which must not be changed if API stability is cared about. They are declared using <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE</CODE></A>: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Copyright/Licensing information.</SPAN>
<SPAN class=comment> */</SPAN>

<SPAN class=comment>/* inclusion guard */</SPAN>
<SPAN class="gtkdoc ppc">#ifndef __VIEWER_FILE_H__</SPAN>
<SPAN class="gtkdoc ppc">#define __VIEWER_FILE_H__</SPAN>

<SPAN class="gtkdoc ppc">#include &lt;glib-object.h&gt;</SPAN>
<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Potentially, include other headers on which this header depends.</SPAN>
<SPAN class=comment> */</SPAN>

G_BEGIN_DECLS

<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Type declaration.</SPAN>
<SPAN class=comment> */</SPAN>
<SPAN class="gtkdoc ppc">#define VIEWER_TYPE_FILE viewer_file_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS">G_DECLARE_DERIVABLE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">FILE</SPAN><SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFileClass
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass parent_class<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* Class virtual function fields. */</SPAN>
  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN> open<SPAN class="gtkdoc opt">) (</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>file<SPAN class="gtkdoc opt">,</SPAN>
                 GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Padding to allow adding up to 12 new virtual functions without</SPAN>
<SPAN class=comment>   * breaking ABI. */</SPAN>
  gpointer padding<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>12</SPAN><SPAN class="gtkdoc opt">];</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Method definitions.</SPAN>
<SPAN class=comment> */</SPAN>
ViewerFile <SPAN class="gtkdoc opt">*</SPAN><SPAN class=function>viewer_file_new</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">);</SPAN>

G_END_DECLS

<SPAN class="gtkdoc ppc">#endif</SPAN> <SPAN class=comment>/* __VIEWER_FILE_H__ */</SPAN><SPAN class="gtkdoc ppc"></SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>The convention for header includes is to add the minimum number of <CODE class=function>#include</CODE> directives to the top of your headers needed to compile that header. This allows client code to simply <CODE class=function>#include "viewer-file.h"</CODE>, without needing to know the prerequisites for <CODE class=filename>viewer-file.h</CODE>. </P></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28686">Topic #28686: Boilerplate code.. In your code, the first step is to #include the needed headers: .. /*..  * Copyright information..  */.. .. #include "viewer-file.h".. .. /* Private ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Boilerplate code</H2></DIV></DIV></DIV>
<P>In your code, the first step is to <CODE class=function>#include</CODE> the needed headers: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Copyright information</SPAN>
<SPAN class=comment> */</SPAN>

<SPAN class="gtkdoc ppc">#include</SPAN> <SPAN class="gtkdoc pps">"viewer-file.h"</SPAN><SPAN class="gtkdoc ppc"></SPAN>

<SPAN class=comment>/* Private structure definition. */</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> <SPAN class="gtkdoc opt">{</SPAN>
  gchar <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=comment>/* stuff */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> ViewerFilePrivate<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class=comment>/* </SPAN>
<SPAN class=comment> * forward definitions</SPAN>
<SPAN class=comment> */</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>If the class is being declared as final using <CODE class=function>G_DECLARE_FINAL_TYPE</CODE>, its instance structure should be defined in the C file: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFile
<SPAN class="gtkdoc opt">{</SPAN>
  GObject parent_instance<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* Other members, including private data. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Call the <CODE class=function>G_DEFINE_TYPE</CODE> macro (or <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE> if your class needs private data &#8212; final types do <SPAN class=emphasis><EM>not</EM></SPAN> need private data) using the name of the type, the prefix of the functions and the parent GType to reduce the amount of boilerplate needed. This macro will: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>implement the <CODE class=function>viewer_file_get_type</CODE> function</LI>
<LI class=listitem>define a parent class pointer accessible from the whole .c file</LI>
<LI class=listitem>add private instance data to the type (if using <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE>)</LI></UL></DIV>
<P></P>
<P>If the class has been declared as final using <CODE class=function>G_DECLARE_FINAL_TYPE</CODE> (see <A title="Boilerplate header code" class=xref href="https://developer.gnome.org/gobject/stable/howto-gobject.html#howto-gobject-header">the section called &#8220;Boilerplate header code&#8221;</A>), private data should be placed in the instance structure, <SPAN class=type>ViewerFile</SPAN>, and <CODE class=function>G_DEFINE_TYPE</CODE> should be used instead of <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE>. The instance structure for a final class is not exposed publicly, and is not embedded in the instance structures of any derived classes (because the class is final); so its size can vary without causing incompatibilities for code which uses the class. Conversely, private data for derivable classes <SPAN class=emphasis><EM>must</EM></SPAN> be included in a private structure, and <CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE</CODE> must be used. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS">G_DEFINE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>or </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_TYPE_WITH_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>It is also possible to use the <CODE class=function>G_DEFINE_TYPE_WITH_CODE</CODE> macro to control the <CODE class=function>get_type</CODE> function implementation &#8212; for instance, to add a call to the <CODE class=function>G_IMPLEMENT_INTERFACE</CODE> macro to implement an interface.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28687">Topic #28687: Object construction.. People often get confused when trying to construct their GObjects because of the sheer number of different ways to hook into the objects's construction ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Object construction</H2></DIV></DIV></DIV>
<P>People often get confused when trying to construct their GObjects because of the sheer number of different ways to hook into the objects's construction process: it is difficult to figure which is the <SPAN class=emphasis><EM>correct</EM></SPAN>, recommended way. </P>
<P><A title=Table&nbsp;4.&nbsp;g_object_new class=xref href="https://developer.gnome.org/gobject/stable/chapter-gobject.html#gobject-construction-table">Table&nbsp;4, &#8220;g_object_new&#8221;</A> shows what user-provided functions are invoked during object instantiation and in which order they are invoked. A user looking for the equivalent of the simple C++ constructor function should use the <CODE class=function>instance_init</CODE> method. It will be invoked after all the parents&#8217; <CODE class=function>instance_init</CODE> functions have been invoked. It cannot take arbitrary construction parameters (as in C++) but if your object needs arbitrary parameters to complete initialization, you can use construction properties. </P>
<P>Construction properties will be set only after all <CODE class=function>instance_init</CODE> functions have run. No object reference will be returned to the client of <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> until all the construction properties have been set. </P>
<P>It is important to note that object construction cannot <SPAN class=emphasis><EM>ever</EM></SPAN> fail. If you require a fallible GObject construction, you can use the <A href="https://developer.gnome.org/gio/unstable/GInitable.html#GInitable-struct"><SPAN class=type>GInitable</SPAN></A> and <A href="https://developer.gnome.org/gio/unstable/GAsyncInitable.html#GAsyncInitable-struct"><SPAN class=type>GAsyncInitable</SPAN></A> interfaces provided by the GIO library. </P>
<P>You should write the following code first: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_TYPE_WITH_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFilePrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>viewer_file_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* initialize all public and private members to reasonable default values.</SPAN>
<SPAN class=comment>   * They are all automatically initialized to 0 to begin with. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>If you need special construction properties (with <A class=link href="https://developer.gnome.org/gobject/stable/gobject-GParamSpec.html#G-PARAM-CONSTRUCT-ONLY:CAPS"><CODE class=function>G_PARAM_CONSTRUCT_ONLY</CODE></A> set), install the properties in the <CODE class=function>class_init()</CODE> function, override the <CODE class=function>set_property()</CODE> and <CODE class=function>get_property()</CODE> methods of the GObject class, and implement them as described by <A title="Object properties" class=xref href="https://developer.gnome.org/gobject/stable/gobject-properties.html">the section called &#8220;Object properties&#8221;</A>. </P>
<P>Property IDs must start from 1, as 0 is reserved for internal use by GObject. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">enum</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PROP_FILENAME <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">,</SPAN>
  PROP_ZOOM_LEVEL<SPAN class="gtkdoc opt">,</SPAN>
  N_PROPERTIES
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">static</SPAN> GParamSpec <SPAN class="gtkdoc opt">*</SPAN>obj_properties<SPAN class="gtkdoc opt">[</SPAN>N_PROPERTIES<SPAN class="gtkdoc opt">] = {</SPAN> NULL<SPAN class="gtkdoc opt">, };</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass <SPAN class="gtkdoc opt">*</SPAN>object_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>set_property <SPAN class="gtkdoc opt">=</SPAN> viewer_file_set_property<SPAN class="gtkdoc opt">;</SPAN>
  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>get_property <SPAN class="gtkdoc opt">=</SPAN> viewer_file_get_property<SPAN class="gtkdoc opt">;</SPAN>

  obj_properties<SPAN class="gtkdoc opt">[</SPAN>PROP_FILENAME<SPAN class="gtkdoc opt">] =</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-string">g_param_spec_string</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"filename"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=string>"Filename"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=string>"Name of the file to load and display from."</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                         NULL  <SPAN class=comment>/* default value */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                         G_PARAM_CONSTRUCT_ONLY <SPAN class="gtkdoc opt">|</SPAN> G_PARAM_READWRITE<SPAN class="gtkdoc opt">));</SPAN>

  obj_properties<SPAN class="gtkdoc opt">[</SPAN>PROP_ZOOM_LEVEL<SPAN class="gtkdoc opt">] =</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uint">g_param_spec_uint</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"zoom-level"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=string>"Zoom level"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=string>"Zoom level to view the file at."</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=number>0</SPAN>  <SPAN class=comment>/* minimum value */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=number>10</SPAN> <SPAN class=comment>/* maximum value */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=number>2</SPAN>  <SPAN class=comment>/* default value */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                       G_PARAM_READWRITE<SPAN class="gtkdoc opt">));</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-class-install-properties">g_object_class_install_properties</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object_class<SPAN class="gtkdoc opt">,</SPAN>
                                     N_PROPERTIES<SPAN class="gtkdoc opt">,</SPAN>
                                     obj_properties<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>If you need this, make sure you can build and run code similar to the code shown above. Also, make sure your construct properties can be set without side effects during construction. </P>
<P>Some people sometimes need to complete the initialization of a instance of a type only after the properties passed to the constructors have been set. This is possible through the use of the <CODE class=function>constructor()</CODE> class method as described in <A title="Object instantiation" class=xref href="https://developer.gnome.org/gobject/stable/chapter-gobject.html#gobject-instantiation">the section called &#8220;Object instantiation&#8221;</A> or, more simply, using the <CODE class=function>constructed()</CODE> class method. Note that the <CODE class=function>constructed()</CODE> virtual function will only be invoked after the properties marked as <CODE class=function>G_PARAM_CONSTRUCT_ONLY</CODE> or <CODE class=function>G_PARAM_CONSTRUCT</CODE> have been consumed, but before the regular properties passed to <CODE class=function>g_object_new()</CODE> have been set.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28688">Topic #28688: Object destruction.. Again, it is often difficult to figure out which mechanism to use to hook into the object's destruction process: when the last g_object_unref function call ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Object destruction</H2></DIV></DIV></DIV>
<P>Again, it is often difficult to figure out which mechanism to use to hook into the object's destruction process: when the last <CODE class=function><A title=g_object_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-unref">g_object_unref</A></CODE> function call is made, a lot of things happen as described in <A title=Table&nbsp;5.&nbsp;g_object_unref class=xref href="https://developer.gnome.org/gobject/stable/gobject-memory.html#gobject-destruction-table">Table&nbsp;5, &#8220;g_object_unref&#8221;</A>. </P>
<P>The destruction process of your object is in two phases: dispose and finalize. This split is necessary to handle potential cycles due to the nature of the reference counting mechanism used by GObject, as well as dealing with temporary revival of instances in case of signal emission during the destruction sequence. See <A title="Reference counts and cycles" class=xref href="https://developer.gnome.org/gobject/stable/gobject-memory.html#gobject-memory-cycles">the section called &#8220;Reference counts and cycles&#8221;</A> for more information. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFilePrivate
<SPAN class="gtkdoc opt">{</SPAN>
  gchar <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">;</SPAN>
  guint zoom_level<SPAN class="gtkdoc opt">;</SPAN>

  GInputStream <SPAN class="gtkdoc opt">*</SPAN>input_stream<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_TYPE_WITH_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_dispose</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GObject <SPAN class="gtkdoc opt">*</SPAN>gobject<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFilePrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>viewer_file_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gobject<SPAN class="gtkdoc opt">));</SPAN>

  <SPAN class=comment>/* In dispose(), you are supposed to free all types referenced from this</SPAN>
<SPAN class=comment>   * object which might themselves hold a reference to self. Generally,</SPAN>
<SPAN class=comment>   * the most simple solution is to unref all members on which you own a </SPAN>
<SPAN class=comment>   * reference.</SPAN>
<SPAN class=comment>   */</SPAN>

  <SPAN class=comment>/* dispose() might be called multiple times, so we must guard against</SPAN>
<SPAN class=comment>   * calling g_object_unref() on an invalid GObject by setting the member</SPAN>
<SPAN class=comment>   * NULL; g_clear_object() does this for us.</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-clear-object">g_clear_object</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>priv<SPAN class="gtkdoc opt">-&gt;</SPAN>input_stream<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Always chain up to the parent class; there is no need to check if</SPAN>
<SPAN class=comment>   * the parent class implements the dispose() virtual function: it is</SPAN>
<SPAN class=comment>   * always guaranteed to do so</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>viewer_file_parent_class<SPAN class="gtkdoc opt">)-&gt;</SPAN><SPAN class=function>dispose</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gobject<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_finalize</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GObject <SPAN class="gtkdoc opt">*</SPAN>gobject<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFilePrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>viewer_file_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gobject<SPAN class="gtkdoc opt">));</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Memory-Allocation.html#g-free">g_free</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>priv<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Always chain up to the parent class; as with dispose(), finalize()</SPAN>
<SPAN class=comment>   * is guaranteed to exist on the parent's class virtual function table</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>viewer_file_parent_class<SPAN class="gtkdoc opt">)-&gt;</SPAN><SPAN class=function>finalize</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gobject<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass <SPAN class="gtkdoc opt">*</SPAN>object_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>dispose <SPAN class="gtkdoc opt">=</SPAN> viewer_file_dispose<SPAN class="gtkdoc opt">;</SPAN>
  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>finalize <SPAN class="gtkdoc opt">=</SPAN> viewer_file_finalize<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFilePrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>viewer_file_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>

  priv<SPAN class="gtkdoc opt">-&gt;</SPAN>input_stream <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_INPUT_STREAM<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  priv<SPAN class="gtkdoc opt">-&gt;</SPAN>filename <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=comment>/* would be set as a property */</SPAN><SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>It is possible that object methods might be invoked after dispose is run and before finalize runs. GObject does not consider this to be a program error: you must gracefully detect this and neither crash nor warn the user, by having a disposed instance revert to an inert state.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28689">Topic #28689: Object methods.. Just as with C++, there are many different ways to define object methods and extend them: the following list and sections draw on C++ vocabulary. (Readers are ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Object methods</H2></DIV></DIV></DIV>
<P>Just as with C++, there are many different ways to define object methods and extend them: the following list and sections draw on C++ vocabulary. (Readers are expected to know basic C++ concepts. Those who have not had to write C++ code recently can refer to e.g. <A class=ulink href="http://www.cplusplus.com/doc/tutorial/" target=_top>http://www.cplusplus.com/doc/tutorial/</A> to refresh their memories.) </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>non-virtual public methods, </P></LI>
<LI class=listitem>
<P>virtual public methods and </P></LI>
<LI class=listitem>
<P>virtual private methods </P></LI></UL></DIV>
<P></P>
<DIV class=sect2>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=non-virtual-public-methods></A>Non-virtual public methods</H3></DIV></DIV></DIV>
<P>These are the simplest, providing a simple method which acts on the object. Provide a function prototype in the header and an implementation of that prototype in the source file. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/* declaration in the header. */</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                       GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=comment>/* implementation in the source file */</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                  GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* do stuff here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<DIV class=sect2>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=virtual-public-methods></A>Virtual public methods</H3></DIV></DIV></DIV>
<P>This is the preferred way to create GObjects with overridable methods: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Define the common method and its virtual function in the class structure in the public header </P></LI>
<LI class=listitem>
<P>Define the common method in the header file and implement it in the source file </P></LI>
<LI class=listitem>
<P>Implement a base version of the virtual function in the source file and initialize the virtual function pointer to this implementation in the object&#8217;s <CODE class=function>class_init</CODE> function; or leave it as <CODE class=constant>NULL</CODE> for a &#8216;pure virtual&#8217; method which must be overridden by derived classes </P></LI>
<LI class=listitem>
<P>Re-implement the virtual function in each derived class which needs to override it </P></LI></UL></DIV>
<P></P>
<P>Note that virtual functions can only be defined if the class is derivable, declared using <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE</CODE></A> so the class structure can be defined. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/* declaration in viewer-file.h. */</SPAN>
<SPAN class="gtkdoc ppc">#define VIEWER_TYPE_FILE viewer_file_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS">G_DECLARE_DERIVABLE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">FILE</SPAN><SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFileClass
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass parent_class<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* stuff */</SPAN>
  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN>open<SPAN class="gtkdoc opt">) (</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Padding to allow adding up to 12 new virtual functions without</SPAN>
<SPAN class=comment>   * breaking ABI. */</SPAN>
  gpointer padding<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>12</SPAN><SPAN class="gtkdoc opt">];</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                       GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=comment>/* implementation in viewer-file.c */</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                  GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  klass <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE_GET_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">-&gt;</SPAN>open <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  klass<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>The code above simply redirects the <CODE class=function>open</CODE> call to the relevant virtual function. </P>
<P>It is possible to provide a default implementation for this class method in the object's <CODE class=function>class_init</CODE> function: initialize the <CODE class=function>klass-&gt;open</CODE> field to a pointer to the actual implementation. By default, class methods that are not inherited are initialized to <CODE class=function>NULL</CODE>, and thus are to be considered "pure virtual". </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_real_close</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                        GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Default implementation for the virtual method. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* this is not necessary, except for demonstration purposes.</SPAN>
<SPAN class=comment>   *</SPAN>
<SPAN class=comment>   * pure virtual method: mandates implementation in children.</SPAN>
<SPAN class=comment>   */</SPAN>
  klass<SPAN class="gtkdoc opt">-&gt;</SPAN>open <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* merely virtual method. */</SPAN>
  klass<SPAN class="gtkdoc opt">-&gt;</SPAN>close <SPAN class="gtkdoc opt">=</SPAN> viewer_file_real_close<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                  GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  klass <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE_GET_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* if the method is purely virtual, then it is a good idea to</SPAN>
<SPAN class=comment>   * check that it has been overridden before calling it, and,</SPAN>
<SPAN class=comment>   * depending on the intent of the class, either ignore it silently</SPAN>
<SPAN class=comment>   * or warn the user.</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">-&gt;</SPAN>open <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  klass<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_close</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                   GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  klass <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE_GET_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">-&gt;</SPAN>close <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    klass<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>close</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<DIV class=sect2>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=virtual-private-methods></A>Virtual private Methods</H3></DIV></DIV></DIV>
<P>These are very similar to <A title="Virtual public methods" class=link href="https://developer.gnome.org/gobject/stable/howto-gobject-methods.html#virtual-public-methods">virtual public methods</A>. They just don't have a public function to call directly. The header file contains only a declaration of the virtual function: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/* declaration in viewer-file.h. */</SPAN>
<SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFileClass
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass parent<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* Public virtual method as before. */</SPAN>
  <SPAN class="gtkdoc kwb">void</SPAN>     <SPAN class="gtkdoc opt">(*</SPAN>open<SPAN class="gtkdoc opt">)           (</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                              GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Private helper function to work out whether the file can be loaded via</SPAN>
<SPAN class=comment>   * memory mapped I/O, or whether it has to be read as a stream. */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean">gboolean</A></SPAN> <SPAN class="gtkdoc opt">(*</SPAN>can_memory_map<SPAN class="gtkdoc opt">) (</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Padding to allow adding up to 12 new virtual functions without</SPAN>
<SPAN class=comment>   * breaking ABI. */</SPAN>
  gpointer padding<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>12</SPAN><SPAN class="gtkdoc opt">];</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> GError <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>These virtual functions are often used to delegate part of the job to child classes: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/* this accessor function is static: it is not exported outside of this file. */</SPAN>
<SPAN class="gtkdoc kwb">static</SPAN> gboolean 
<SPAN class=function>viewer_file_can_memory_map</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=keyword>return</SPAN> <SPAN class=function>VIEWER_FILE_GET_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">)-&gt;</SPAN><SPAN class=function>can_memory_map</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_open</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                  GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/*</SPAN>
<SPAN class=comment>   * Try to load the file using memory mapped I/O, if the implementation of the</SPAN>
<SPAN class=comment>   * class determines that is possible using its private virtual method.</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>viewer_file_can_memory_map</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=comment>/* Load the file using memory mapped I/O. */</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
  <SPAN class=keyword>else</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=comment>/* Fall back to trying to load the file using streaming I/O&#8230; */</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Again, it is possible to provide a default implementation for this private virtual function: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static</SPAN> gboolean
<SPAN class=function>viewer_file_real_can_memory_map</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* As an example, always return false. Or, potentially return true if the</SPAN>
<SPAN class=comment>   * file is local. */</SPAN>
  <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* non-pure virtual method; does not have to be implemented in children. */</SPAN>
  klass<SPAN class="gtkdoc opt">-&gt;</SPAN>can_memory_map <SPAN class="gtkdoc opt">=</SPAN> viewer_file_real_can_memory_map<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Derived classes can then override the method with code such as: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>file_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* implement pure virtual function. */</SPAN>
  file_class<SPAN class="gtkdoc opt">-&gt;</SPAN>can_memory_map <SPAN class="gtkdoc opt">=</SPAN> viewer_audio_file_can_memory_map<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28690">Topic #28690: Chaining up.. Chaining up is often loosely defined by the following set of conditions: .. Parent class A defines a public virtual method named foo and provides a default ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Chaining up</H2></DIV></DIV></DIV>
<P>Chaining up is often loosely defined by the following set of conditions: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Parent class A defines a public virtual method named <CODE class=function>foo</CODE> and provides a default implementation.</P></LI>
<LI class=listitem>
<P>Child class B re-implements method <CODE class=function>foo</CODE>.</P></LI>
<LI class=listitem>
<P>B&#8217;s implementation of <CODE class=function>foo</CODE> calls (&#8216;chains up to&#8217;) its parent class A&#8217;s implementation of <CODE class=function>foo</CODE>.</P></LI></UL></DIV>
<P>There are various uses of this idiom: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>You need to extend the behaviour of a class without modifying its code. You create a subclass to inherit its implementation, re-implement a public virtual method to modify the behaviour and chain up to ensure that the previous behaviour is not really modified, just extended. </P></LI>
<LI class=listitem>
<P>You need to implement the <A class=ulink href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern" target=_top>Chain Of Responsibility pattern</A>: each object of the inheritance tree chains up to its parent (typically, at the beginning or the end of the method) to ensure that each handler is run in turn.</P></LI></UL></DIV>
<P></P>
<P>To explicitly chain up to the implementation of the virtual method in the parent class, you first need a handle to the original parent class structure. This pointer can then be used to access the original virtual function pointer and invoke it directly. <A class=footnote href="https://developer.gnome.org/gobject/stable/howto-gobject-chainup.html#ftn.id-1.6.3.9.3.1" name=id-1.6.3.9.3.1><SUP class=footnote>[7]</SUP></A> </P>
<P>Use the <CODE class=function>parent_class</CODE> pointer created and initialized by the <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=function>G_DEFINE_TYPE</CODE></A> family of macros, for instance: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>b_method_to_call</SPAN> <SPAN class="gtkdoc opt">(</SPAN>B <SPAN class="gtkdoc opt">*</SPAN>obj<SPAN class="gtkdoc opt">,</SPAN> gint some_param<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* do stuff before chain up */</SPAN>

  <SPAN class=comment>/* call the method_to_call() virtual function on the</SPAN>
<SPAN class=comment>   * parent of BClass, AClass.</SPAN>
<SPAN class=comment>   *</SPAN>
<SPAN class=comment>   * remember the explicit cast to AClass*</SPAN>
<SPAN class=comment>   */</SPAN>
  <SPAN class=function>A_CLASS</SPAN> <SPAN class="gtkdoc opt">(</SPAN>b_parent_class<SPAN class="gtkdoc opt">)-&gt;</SPAN><SPAN class=function>method_to_call</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">,</SPAN> some_param<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* do stuff after chain up */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=footnotes><BR>
<HR style="WIDTH: 100px; TEXT-ALIGN: left; MARGIN-LEFT: 0px">

<DIV id=ftn.id-1.6.3.9.3.1 class=footnote>
<P><A class=para href="https://developer.gnome.org/gobject/stable/howto-gobject-chainup.html#id-1.6.3.9.3.1"><SUP class=para>[7] </SUP></A>The <SPAN class=emphasis><EM>original</EM></SPAN> adjective used in this sentence is not innocuous. To fully understand its meaning, recall how class structures are initialized: for each object type, the class structure associated with this object is created by first copying the class structure of its parent type (a simple <CODE class=function>memcpy</CODE>) and then by invoking the <CODE class=function>class_init</CODE> callback on the resulting class structure. Since the <CODE class=function>class_init</CODE> callback is responsible for overwriting the class structure with the user re-implementations of the class methods, the modified copy of the parent class structure stored in the derived instance cannot be used. A copy of the class structure of an instance of the parent class is needed. </P></DIV></DIV></DIV>
<DIV class=footer>
<HR>
</DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28691">Topic #28691: How to define and implement interfaces.. Defining interfaces.. Implementing interfaces.. Interface definition prerequisites.. Interface properties.. Overriding interface ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>How to define and implement interfaces</H2></DIV></DIV></DIV>
<DIV class=toc>
<DL class=toc>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface.html#howto-interface-define">Defining interfaces</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-implement.html">Implementing interfaces</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-prerequisite.html">Interface definition prerequisites</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-properties.html">Interface properties</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-interface-override.html">Overriding interface methods</A></SPAN></DT></DL></DIV>
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=howto-interface-define></A>Defining interfaces</H2></DIV></DIV></DIV>
<P>The theory behind how GObject interfaces work is given in <A title="Non-instantiable classed types: interfaces" class=xref href="https://developer.gnome.org/gobject/stable/gtype-non-instantiable-classed.html">the section called &#8220;Non-instantiable classed types: interfaces&#8221;</A>; this section covers how to define and implement an interface. </P>
<P>The first step is to get the header right. This interface defines two methods: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*</SPAN>
<SPAN class=comment> * Copyright/Licensing information.</SPAN>
<SPAN class=comment> */</SPAN>

<SPAN class="gtkdoc ppc">#ifndef __VIEWER_EDITABLE_H__</SPAN>
<SPAN class="gtkdoc ppc">#define __VIEWER_EDITABLE_H__</SPAN>

<SPAN class="gtkdoc ppc">#include &lt;glib-object.h&gt;</SPAN>

G_BEGIN_DECLS

<SPAN class="gtkdoc ppc">#define VIEWER_TYPE_EDITABLE viewer_editable_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-INTERFACE:CAPS">G_DECLARE_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable<SPAN class="gtkdoc opt">,</SPAN> viewer_editable<SPAN class="gtkdoc opt">,</SPAN> VIEWER<SPAN class="gtkdoc opt">,</SPAN> EDITABLE<SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _ViewerEditableInterface
<SPAN class="gtkdoc opt">{</SPAN>
  GTypeInterface parent_iface<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN>save<SPAN class="gtkdoc opt">) (</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN>undo<SPAN class="gtkdoc opt">) (</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                guint            n_steps<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN>redo<SPAN class="gtkdoc opt">) (</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                guint            n_steps<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_editable_undo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           guint            n_steps<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>viewer_editable_redo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           guint            n_steps<SPAN class="gtkdoc opt">);</SPAN>

G_END_DECLS

<SPAN class="gtkdoc ppc">#endif</SPAN> <SPAN class=comment>/* __VIEWER_EDITABLE_H__ */</SPAN><SPAN class="gtkdoc ppc"></SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>This code is the same as the code for a normal <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> which derives from a <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A> except for a few details: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>The <CODE class=function>_GET_CLASS</CODE> function is called <CODE class=function>_GET_IFACE</CODE> (and is defined by <A title=G_DECLARE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-INTERFACE:CAPS"><CODE class=function>G_DECLARE_INTERFACE</CODE></A>). </P></LI>
<LI class=listitem>
<P>The instance type, <SPAN class=type>ViewerEditable</SPAN>, is not fully defined: it is used merely as an abstract type which represents an instance of whatever object which implements the interface. </P></LI>
<LI class=listitem>
<P>The parent of the <SPAN class=type>ViewerEditableInterface</SPAN> is <SPAN class=type>GTypeInterface</SPAN>, not <SPAN class=type>GObjectClass</SPAN>. </P></LI></UL></DIV>
<P></P>
<P>The implementation of the <SPAN class=type>ViewerEditable</SPAN> type itself is trivial: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P><CODE class=function><A title=G_DEFINE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_DEFINE_INTERFACE</A></CODE> creates a <CODE class=function>viewer_editable_get_type</CODE> function which registers the type in the type system. The third argument is used to define a <A title="Interface definition prerequisites" class=link href="https://developer.gnome.org/gobject/stable/howto-interface-prerequisite.html">prerequisite interface</A> (which we'll talk about more later). Just pass <CODE class=code>0</CODE> for this argument when an interface has no prerequisite. </P></LI>
<LI class=listitem>
<P><CODE class=function>viewer_editable_default_init</CODE> is expected to register the interface's signals if there are any (we will see a bit later how to use them).</P></LI>
<LI class=listitem>
<P>The interface methods <CODE class=function>viewer_editable_save</CODE>, <CODE class=function>viewer_editable_undo</CODE> and <CODE class=function>viewer_editable_redo</CODE> dereference the interface structure to access its associated interface function and call it. </P></LI></UL></DIV>
<P></P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_DEFINE_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable<SPAN class="gtkdoc opt">,</SPAN> viewer_editable<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_editable_default_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class=comment>/* add properties and signals to the interface here */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                      GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_EDITABLE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>error <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  iface <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_EDITABLE_GET_IFACE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>iface<SPAN class="gtkdoc opt">-&gt;</SPAN>save <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_editable_undo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                      guint           n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_EDITABLE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>

  iface <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_EDITABLE_GET_IFACE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>iface<SPAN class="gtkdoc opt">-&gt;</SPAN>undo <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>undo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> n_steps<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_editable_redo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                      guint           n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_EDITABLE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>

  iface <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_EDITABLE_GET_IFACE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>iface<SPAN class="gtkdoc opt">-&gt;</SPAN>redo <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>redo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> n_steps<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="23286">Topic #23286: Implementing interfaces.. Once the interface is defined, implementing it is rather trivial. .. The first step is to define a normal final GObject class exactly as in the ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Implementing interfaces</H2></DIV></DIV></DIV>
<P>Once the interface is defined, implementing it is rather trivial. </P>
<P>The first step is to define a normal final GObject class exactly as in <A title="Boilerplate header code" class=xref href="https://developer.gnome.org/gobject/stable/howto-gobject.html#howto-gobject-header">the section called &#8220;Boilerplate header code&#8221;</A>. </P>
<P>The second step is to implement <SPAN class=type>ViewerFile</SPAN> by defining it using <CODE class=function><A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></CODE> and <CODE class=function><A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></CODE> instead of <CODE class=function><A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS">G_DEFINE_TYPE</A></CODE>: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN> <SPAN class=function>viewer_file_editable_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_EDITABLE<SPAN class="gtkdoc opt">,</SPAN>
                                                viewer_file_editable_interface_init<SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>This definition is very much like all the similar functions seen previously. The only interface-specific code present here is the use of <CODE class=function><A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></CODE>. </P>
<DIV class=note>
<P>Classes can implement multiple interfaces by using multiple calls to <CODE class=function><A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></CODE> inside the call to <CODE class=function><A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></CODE> </P></DIV>
<P><CODE class=function>viewer_file_editable_interface_init</CODE>, the interface initialization function: inside it every virtual method of the interface must be assigned to its implementation: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile  <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           GError     <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface save method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_undo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           guint       n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface undo method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_redo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                           guint       n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface redo method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>save <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_save<SPAN class="gtkdoc opt">;</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>undo <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_undo<SPAN class="gtkdoc opt">;</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>redo <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_redo<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Instance variable initialisation code. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="23230">Topic #23230: Interface definition prerequisites.. To specify that an interface requires the presence of other interfaces when implemented, GObject introduces the concept of prerequisites ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Interface definition prerequisites</H2></DIV></DIV></DIV>
<P>To specify that an interface requires the presence of other interfaces when implemented, GObject introduces the concept of <SPAN class=emphasis><EM>prerequisites</EM></SPAN>: it is possible to associate a list of prerequisite types to an interface. For example, if object A wishes to implement interface I1, and if interface I1 has a prerequisite on interface I2, A has to implement both I1 and I2. </P>
<P>The mechanism described above is, in practice, very similar to Java's interface I1 extends interface I2. The example below shows the GObject equivalent: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/* Make the ViewerEditableLossy interface require ViewerEditable interface. */</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_DEFINE_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableLossy<SPAN class="gtkdoc opt">,</SPAN> viewer_editable_lossy<SPAN class="gtkdoc opt">,</SPAN> VIEWER_TYPE_EDITABLE<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>In the <CODE class=function><A title=G_DEFINE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_DEFINE_INTERFACE</A></CODE> call above, the third parameter defines the prerequisite type. This is the GType of either an interface or a class. In this case the <SPAN class=type>ViewerEditable</SPAN> interface is a prerequisite of <SPAN class=type>ViewerEditableLossy</SPAN>. The code below shows how an implementation can implement both interfaces and register their implementations: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_lossy_compress</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableLossy <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of lossy editable interface compress method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_lossy_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableLossyInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>compress <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_lossy_compress<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN>
                           GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface save method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_undo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN>
                           guint           n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface undo method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_redo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN>
                           guint           n_steps<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"File implementation of editable interface redo method: %s.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
           self<SPAN class="gtkdoc opt">-&gt;</SPAN>filename<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_editable_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>save <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_save<SPAN class="gtkdoc opt">;</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>undo <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_undo<SPAN class="gtkdoc opt">;</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>redo <SPAN class="gtkdoc opt">=</SPAN> viewer_file_editable_redo<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Nothing here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Instance variable initialisation code. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_EDITABLE<SPAN class="gtkdoc opt">,</SPAN>
                                                viewer_file_editable_interface_init<SPAN class="gtkdoc opt">)</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_EDITABLE_LOSSY<SPAN class="gtkdoc opt">,</SPAN>
                                                viewer_file_editable_lossy_interface_init<SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>It is very important to notice that the order in which interface implementations are added to the main object is not random: <CODE class=function><A title=g_type_add_interface_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-static">g_type_add_interface_static</A></CODE>, which is called by <CODE class=function><A title=G_DEFINE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></CODE>, must be invoked first on the interfaces which have no prerequisites and then on the others.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28692">Topic #28692: Interface properties.. GObject interfaces can also have properties. Declaration of the interface properties is similar to declaring the properties of ordinary GObject types as ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Interface properties</H2></DIV></DIV></DIV>
<P>GObject interfaces can also have properties. Declaration of the interface properties is similar to declaring the properties of ordinary GObject types as explained in <A title="Object properties" class=xref href="https://developer.gnome.org/gobject/stable/gobject-properties.html">the section called &#8220;Object properties&#8221;</A>, except that <CODE class=function><A title=g_object_interface_install_property&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-interface-install-property">g_object_interface_install_property</A></CODE> is used to declare the properties instead of <CODE class=function><A title=g_object_class_install_property&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-class-install-property">g_object_class_install_property</A></CODE>. </P>
<P>To include a property named 'autosave-frequency' of type <SPAN class=type>gdouble</SPAN> in the <SPAN class=type>ViewerEditable</SPAN> interface example code above, we only need to add one call in <CODE class=function>viewer_editable_default_init</CODE> as shown below: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_editable_default_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-interface-install-property">g_object_interface_install_property</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>iface<SPAN class="gtkdoc opt">,</SPAN>
                                       <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-double">g_param_spec_double</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"autosave-frequency"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                                                            <SPAN class=string>"Autosave frequency"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                                                            <SPAN class=string>"Frequency (in per-seconds) to autosave backups of the editable content at. "</SPAN>
                                                            <SPAN class=string>"Or zero to disable autosaves."</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                                                            <SPAN class=number>0.0</SPAN><SPAN class="gtkdoc opt">,</SPAN>  <SPAN class=comment>/* minimum */</SPAN>
                                                            G_MAXDOUBLE<SPAN class="gtkdoc opt">,</SPAN>  <SPAN class=comment>/* maximum */</SPAN>
                                                            <SPAN class=number>0.0</SPAN><SPAN class="gtkdoc opt">,</SPAN>  <SPAN class=comment>/* default */</SPAN>
                                                            G_PARAM_READWRITE<SPAN class="gtkdoc opt">));</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>One point worth noting is that the declared property wasn't assigned an integer ID. The reason being that integer IDs of properties are used only inside the <CODE class=function>get_property</CODE> and <CODE class=function>set_property</CODE> virtual methods. Since interfaces declare but do not <SPAN class=emphasis><EM>implement</EM></SPAN> properties, there is no need to assign integer IDs to them. </P>
<P>An implementation declares and defines its properties in the usual way as explained in <A title="Object properties" class=xref href="https://developer.gnome.org/gobject/stable/gobject-properties.html">the section called &#8220;Object properties&#8221;</A>, except for one small change: it can declare the properties of the interface it implements using <CODE class=function><A title=g_object_class_override_property&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-class-override-property">g_object_class_override_property</A></CODE> instead of <CODE class=function><A title=g_object_class_install_property&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-class-install-property">g_object_class_install_property</A></CODE>. The following code snippet shows the modifications needed in the <SPAN class=type>ViewerFile</SPAN> declaration and implementation above: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFile
<SPAN class="gtkdoc opt">{</SPAN>
  GObject parent_instance<SPAN class="gtkdoc opt">;</SPAN>

  gdouble autosave_frequency<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">enum</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PROP_AUTOSAVE_FREQUENCY <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">,</SPAN>
  N_PROPERTIES
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_set_property</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GObject      <SPAN class="gtkdoc opt">*</SPAN>object<SPAN class="gtkdoc opt">,</SPAN>
                          guint         prop_id<SPAN class="gtkdoc opt">,</SPAN>
                          <SPAN class="gtkdoc kwb">const</SPAN> GValue <SPAN class="gtkdoc opt">*</SPAN>value<SPAN class="gtkdoc opt">,</SPAN>
                          GParamSpec   <SPAN class="gtkdoc opt">*</SPAN>pspec<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>file <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>object<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>switch</SPAN> <SPAN class="gtkdoc opt">(</SPAN>prop_id<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class=keyword>case</SPAN> PROP_AUTOSAVE_FREQUENCY<SPAN class="gtkdoc opt">:</SPAN>
      file<SPAN class="gtkdoc opt">-&gt;</SPAN>autosave_frequency <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-value-get-double">g_value_get_double</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>value<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>break</SPAN><SPAN class="gtkdoc opt">;</SPAN>

    <SPAN class=keyword>default</SPAN><SPAN class="gtkdoc opt">:</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-WARN-INVALID-PROPERTY-ID:CAPS">G_OBJECT_WARN_INVALID_PROPERTY_ID</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object<SPAN class="gtkdoc opt">,</SPAN> prop_id<SPAN class="gtkdoc opt">,</SPAN> pspec<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>break</SPAN><SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_get_property</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GObject    <SPAN class="gtkdoc opt">*</SPAN>object<SPAN class="gtkdoc opt">,</SPAN>
                          guint       prop_id<SPAN class="gtkdoc opt">,</SPAN>
                          GValue     <SPAN class="gtkdoc opt">*</SPAN>value<SPAN class="gtkdoc opt">,</SPAN>
                          GParamSpec <SPAN class="gtkdoc opt">*</SPAN>pspec<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerFile <SPAN class="gtkdoc opt">*</SPAN>file <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>object<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>switch</SPAN> <SPAN class="gtkdoc opt">(</SPAN>prop_id<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class=keyword>case</SPAN> PROP_AUTOSAVE_FREQUENCY<SPAN class="gtkdoc opt">:</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-value-set-double">g_value_set_double</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>value<SPAN class="gtkdoc opt">,</SPAN> file<SPAN class="gtkdoc opt">-&gt;</SPAN>autosave_frequency<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>break</SPAN><SPAN class="gtkdoc opt">;</SPAN>

    <SPAN class=keyword>default</SPAN><SPAN class="gtkdoc opt">:</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-WARN-INVALID-PROPERTY-ID:CAPS">G_OBJECT_WARN_INVALID_PROPERTY_ID</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object<SPAN class="gtkdoc opt">,</SPAN> prop_id<SPAN class="gtkdoc opt">,</SPAN> pspec<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>break</SPAN><SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass <SPAN class="gtkdoc opt">*</SPAN>object_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>set_property <SPAN class="gtkdoc opt">=</SPAN> viewer_file_set_property<SPAN class="gtkdoc opt">;</SPAN>
  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>get_property <SPAN class="gtkdoc opt">=</SPAN> viewer_file_get_property<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-class-override-property">g_object_class_override_property</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object_class<SPAN class="gtkdoc opt">,</SPAN> PROP_AUTOSAVE_FREQUENCY<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"autosave-frequency"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28693">Topic #28693: Overriding interface methods.. If a base class already implements an interface and a derived class needs to implement the same interface but needs to override certain methods ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Overriding interface methods</H2></DIV></DIV></DIV>
<P>If a base class already implements an interface and a derived class needs to implement the same interface but needs to override certain methods, you must reimplement the interface and set only the interface methods which need overriding. </P>
<P>In this example, <SPAN class=type>ViewerAudioFile</SPAN> is derived from <SPAN class=type>ViewerFile</SPAN>. Both implement the <SPAN class=type>ViewerEditable</SPAN> interface. <SPAN class=type>ViewerAudioFile</SPAN> only implements one method of the <SPAN class=type>ViewerEditable</SPAN> interface and uses the base class implementation of the other. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN>
                                 GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerAudioFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_AUDIO_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"Audio file implementation of editable interface save method.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_editable_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Override the implementation of save(). */</SPAN>
  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>save <SPAN class="gtkdoc opt">=</SPAN> viewer_audio_file_editable_save<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/*</SPAN>
<SPAN class=comment>   * Leave iface-&gt;undo and -&gt;redo alone, they are already set to the</SPAN>
<SPAN class=comment>   * base class implementation.</SPAN>
<SPAN class=comment>   */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFile<SPAN class="gtkdoc opt">,</SPAN> viewer_audio_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER_TYPE_FILE<SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_EDITABLE<SPAN class="gtkdoc opt">,</SPAN>
                                                viewer_audio_file_editable_interface_init<SPAN class="gtkdoc opt">))</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Nothing here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Nothing here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>To access the base class interface implementation use <CODE class=function><A title=g_type_interface_peek_parent&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-peek-parent">g_type_interface_peek_parent</A></CODE> from within an interface's <CODE class=function>default_init</CODE> function. </P>
<P>To call the base class implementation of an interface method from an derived class where than interface method has been overridden, stash away the pointer returned from <CODE class=function><A title=g_type_interface_peek_parent&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-peek-parent">g_type_interface_peek_parent</A></CODE> in a global variable. </P>
<P>In this example <SPAN class=type>ViewerAudioFile</SPAN> overrides the <CODE class=function>save</CODE> interface method. In its overridden method it calls the base class implementation of the same interface method. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static</SPAN> ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>viewer_editable_parent_interface <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_editable_save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditable  <SPAN class="gtkdoc opt">*</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN>
                                 GError         <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  ViewerAudioFile <SPAN class="gtkdoc opt">*</SPAN>self <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>VIEWER_AUDIO_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"Audio file implementation of editable interface save method.</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* Now call the base implementation */</SPAN>
  viewer_editable_parent_interface<SPAN class="gtkdoc opt">-&gt;</SPAN><SPAN class=function>save</SPAN> <SPAN class="gtkdoc opt">(</SPAN>editable<SPAN class="gtkdoc opt">,</SPAN> error<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_editable_interface_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerEditableInterface <SPAN class="gtkdoc opt">*</SPAN>iface<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  viewer_editable_parent_interface <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-peek-parent">g_type_interface_peek_parent</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>iface<SPAN class="gtkdoc opt">);</SPAN>

  iface<SPAN class="gtkdoc opt">-&gt;</SPAN>save <SPAN class="gtkdoc opt">=</SPAN> viewer_audio_file_editable_save<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFile<SPAN class="gtkdoc opt">,</SPAN> viewer_audio_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER_TYPE_FILE<SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_EDITABLE<SPAN class="gtkdoc opt">,</SPAN>
                                                viewer_audio_file_editable_interface_init<SPAN class="gtkdoc opt">))</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Nothing here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_audio_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerAudioFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* Nothing here. */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="28694">Topic #28694: How to create and use signals.. Simple use of signals.. The signal system in GType is pretty complex and flexible: it is possible for its users to connect at runtime any number ...</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>How to create and use signals</H2></DIV></DIV></DIV>
<DIV class=toc>
<DL class=toc>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-signals.html#howto-simple-signals">Simple use of signals</A></SPAN></DT></DL></DIV>
<P>The signal system in GType is pretty complex and flexible: it is possible for its users to connect at runtime any number of callbacks (implemented in any language for which a binding exists) <A class=footnote href="https://developer.gnome.org/gobject/stable/howto-signals.html#ftn.id-1.6.5.2.1" name=id-1.6.5.2.1><SUP class=footnote>[8]</SUP></A> to any signal and to stop the emission of any signal at any state of the signal emission process. This flexibility makes it possible to use GSignal for much more than just emitting signals to multiple clients. </P>
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=howto-simple-signals></A>Simple use of signals</H2></DIV></DIV></DIV>
<P>The most basic use of signals is to implement event notification. For example, given a <SPAN class=type>ViewerFile</SPAN> object with a <CODE class=function>write</CODE> method, a signal could be emitted whenever the file is changed using that method. The code below shows how the user can connect a callback to the "changed" signal. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>file <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_FILE_TYPE<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-connect">g_signal_connect</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>file<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"changed"</SPAN><SPAN class="gtkdoc opt">, (</SPAN>GCallback<SPAN class="gtkdoc opt">)</SPAN> changed_event<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=function>viewer_file_write</SPAN> <SPAN class="gtkdoc opt">(</SPAN>file<SPAN class="gtkdoc opt">,</SPAN> buffer<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function>strlen</SPAN> <SPAN class="gtkdoc opt">(</SPAN>buffer<SPAN class="gtkdoc opt">));</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>The <SPAN class=type>ViewerFile</SPAN> signal is registered in the <CODE class=function>class_init</CODE> function: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>file_signals<SPAN class="gtkdoc opt">[</SPAN>CHANGED<SPAN class="gtkdoc opt">] =</SPAN> 
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-newv">g_signal_newv</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"changed"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FROM-CLASS:CAPS">G_TYPE_FROM_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object_class<SPAN class="gtkdoc opt">),</SPAN>
                 G_SIGNAL_RUN_LAST <SPAN class="gtkdoc opt">|</SPAN> G_SIGNAL_NO_RECURSE <SPAN class="gtkdoc opt">|</SPAN> G_SIGNAL_NO_HOOKS<SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* closure */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* accumulator */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* accumulator data */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* C marshaller */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 G_TYPE_NONE <SPAN class=comment>/* return_type */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 <SPAN class=number>0</SPAN>     <SPAN class=comment>/* n_params */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL  <SPAN class=comment>/* param_types */</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>and the signal is emitted in <CODE class=function>viewer_file_write</CODE>: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_write</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile   <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class="gtkdoc kwb">const</SPAN> guint8 <SPAN class="gtkdoc opt">*</SPAN>buffer<SPAN class="gtkdoc opt">,</SPAN>
                   gsize         size<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>buffer <SPAN class="gtkdoc opt">!=</SPAN> NULL <SPAN class="gtkdoc opt">||</SPAN> size <SPAN class="gtkdoc opt">==</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* First write data. */</SPAN>

  <SPAN class=comment>/* Then, notify user of data written. */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-emit">g_signal_emit</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> file_signals<SPAN class="gtkdoc opt">[</SPAN>CHANGED<SPAN class="gtkdoc opt">],</SPAN> <SPAN class=number>0</SPAN> <SPAN class=comment>/* details */</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>As shown above, the details parameter can safely be set to zero if no detail needs to be conveyed. For a discussion of what it can be used for, see <A title="The detail argument" class=xref href="https://developer.gnome.org/gobject/stable/signal.html#signal-detail">the section called &#8220;The <SPAN class=emphasis><EM>detail</EM></SPAN> argument&#8221;</A> </P>
<P>The C signal marshaller should always be <CODE class=literal>NULL</CODE>, in which case the best marshaller for the given closure type will be chosen by GLib. This may be an internal marshaller specific to the closure type, or <CODE class=function>g_cclosure_marshal_generic</CODE>, which implements generic conversion of arrays of parameters to C callback invocations. GLib used to require the user to write or generate a type-specific marshaller and pass that, but that has been deprecated in favour of automatic selection of marshallers. </P>
<P>Note that <CODE class=function>g_cclosure_marshal_generic</CODE> is slower than non-generic marshallers, so should be avoided for performance critical code. However, performance critical code should rarely be using signals anyway, as emitting a signal blocks on emitting it to all listeners, which has potentially unbounded cost. </P></DIV>
<DIV class=footnotes><BR>
<HR style="WIDTH: 100px; TEXT-ALIGN: left; MARGIN-LEFT: 0px">

<DIV id=ftn.id-1.6.5.2.1 class=footnote>
<P><A class=para href="https://developer.gnome.org/gobject/stable/howto-signals.html#id-1.6.5.2.1"><SUP class=para>[8] </SUP></A>A Python callback can be connected to any signal on any C-based GObject, and vice versa, assuming that the Python object inherits from GObject.</P></DIV></DIV>
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://www.supermemo.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.supermemo.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<a href="http://www.supermemo.com">www.supermemo.com</a><br>
date: 2017/4/11 17:57:01<br>
Page generated with:<br> SuperMemo 2008<br>Build: 14.04 of Feb 18, 2010
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
